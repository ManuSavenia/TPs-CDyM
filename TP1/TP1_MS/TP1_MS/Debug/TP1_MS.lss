
TP1_MS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000847  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068d  00000000  00000000  00000a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000307  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b1  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024f  00000000  00000000  000017e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>  // Retardos por software
/* Funci칩n main */
int main(void)
{
    /* Setup */
    DDRD = 0xFF;                // Configuro Puerto D como salida
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
    DDRC &= ~(1 << PORTC0);     // Configuro bit0 puerto C como entrada
  84:	87 b1       	in	r24, 0x07	; 7
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	87 b9       	out	0x07, r24	; 7
    PORTC |= (1 << PORTC0);     // Habilito Pull-Up en bit0 puerto C
  8a:	88 b1       	in	r24, 0x08	; 8
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	88 b9       	out	0x08, r24	; 8
    int state = 1;              // Variable para almacenar el estado del programa
    int par = 0;                // Variable para almacenar el estado del par/impar
    uint8_t valor = 0b00000001; // Variable para almacenar el valor de 8 bits (caso 2)
  90:	21 e0       	ldi	r18, 0x01	; 1
    /* Setup */
    DDRD = 0xFF;                // Configuro Puerto D como salida
    DDRC &= ~(1 << PORTC0);     // Configuro bit0 puerto C como entrada
    PORTC |= (1 << PORTC0);     // Habilito Pull-Up en bit0 puerto C
    int state = 1;              // Variable para almacenar el estado del programa
    int par = 0;                // Variable para almacenar el estado del par/impar
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
{
    /* Setup */
    DDRD = 0xFF;                // Configuro Puerto D como salida
    DDRC &= ~(1 << PORTC0);     // Configuro bit0 puerto C como entrada
    PORTC |= (1 << PORTC0);     // Habilito Pull-Up en bit0 puerto C
    int state = 1;              // Variable para almacenar el estado del programa
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <main+0x20>
        if (!(PINC & (1 << PINC0)))
        {
            state++;
            if (state > 3)
            {
                state = 1; // Reinicio el estado si supera el m치ximo
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
    int par = 0;                // Variable para almacenar el estado del par/impar
    uint8_t valor = 0b00000001; // Variable para almacenar el valor de 8 bits (caso 2)
    /* Loop */
    while (1)
    {
        switch (state)
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	91 05       	cpc	r25, r1
  a4:	21 f0       	breq	.+8      	; 0xae <main+0x2e>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	91 05       	cpc	r25, r1
  aa:	99 f1       	breq	.+102    	; 0x112 <main+0x92>
  ac:	49 c0       	rjmp	.+146    	; 0x140 <main+0xc0>
        {
        case 1:
            if (!par)
  ae:	45 2b       	or	r20, r21
  b0:	c1 f4       	brne	.+48     	; 0xe2 <main+0x62>
            {
                PORTD = 0b10101010; // Escribo Port D con patr칩n de bits
  b2:	3a ea       	ldi	r19, 0xAA	; 170
  b4:	3b b9       	out	0x0b, r19	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	3f ef       	ldi	r19, 0xFF	; 255
  b8:	41 ee       	ldi	r20, 0xE1	; 225
  ba:	54 e0       	ldi	r21, 0x04	; 4
  bc:	31 50       	subi	r19, 0x01	; 1
  be:	40 40       	sbci	r20, 0x00	; 0
  c0:	50 40       	sbci	r21, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x3c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x46>
  c6:	00 00       	nop
                _delay_ms(100);     // Delay de 100 ms
                PORTD = 0x00;       // Escribo Port D con todos 0
  c8:	1b b8       	out	0x0b, r1	; 11
  ca:	6f ef       	ldi	r22, 0xFF	; 255
  cc:	71 ee       	ldi	r23, 0xE1	; 225
  ce:	34 e0       	ldi	r19, 0x04	; 4
  d0:	61 50       	subi	r22, 0x01	; 1
  d2:	70 40       	sbci	r23, 0x00	; 0
  d4:	30 40       	sbci	r19, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x50>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x5a>
  da:	00 00       	nop
                _delay_ms(100);     // Delay de 100 ms
                par = 1;            // Cambio el estado de par/impar
  dc:	41 e0       	ldi	r20, 0x01	; 1
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	2f c0       	rjmp	.+94     	; 0x140 <main+0xc0>
            }
            else
            {
                PORTD = 0b01010101; // Escribo Port D con otro patr칩n de bits
  e2:	35 e5       	ldi	r19, 0x55	; 85
  e4:	3b b9       	out	0x0b, r19	; 11
  e6:	4f ef       	ldi	r20, 0xFF	; 255
  e8:	51 ee       	ldi	r21, 0xE1	; 225
  ea:	64 e0       	ldi	r22, 0x04	; 4
  ec:	41 50       	subi	r20, 0x01	; 1
  ee:	50 40       	sbci	r21, 0x00	; 0
  f0:	60 40       	sbci	r22, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x6c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x76>
  f6:	00 00       	nop
                _delay_ms(100);     // Delay de 100 ms
                PORTD = 0x00;       // Escribo Port D con todos 0
  f8:	1b b8       	out	0x0b, r1	; 11
  fa:	7f ef       	ldi	r23, 0xFF	; 255
  fc:	31 ee       	ldi	r19, 0xE1	; 225
  fe:	44 e0       	ldi	r20, 0x04	; 4
 100:	71 50       	subi	r23, 0x01	; 1
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	40 40       	sbci	r20, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x80>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x8a>
 10a:	00 00       	nop
                _delay_ms(100);     // Delay de 100 ms
                par = 0;            // Cambio el estado de par/impar
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	17 c0       	rjmp	.+46     	; 0x140 <main+0xc0>
            }
            break;
        case 2:
            PORTD = valor;           // Escribo Port D con el valor de 8 bits
 112:	2b b9       	out	0x0b, r18	; 11
 114:	6f ef       	ldi	r22, 0xFF	; 255
 116:	71 ee       	ldi	r23, 0xE1	; 225
 118:	34 e0       	ldi	r19, 0x04	; 4
 11a:	61 50       	subi	r22, 0x01	; 1
 11c:	70 40       	sbci	r23, 0x00	; 0
 11e:	30 40       	sbci	r19, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x9a>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0xa4>
 124:	00 00       	nop
            _delay_ms(100);          // Delay de 100 ms
            PORTD = 0x00;            // Escribo Port D con todos 0
 126:	1b b8       	out	0x0b, r1	; 11
 128:	6f ef       	ldi	r22, 0xFF	; 255
 12a:	71 ee       	ldi	r23, 0xE1	; 225
 12c:	34 e0       	ldi	r19, 0x04	; 4
 12e:	61 50       	subi	r22, 0x01	; 1
 130:	70 40       	sbci	r23, 0x00	; 0
 132:	30 40       	sbci	r19, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0xae>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0xb8>
 138:	00 00       	nop
            _delay_ms(100);          // Delay de 100 ms
            valor = valor << 1;      // Desplazo el valor a la izquierda
 13a:	22 0f       	add	r18, r18
            if (valor == 0b00000000) // Si el valor es 0, reinicio
 13c:	09 f4       	brne	.+2      	; 0x140 <main+0xc0>
            {
                valor = 0b00000001; // Reinicio el valor
 13e:	21 e0       	ldi	r18, 0x01	; 1
        case 3:
            
            break;
        }
        /* Si el bot칩n es presionado, cambio de estado */
        if (!(PINC & (1 << PINC0)))
 140:	30 99       	sbic	0x06, 0	; 6
 142:	ae cf       	rjmp	.-164    	; 0xa0 <main+0x20>
        {
            state++;
 144:	01 96       	adiw	r24, 0x01	; 1
            if (state > 3)
 146:	84 30       	cpi	r24, 0x04	; 4
 148:	91 05       	cpc	r25, r1
 14a:	0c f0       	brlt	.+2      	; 0x14e <main+0xce>
 14c:	a7 cf       	rjmp	.-178    	; 0x9c <main+0x1c>
 14e:	a8 cf       	rjmp	.-176    	; 0xa0 <main+0x20>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
