
tp3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000292e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000195  00800100  00800100  0000292e  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000292e  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000062  00000000  00000000  0000295d  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000029bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000234e  00000000  00000000  00002b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c13  00000000  00000000  00004e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d65  00000000  00000000  00005a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  000067e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000025b  00000000  00000000  00006b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b16  00000000  00000000  00006dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000078d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00002814  00002814  00002908  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.i2c_init 00000012  000027aa  000027aa  0000289e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_start 00000010  000027e0  000027e0  000028d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2c_write 00000014  00002796  00002796  0000288a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.i2c_read 00000020  0000265a  0000265a  0000274e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.i2c_stop 00000008  00002800  00002800  000028f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .progmemx.data 00000235  000000ce  000000ce  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 21 .text.print_welcome_msg 00000060  00002382  00002382  00002476  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.parse_command 0000007a  0000216e  0000216e  00002262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    00000268  000010be  000010be  000011b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.ok       00000001  008002ad  008002ad  0000292e  2**0
                  ALLOC
 25 .bss.WAITING_SET_ALARM 00000001  008002ae  008002ae  0000292e  2**0
                  ALLOC
 26 .bss.WAITING_SET_TIME 00000001  008002af  008002af  0000292e  2**0
                  ALLOC
 27 .bss.timer_flag 00000001  008002b0  008002b0  0000292e  2**0
                  ALLOC
 28 .bss.alarm_counter 00000001  008002b1  008002b1  0000292e  2**0
                  ALLOC
 29 .bss.flag_alarm 00000001  008002b2  008002b2  0000292e  2**0
                  ALLOC
 30 .bss.flag_on  00000001  008002b3  008002b3  0000292e  2**0
                  ALLOC
 31 .bss.rx_flag  00000001  008002b4  008002b4  0000292e  2**0
                  ALLOC
 32 .bss.cmd_index 00000001  008002b5  008002b5  0000292e  2**0
                  ALLOC
 33 .text.bcd_to_int 00000016  0000276a  0000276a  0000285e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.int_to_bcd 00000026  0000260e  0000260e  00002702  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.rtc_disable_alarm 0000001c  000026b8  000026b8  000027ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.rtc_init 00000006  00002808  00002808  000028fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.rtc_read_time 00000086  000020e8  000020e8  000021dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.rtc_set_time 00000062  00002320  00002320  00002414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.timer_init 00000028  000025e6  000025e6  000026da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__vector_11 0000001e  0000269a  0000269a  0000278e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.UART_init 00000018  0000270a  0000270a  000027fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.uart_send_char 00000050  000023e2  000023e2  000024d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.uart_send_string 0000002c  0000258e  0000258e  00002682  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .progmemx.data 00000003  00000326  00000326  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .text.__vector_18 000000ae  00001d34  00001d34  00001e28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.__vector_19 0000006c  000021e8  000021e8  000022dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .bss.tx_busy  00000001  008002b6  008002b6  0000292e  2**0
                  ALLOC
 48 .bss.tx_tail  00000001  008002b7  008002b7  0000292e  2**0
                  ALLOC
 49 .bss.tx_head  00000001  008002b8  008002b8  0000292e  2**0
                  ALLOC
 50 .text.get_initial_date 00000018  00002722  00002722  00002816  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.check_alarm 00000064  000022bc  000022bc  000023b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .rodata       00000018  00800295  00002822  00002916  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 53 .text.is_valid_date 000002f2  00000b4c  00000b4c  00000c40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.is_valid_time 000001a0  00001326  00001326  0000141a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.libgcc  0000001a  000026f0  000026f0  000027e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.__dummy_fini 00000002  0000281c  0000281c  00002910  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.__dummy_funcs_on_exit 00000002  0000281e  0000281e  00002912  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.__dummy_simulator_exit 00000002  00002820  00002820  00002914  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.exit    00000016  00002780  00002780  00002874  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.__wrap_sprintf 00000026  00002634  00002634  00002728  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .progmemx.data 00000007  00000319  00000319  0000040d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 62 .text.__fmt_s 000000ca  00001bba  00001bba  00001cae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.__out   00000068  00002254  00002254  00002348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.__pad   0000010e  00001900  00001900  000019f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.__dummy_fmt4 00000006  0000280e  0000280e  00002902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.__fmt_state 0000009e  00001f28  00001f28  0000201c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .progmemx.data 00000006  00000320  00000320  00000414  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 68 .text.__printf_core 00000822  0000032a  0000032a  0000041e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .progmemx.data.state_table 00000016  00000303  00000303  000003f7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 70 .text.fputc   00000092  00001fc6  00001fc6  000020ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__fmt_d 0000017e  000014c6  000014c6  000015ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__fmt_o 000000d4  00001ae6  00001ae6  00001bda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__cvt_u 0000014a  000017b6  000017b6  000018aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__fmt_u 000000b0  00001c84  00001c84  00001d78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__fmt_x 00000280  00000e3e  00000e3e  00000f32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__pop_float 00000040  00002474  00002474  00002568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__pop_int 00000172  00001644  00001644  00001738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__pop_ptr 000000d8  00001a0e  00001a0e  00001b02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.atoi    00000090  00002058  00002058  0000214c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.memset  00000012  000027bc  000027bc  000028b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.strcmp  00000042  00002432  00002432  00002526  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.strlen  0000002c  000025ba  000025ba  000026ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.tolower 00000010  000027f0  000027f0  000028e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.toupper 00000012  000027ce  000027ce  000028c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text._Exit   00000004  00002818  00002818  0000290c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vsprintf 00000018  0000273a  0000273a  0000282e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vsnprintf 000000a4  00001de2  00001de2  00001ed6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vfprintf 00000030  0000255e  0000255e  00002652  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.libgcc.div 0000001c  000026d4  000026d4  000027c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.libgcc.div 000000a2  00001e86  00001e86  00001f7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.libgcc  00000020  0000267a  0000267a  0000276e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.libgcc.prologue 00000038  000024f0  000024f0  000025e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.libgcc.prologue 00000036  00002528  00002528  0000261c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.libgcc.builtins 0000003c  000024b4  000024b4  000025a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.libgcc  00000018  00002752  00002752  00002846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
   8:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
   c:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  10:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  14:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  18:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  1c:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  20:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  24:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  28:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  2c:	0c 94 4d 13 	jmp	0x269a	; 0x269a <__vector_11>
  30:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  34:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  38:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  3c:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  40:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  44:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  48:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__vector_18>
  4c:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__vector_19>
  50:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  54:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  58:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  5c:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  60:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>
  64:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	02 95       	swap	r16
  6c:	80 02       	muls	r24, r16
  6e:	95 02       	muls	r25, r21
  70:	ad 00       	.word	0x00ad	; ????
  72:	28 22       	and	r2, r24
  74:	02 ad       	ldd	r16, Z+58	; 0x3a
  76:	02 b9       	out	0x02, r16	; 2
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 5f 08 	call	0x10be	; 0x10be <main>
  c6:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

00002814 <__bad_interrupt>:
    2814:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.i2c_init:

000027aa <i2c_init>:
#include "i2c.h"

void i2c_init(void){
   TWSR = 0x00;
    27aa:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
   TWBR = 72;           //frecuencia de 100KHz del SCL
    27ae:	88 e4       	ldi	r24, 0x48	; 72
    27b0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
   TWCR = (1 << TWEN);  //Habilitamos el I2C
    27b4:	84 e0       	ldi	r24, 0x04	; 4
    27b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    27ba:	08 95       	ret

Disassembly of section .text.i2c_start:

000027e0 <i2c_start>:
}

void i2c_start(void){
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    27e0:	84 ea       	ldi	r24, 0xA4	; 164
    27e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & (1 << TWINT)) == 0);
    27e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    27ea:	88 23       	and	r24, r24
    27ec:	e4 f7       	brge	.-8      	; 0x27e6 <i2c_start+0x6>
}
    27ee:	08 95       	ret

Disassembly of section .text.i2c_write:

00002796 <i2c_write>:

void i2c_write(uint8_t data){
    TWDR = data;                        //Cargamos el dato a enviar
    2796:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1 << TWINT) | (1 << TWEN);  //Iniciamos la transmision
    279a:	84 e8       	ldi	r24, 0x84	; 132
    279c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & (1 << TWINT)) == 0); //Esperamos a que se complete
    27a0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    27a4:	88 23       	and	r24, r24
    27a6:	e4 f7       	brge	.-8      	; 0x27a0 <i2c_write+0xa>
}
    27a8:	08 95       	ret

Disassembly of section .text.i2c_read:

0000265a <i2c_read>:

uint8_t i2c_read(uint8_t isLast){
    if (isLast)
    265a:	88 23       	and	r24, r24
    265c:	21 f0       	breq	.+8      	; 0x2666 <i2c_read+0xc>
        TWCR = (1 << TWINT) | (1 << TWEN); // Enviar Nack
    265e:	84 e8       	ldi	r24, 0x84	; 132
    2660:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2664:	03 c0       	rjmp	.+6      	; 0x266c <i2c_read+0x12>
    else
        TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Enviar Ack
    2666:	84 ec       	ldi	r24, 0xC4	; 196
    2668:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & (1 << TWINT)) == 0);
    266c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2670:	88 23       	and	r24, r24
    2672:	e4 f7       	brge	.-8      	; 0x266c <i2c_read+0x12>
    return TWDR; 
    2674:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
    2678:	08 95       	ret

Disassembly of section .text.i2c_stop:

00002800 <i2c_stop>:

void i2c_stop(void){
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2800:	84 e9       	ldi	r24, 0x94	; 148
    2802:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2806:	08 95       	ret

Disassembly of section .text.print_welcome_msg:

00002382 <print_welcome_msg>:
#include "rtc.h"
#include "timer.h"

#define BAUD_RATE 103

void print_welcome_msg(){
    2382:	cf 92       	push	r12
    2384:	df 92       	push	r13
    2386:	ef 92       	push	r14
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	c3 54       	subi	r28, 0x43	; 67
    2392:	d1 09       	sbc	r29, r1
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    char message[] = "Bienvenido\r\nCOMANDOS:\r\n - ON\r\n - OFF\r\n - SET TIME\r\n - SET ALARM\r\n\0";
    239e:	0f 2e       	mov	r0, r31
    23a0:	fe ec       	ldi	r31, 0xCE	; 206
    23a2:	cf 2e       	mov	r12, r31
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	df 2e       	mov	r13, r31
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	ef 2e       	mov	r14, r31
    23ac:	f0 2d       	mov	r31, r0
    23ae:	83 e4       	ldi	r24, 0x43	; 67
    23b0:	f6 01       	movw	r30, r12
    23b2:	9e 01       	movw	r18, r28
    23b4:	2f 5f       	subi	r18, 0xFF	; 255
    23b6:	3f 4f       	sbci	r19, 0xFF	; 255
    23b8:	d9 01       	movw	r26, r18
    23ba:	7e 2d       	mov	r23, r14
    23bc:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__movmemx_qi>
    uart_send_string(message);
    23c0:	b9 01       	movw	r22, r18
    23c2:	80 e8       	ldi	r24, 0x80	; 128
    23c4:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_send_string>
}
    23c8:	cd 5b       	subi	r28, 0xBD	; 189
    23ca:	df 4f       	sbci	r29, 0xFF	; 255
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	ef 90       	pop	r14
    23dc:	df 90       	pop	r13
    23de:	cf 90       	pop	r12
    23e0:	08 95       	ret

Disassembly of section .text.parse_command:

0000216e <parse_command>:
    INVALID
} command_t;

command_t command_type;

void parse_command(const char *cmd){
    216e:	cf 92       	push	r12
    2170:	df 92       	push	r13
    2172:	ef 92       	push	r14
    2174:	6b 01       	movw	r12, r22
    2176:	e8 2e       	mov	r14, r24
    if (strcmp(cmd, "ON") == 0)
    2178:	21 e1       	ldi	r18, 0x11	; 17
    217a:	31 e0       	ldi	r19, 0x01	; 1
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 19 12 	call	0x2432	; 0x2432 <strcmp>
    2182:	89 2b       	or	r24, r25
    2184:	21 f4       	brne	.+8      	; 0x218e <parse_command+0x20>
        command_type = COMMAND_ON;
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <command_type>
    218c:	29 c0       	rjmp	.+82     	; 0x21e0 <parse_command+0x72>
    else if (strcmp(cmd, "OFF") == 0)
    218e:	24 e1       	ldi	r18, 0x14	; 20
    2190:	31 e0       	ldi	r19, 0x01	; 1
    2192:	40 e0       	ldi	r20, 0x00	; 0
    2194:	8e 2d       	mov	r24, r14
    2196:	b6 01       	movw	r22, r12
    2198:	0e 94 19 12 	call	0x2432	; 0x2432 <strcmp>
    219c:	89 2b       	or	r24, r25
    219e:	19 f4       	brne	.+6      	; 0x21a6 <parse_command+0x38>
        command_type = COMMAND_OFF;
    21a0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <command_type>
    21a4:	1d c0       	rjmp	.+58     	; 0x21e0 <parse_command+0x72>
    else if (strcmp(cmd, "SET TIME") == 0)
    21a6:	28 e1       	ldi	r18, 0x18	; 24
    21a8:	31 e0       	ldi	r19, 0x01	; 1
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	8e 2d       	mov	r24, r14
    21ae:	b6 01       	movw	r22, r12
    21b0:	0e 94 19 12 	call	0x2432	; 0x2432 <strcmp>
    21b4:	89 2b       	or	r24, r25
    21b6:	21 f4       	brne	.+8      	; 0x21c0 <parse_command+0x52>
        command_type = COMMAND_SET_TIME;
    21b8:	82 e0       	ldi	r24, 0x02	; 2
    21ba:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <command_type>
    21be:	10 c0       	rjmp	.+32     	; 0x21e0 <parse_command+0x72>
    else if (strcmp(cmd, "SET ALARM") == 0)
    21c0:	21 e2       	ldi	r18, 0x21	; 33
    21c2:	31 e0       	ldi	r19, 0x01	; 1
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	8e 2d       	mov	r24, r14
    21c8:	b6 01       	movw	r22, r12
    21ca:	0e 94 19 12 	call	0x2432	; 0x2432 <strcmp>
    21ce:	89 2b       	or	r24, r25
    21d0:	21 f4       	brne	.+8      	; 0x21da <parse_command+0x6c>
        command_type = COMMAND_SET_ALARM;
    21d2:	83 e0       	ldi	r24, 0x03	; 3
    21d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <command_type>
    21d8:	03 c0       	rjmp	.+6      	; 0x21e0 <parse_command+0x72>
    else{
        command_type = INVALID; 
    21da:	84 e0       	ldi	r24, 0x04	; 4
    21dc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <command_type>
    }
}
    21e0:	ef 90       	pop	r14
    21e2:	df 90       	pop	r13
    21e4:	cf 90       	pop	r12
    21e6:	08 95       	ret

Disassembly of section .text.main:

000010be <main>:

int main(void){
    UART_init(BAUD_RATE);               // Inicializa UART con la velocidad de baudios definida
    10be:	87 e6       	ldi	r24, 0x67	; 103
    10c0:	0e 94 85 13 	call	0x270a	; 0x270a <UART_init>
    print_welcome_msg();                // Imprime mensaje de bienvenida
    10c4:	0e 94 c1 11 	call	0x2382	; 0x2382 <print_welcome_msg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10c8:	2f ef       	ldi	r18, 0xFF	; 255
    10ca:	80 e7       	ldi	r24, 0x70	; 112
    10cc:	92 e0       	ldi	r25, 0x02	; 2
    10ce:	21 50       	subi	r18, 0x01	; 1
    10d0:	80 40       	sbci	r24, 0x00	; 0
    10d2:	90 40       	sbci	r25, 0x00	; 0
    10d4:	e1 f7       	brne	.-8      	; 0x10ce <main+0x10>
    10d6:	00 c0       	rjmp	.+0      	; 0x10d8 <main+0x1a>
    10d8:	00 00       	nop
    _delay_ms(50);

    timer_init();                       // Inicializa el timer1 para interrupciones cada segundo
    10da:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <timer_init>

    i2c_init();                         // Inicializa I2C
    10de:	0e 94 d5 13 	call	0x27aa	; 0x27aa <i2c_init>
    rtc_init();                         // Inicializa el RTC
    10e2:	0e 94 04 14 	call	0x2808	; 0x2808 <rtc_init>
    10e6:	2f ef       	ldi	r18, 0xFF	; 255
    10e8:	80 e7       	ldi	r24, 0x70	; 112
    10ea:	92 e0       	ldi	r25, 0x02	; 2
    10ec:	21 50       	subi	r18, 0x01	; 1
    10ee:	80 40       	sbci	r24, 0x00	; 0
    10f0:	90 40       	sbci	r25, 0x00	; 0
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <main+0x2e>
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <main+0x38>
    10f6:	00 00       	nop
    _delay_ms(50);

    get_initial_date(&current_date);    // Hora inicial hardcodeada
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	0e 94 91 13 	call	0x2722	; 0x2722 <get_initial_date>
    rtc_set_time(&current_date);        // Configura el RTC con la fecha inicial
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	0e 94 90 11 	call	0x2320	; 0x2320 <rtc_set_time>
    1108:	2f ef       	ldi	r18, 0xFF	; 255
    110a:	80 e7       	ldi	r24, 0x70	; 112
    110c:	92 e0       	ldi	r25, 0x02	; 2
    110e:	21 50       	subi	r18, 0x01	; 1
    1110:	80 40       	sbci	r24, 0x00	; 0
    1112:	90 40       	sbci	r25, 0x00	; 0
    1114:	e1 f7       	brne	.-8      	; 0x110e <main+0x50>
    1116:	00 c0       	rjmp	.+0      	; 0x1118 <main+0x5a>
    1118:	00 00       	nop

    _delay_ms(50);
    sei();
    111a:	78 94       	sei

    while (1){
        // se ejecuta cada 1 segundo
        if (timer_flag){
    111c:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <timer_flag>
    1120:	88 23       	and	r24, r24
    1122:	09 f4       	brne	.+2      	; 0x1126 <main+0x68>
    1124:	5e c0       	rjmp	.+188    	; 0x11e2 <main+0x124>
            timer_flag = 0;
    1126:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <timer_flag>
            rtc_read_time(&current_date);  // leer el tiempo del DS3231
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <rtc_read_time>
            if (alarm_counter != 0) {
    1132:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <alarm_counter>
    1136:	88 23       	and	r24, r24
    1138:	59 f0       	breq	.+22     	; 0x1150 <main+0x92>
                alarm_counter--;
    113a:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <alarm_counter>
    113e:	81 50       	subi	r24, 0x01	; 1
    1140:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <alarm_counter>
                uart_send_string("ALARMA\r\n");
    1144:	6b e2       	ldi	r22, 0x2B	; 43
    1146:	71 e0       	ldi	r23, 0x01	; 1
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_send_string>
    114e:	49 c0       	rjmp	.+146    	; 0x11e2 <main+0x124>
            }
            else{
                // si esta el modo ON, enviar la hora actual
                if (flag_on && !WAITING_SET_TIME && !WAITING_SET_ALARM) {
    1150:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <flag_on>
    1154:	88 23       	and	r24, r24
    1156:	a1 f1       	breq	.+104    	; 0x11c0 <main+0x102>
    1158:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <WAITING_SET_TIME>
    115c:	81 11       	cpse	r24, r1
    115e:	30 c0       	rjmp	.+96     	; 0x11c0 <main+0x102>
    1160:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <WAITING_SET_ALARM>
    1164:	81 11       	cpse	r24, r1
    1166:	2c c0       	rjmp	.+88     	; 0x11c0 <main+0x102>
                    sprintf(buffer, "FECHA: %02d/%02d/%02d HORA:%02d:%02d:%02d\r\n",
                            current_date.day, current_date.month, current_date.year,
                            current_date.hours, current_date.minutes, current_date.seconds);
    1168:	e0 e0       	ldi	r30, 0x00	; 0
    116a:	f1 e0       	ldi	r31, 0x01	; 1
    116c:	55 81       	ldd	r21, Z+5	; 0x05
    116e:	44 81       	ldd	r20, Z+4	; 0x04
    1170:	33 81       	ldd	r19, Z+3	; 0x03
            }
            else{
                // si esta el modo ON, enviar la hora actual
                if (flag_on && !WAITING_SET_TIME && !WAITING_SET_ALARM) {
                    sprintf(buffer, "FECHA: %02d/%02d/%02d HORA:%02d:%02d:%02d\r\n",
                            current_date.day, current_date.month, current_date.year,
    1172:	20 81       	ld	r18, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	82 81       	ldd	r24, Z+2	; 0x02
                uart_send_string("ALARMA\r\n");
            }
            else{
                // si esta el modo ON, enviar la hora actual
                if (flag_on && !WAITING_SET_TIME && !WAITING_SET_ALARM) {
                    sprintf(buffer, "FECHA: %02d/%02d/%02d HORA:%02d:%02d:%02d\r\n",
    1178:	1f 92       	push	r1
    117a:	5f 93       	push	r21
    117c:	1f 92       	push	r1
    117e:	4f 93       	push	r20
    1180:	1f 92       	push	r1
    1182:	3f 93       	push	r19
    1184:	1f 92       	push	r1
    1186:	2f 93       	push	r18
    1188:	1f 92       	push	r1
    118a:	9f 93       	push	r25
    118c:	1f 92       	push	r1
    118e:	8f 93       	push	r24
    1190:	84 e3       	ldi	r24, 0x34	; 52
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	a0 e0       	ldi	r26, 0x00	; 0
    1196:	af 93       	push	r26
    1198:	9f 93       	push	r25
    119a:	8f 93       	push	r24
    119c:	07 e8       	ldi	r16, 0x87	; 135
    119e:	11 e0       	ldi	r17, 0x01	; 1
    11a0:	1f 93       	push	r17
    11a2:	0f 93       	push	r16
    11a4:	0e 94 1a 13 	call	0x2634	; 0x2634 <_sprintf_cdnopuxX>
                            current_date.day, current_date.month, current_date.year,
                            current_date.hours, current_date.minutes, current_date.seconds);
                    uart_send_string(buffer);
    11a8:	b8 01       	movw	r22, r16
    11aa:	80 e8       	ldi	r24, 0x80	; 128
    11ac:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_send_string>
    11b0:	8d b7       	in	r24, 0x3d	; 61
    11b2:	9e b7       	in	r25, 0x3e	; 62
    11b4:	41 96       	adiw	r24, 0x11	; 17
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	9e bf       	out	0x3e, r25	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	8d bf       	out	0x3d, r24	; 61
                }
                // si la alarma esta activa, verificar si se debe activar
                if (flag_alarm) {
    11c0:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <flag_alarm>
    11c4:	88 23       	and	r24, r24
    11c6:	69 f0       	breq	.+26     	; 0x11e2 <main+0x124>
                    if (check_alarm(&current_date, &alarm_date)) {
    11c8:	67 e0       	ldi	r22, 0x07	; 7
    11ca:	72 e0       	ldi	r23, 0x02	; 2
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	0e 94 5e 11 	call	0x22bc	; 0x22bc <check_alarm>
    11d4:	88 23       	and	r24, r24
    11d6:	29 f0       	breq	.+10     	; 0x11e2 <main+0x124>
                        flag_alarm = 0; // Desactiva la alarma
    11d8:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <flag_alarm>
                        alarm_counter = 5;
    11dc:	85 e0       	ldi	r24, 0x05	; 5
    11de:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <alarm_counter>
                }
            }
        }

        // se ejecuta cada vez que se recibe un comando por UART
        if (rx_flag){
    11e2:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <rx_flag>
    11e6:	88 23       	and	r24, r24
    11e8:	09 f4       	brne	.+2      	; 0x11ec <main+0x12e>
    11ea:	98 cf       	rjmp	.-208    	; 0x111c <main+0x5e>
            rx_flag = 0;
    11ec:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <rx_flag>

            if (WAITING_SET_TIME){
    11f0:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <WAITING_SET_TIME>
    11f4:	88 23       	and	r24, r24
    11f6:	f9 f0       	breq	.+62     	; 0x1236 <main+0x178>
                //validar fecha, hora y actualizar RTC                
                ok = is_valid_date((char *)rx_buffer, &current_date);
    11f8:	67 e0       	ldi	r22, 0x07	; 7
    11fa:	71 e0       	ldi	r23, 0x01	; 1
    11fc:	80 e8       	ldi	r24, 0x80	; 128
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	51 e0       	ldi	r21, 0x01	; 1
    1202:	0e 94 a6 05 	call	0xb4c	; 0xb4c <is_valid_date>
    1206:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <ok>
                if (ok == 1){
    120a:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <ok>
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	61 f4       	brne	.+24     	; 0x122a <main+0x16c>
                    rtc_set_time(&current_date); // Actualiza el RTC con la nueva fecha y hora
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	0e 94 90 11 	call	0x2320	; 0x2320 <rtc_set_time>
                    uart_send_string("Fecha y hora actualizadas correctamente.\r\n");
    121a:	60 e6       	ldi	r22, 0x60	; 96
    121c:	71 e0       	ldi	r23, 0x01	; 1
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_send_string>
                    WAITING_SET_TIME = 0; // Resetea el flag de espera
    1224:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <WAITING_SET_TIME>
    1228:	79 cf       	rjmp	.-270    	; 0x111c <main+0x5e>
                } else {
                    uart_send_string("Fecha y hora no validas. Formato esperado: DD/MM/YY HH:MM:SS\r\n");
    122a:	6b e8       	ldi	r22, 0x8B	; 139
    122c:	71 e0       	ldi	r23, 0x01	; 1
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_send_string>
                }
                continue;
    1234:	73 cf       	rjmp	.-282    	; 0x111c <main+0x5e>
            }

            if (WAITING_SET_ALARM){
    1236:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <WAITING_SET_ALARM>
    123a:	88 23       	and	r24, r24
    123c:	09 f1       	breq	.+66     	; 0x1280 <main+0x1c2>
                //validar hora y actualizar alarma 
                ok = is_valid_time((char *)rx_buffer, &alarm_date, &current_date);
    123e:	00 e0       	ldi	r16, 0x00	; 0
    1240:	11 e0       	ldi	r17, 0x01	; 1
    1242:	20 e8       	ldi	r18, 0x80	; 128
    1244:	67 e0       	ldi	r22, 0x07	; 7
    1246:	71 e0       	ldi	r23, 0x01	; 1
    1248:	80 e8       	ldi	r24, 0x80	; 128
    124a:	47 e0       	ldi	r20, 0x07	; 7
    124c:	52 e0       	ldi	r21, 0x02	; 2
    124e:	0e 94 93 09 	call	0x1326	; 0x1326 <is_valid_time>
    1252:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <ok>
                if (ok){
    1256:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <ok>
    125a:	88 23       	and	r24, r24
    125c:	59 f0       	breq	.+22     	; 0x1274 <main+0x1b6>
                    WAITING_SET_ALARM = 0;
    125e:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <WAITING_SET_ALARM>
                    flag_alarm = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <flag_alarm>
                    uart_send_string("Hora de alarma actualizada correctamente.\r\n");
    1268:	6a ec       	ldi	r22, 0xCA	; 202
    126a:	71 e0       	ldi	r23, 0x01	; 1
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_send_string>
    1272:	54 cf       	rjmp	.-344    	; 0x111c <main+0x5e>
                }
                else{
                    uart_send_string("Hora de alarma no valida. Formato esperado: HH:MM:SS\r\n");
    1274:	66 ef       	ldi	r22, 0xF6	; 246
    1276:	71 e0       	ldi	r23, 0x01	; 1
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_send_string>
                }
                continue;
    127e:	4e cf       	rjmp	.-356    	; 0x111c <main+0x5e>
           }

            parse_command((char *)rx_buffer); // Procesa el comando recibido
    1280:	67 e0       	ldi	r22, 0x07	; 7
    1282:	71 e0       	ldi	r23, 0x01	; 1
    1284:	80 e8       	ldi	r24, 0x80	; 128
    1286:	0e 94 b7 10 	call	0x216e	; 0x216e <parse_command>

            if (command_type == INVALID) {
    128a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <command_type>
    128e:	84 30       	cpi	r24, 0x04	; 4
    1290:	31 f4       	brne	.+12     	; 0x129e <main+0x1e0>
                uart_send_string("Comando no reconocido\r\n\0");
    1292:	6d e2       	ldi	r22, 0x2D	; 45
    1294:	72 e0       	ldi	r23, 0x02	; 2
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_send_string>
                continue;
    129c:	3f cf       	rjmp	.-386    	; 0x111c <main+0x5e>
            }
            else if (command_type == COMMAND_OFF){
    129e:	81 11       	cpse	r24, r1
    12a0:	12 c0       	rjmp	.+36     	; 0x12c6 <main+0x208>
                if (flag_on) {
    12a2:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <flag_on>
    12a6:	88 23       	and	r24, r24
    12a8:	41 f0       	breq	.+16     	; 0x12ba <main+0x1fc>
                    flag_on = 0; // Desactiva el modo ON
    12aa:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <flag_on>
                    uart_send_string("MODO OFF activado.\r\n");
    12ae:	66 e4       	ldi	r22, 0x46	; 70
    12b0:	72 e0       	ldi	r23, 0x02	; 2
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_send_string>
    12b8:	31 cf       	rjmp	.-414    	; 0x111c <main+0x5e>
                } else {
                    uart_send_string("El sistema ya esta en modo OFF.\r\n");
    12ba:	6b e5       	ldi	r22, 0x5B	; 91
    12bc:	72 e0       	ldi	r23, 0x02	; 2
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_send_string>
    12c4:	2b cf       	rjmp	.-426    	; 0x111c <main+0x5e>
                }
            }
            else if (command_type == COMMAND_ON){
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	99 f4       	brne	.+38     	; 0x12f0 <main+0x232>
                if (flag_on) {
    12ca:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <flag_on>
    12ce:	88 23       	and	r24, r24
    12d0:	31 f0       	breq	.+12     	; 0x12de <main+0x220>
                    uart_send_string("El sistema ya esta en modo ON.\r\n");
    12d2:	6d e7       	ldi	r22, 0x7D	; 125
    12d4:	72 e0       	ldi	r23, 0x02	; 2
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_send_string>
    12dc:	1f cf       	rjmp	.-450    	; 0x111c <main+0x5e>
                } else {
                    flag_on = 1; // Activa el modo ON
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <flag_on>
                    uart_send_string("MODO ON activado.\r\n");
    12e4:	6e e9       	ldi	r22, 0x9E	; 158
    12e6:	72 e0       	ldi	r23, 0x02	; 2
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_send_string>
    12ee:	16 cf       	rjmp	.-468    	; 0x111c <main+0x5e>
                }
            }
            else if (command_type == COMMAND_SET_TIME){
    12f0:	82 30       	cpi	r24, 0x02	; 2
    12f2:	59 f4       	brne	.+22     	; 0x130a <main+0x24c>
                flag_on = 0;
    12f4:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <flag_on>
                WAITING_SET_TIME = 1;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <WAITING_SET_TIME>
                uart_send_string("Ingrese fecha y hora (DD/MM/YY HH:MM:SS):\r\n");
    12fe:	62 eb       	ldi	r22, 0xB2	; 178
    1300:	72 e0       	ldi	r23, 0x02	; 2
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_send_string>
    1308:	09 cf       	rjmp	.-494    	; 0x111c <main+0x5e>
            }
            else if (command_type == COMMAND_SET_ALARM){
    130a:	83 30       	cpi	r24, 0x03	; 3
    130c:	09 f0       	breq	.+2      	; 0x1310 <main+0x252>
    130e:	06 cf       	rjmp	.-500    	; 0x111c <main+0x5e>
                flag_on = 0;
    1310:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <flag_on>
                WAITING_SET_ALARM = 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <WAITING_SET_ALARM>
                uart_send_string("Ingrese hora de alarma (HH:MM:SS):\r\n");
    131a:	6e ed       	ldi	r22, 0xDE	; 222
    131c:	72 e0       	ldi	r23, 0x02	; 2
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_send_string>
    1324:	fb ce       	rjmp	.-522    	; 0x111c <main+0x5e>

Disassembly of section .text.bcd_to_int:

0000276a <bcd_to_int>:
#include "rtc.h"

uint8_t bcd_to_int(uint8_t bcd) {
    return (((bcd >> 4) & 0x0F) * 10) + (bcd & 0x0F);
    276a:	98 2f       	mov	r25, r24
    276c:	92 95       	swap	r25
    276e:	9f 70       	andi	r25, 0x0F	; 15
    2770:	99 0f       	add	r25, r25
    2772:	29 2f       	mov	r18, r25
    2774:	22 0f       	add	r18, r18
    2776:	22 0f       	add	r18, r18
    2778:	92 0f       	add	r25, r18
    277a:	8f 70       	andi	r24, 0x0F	; 15
}
    277c:	89 0f       	add	r24, r25
    277e:	08 95       	ret

Disassembly of section .text.int_to_bcd:

0000260e <int_to_bcd>:

uint8_t int_to_bcd(uint8_t value) {
    return (((value / 10) << 4) & 0xF0) | (value % 10);
    260e:	9d ec       	ldi	r25, 0xCD	; 205
    2610:	89 9f       	mul	r24, r25
    2612:	91 2d       	mov	r25, r1
    2614:	11 24       	eor	r1, r1
    2616:	96 95       	lsr	r25
    2618:	96 95       	lsr	r25
    261a:	96 95       	lsr	r25
    261c:	20 e1       	ldi	r18, 0x10	; 16
    261e:	92 9f       	mul	r25, r18
    2620:	a0 01       	movw	r20, r0
    2622:	11 24       	eor	r1, r1
    2624:	99 0f       	add	r25, r25
    2626:	29 2f       	mov	r18, r25
    2628:	22 0f       	add	r18, r18
    262a:	22 0f       	add	r18, r18
    262c:	92 0f       	add	r25, r18
    262e:	89 1b       	sub	r24, r25
}
    2630:	84 2b       	or	r24, r20
    2632:	08 95       	ret

Disassembly of section .text.rtc_disable_alarm:

000026b8 <rtc_disable_alarm>:
void rtc_init(void) {
    rtc_disable_alarm(); // Desactivar alarma al iniciar
}

void rtc_disable_alarm(void) {
    i2c_start();
    26b8:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <i2c_start>
    i2c_write(DS3231_WRITE_MODE);
    26bc:	80 ed       	ldi	r24, 0xD0	; 208
    26be:	0e 94 cb 13 	call	0x2796	; 0x2796 <i2c_write>
    i2c_write(DS3231_CONTROL_REG); // Apuntar al registro de control
    26c2:	8e e0       	ldi	r24, 0x0E	; 14
    26c4:	0e 94 cb 13 	call	0x2796	; 0x2796 <i2c_write>

    i2c_write(0x00); // Desactivar alarma 1 y 2
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	0e 94 cb 13 	call	0x2796	; 0x2796 <i2c_write>
    i2c_stop();
    26ce:	0e 94 00 14 	call	0x2800	; 0x2800 <i2c_stop>
    26d2:	08 95       	ret

Disassembly of section .text.rtc_init:

00002808 <rtc_init>:
uint8_t int_to_bcd(uint8_t value) {
    return (((value / 10) << 4) & 0xF0) | (value % 10);
}

void rtc_init(void) {
    rtc_disable_alarm(); // Desactivar alarma al iniciar
    2808:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <rtc_disable_alarm>
    280c:	08 95       	ret

Disassembly of section .text.rtc_read_time:

000020e8 <rtc_read_time>:

    i2c_write(0x00); // Desactivar alarma 1 y 2
    i2c_stop();
}

void rtc_read_time(date_t *date) {
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    20ec:	ec 01       	movw	r28, r24
    i2c_start();
    20ee:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <i2c_start>
    i2c_write(DS3231_WRITE_MODE);
    20f2:	80 ed       	ldi	r24, 0xD0	; 208
    20f4:	0e 94 cb 13 	call	0x2796	; 0x2796 <i2c_write>
    i2c_write(DS3231_SECONDS_REG);      // Setear el registro de inicio en segundos
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	0e 94 cb 13 	call	0x2796	; 0x2796 <i2c_write>

    i2c_stop();
    20fe:	0e 94 00 14 	call	0x2800	; 0x2800 <i2c_stop>
    
    i2c_start();
    2102:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <i2c_start>
    i2c_write(DS3231_READ_MODE);
    2106:	81 ed       	ldi	r24, 0xD1	; 209
    2108:	0e 94 cb 13 	call	0x2796	; 0x2796 <i2c_write>

    date->seconds = bcd_to_int(i2c_read(0) & SECONDS_MASK);
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	0e 94 2d 13 	call	0x265a	; 0x265a <i2c_read>
    2112:	8f 77       	andi	r24, 0x7F	; 127
    2114:	0e 94 b5 13 	call	0x276a	; 0x276a <bcd_to_int>
    2118:	8d 83       	std	Y+5, r24	; 0x05
    date->minutes = bcd_to_int(i2c_read(0) & MINUTES_MASK);
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	0e 94 2d 13 	call	0x265a	; 0x265a <i2c_read>
    2120:	8f 77       	andi	r24, 0x7F	; 127
    2122:	0e 94 b5 13 	call	0x276a	; 0x276a <bcd_to_int>
    2126:	8c 83       	std	Y+4, r24	; 0x04
    date->hours = bcd_to_int(i2c_read(0) & HOURS_MASK);
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	0e 94 2d 13 	call	0x265a	; 0x265a <i2c_read>
    212e:	8f 73       	andi	r24, 0x3F	; 63
    2130:	0e 94 b5 13 	call	0x276a	; 0x276a <bcd_to_int>
    2134:	8b 83       	std	Y+3, r24	; 0x03

    i2c_read(0);
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	0e 94 2d 13 	call	0x265a	; 0x265a <i2c_read>

    date->day = bcd_to_int(i2c_read(0) & DAYS_MASK);
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	0e 94 2d 13 	call	0x265a	; 0x265a <i2c_read>
    2142:	8f 73       	andi	r24, 0x3F	; 63
    2144:	0e 94 b5 13 	call	0x276a	; 0x276a <bcd_to_int>
    2148:	8a 83       	std	Y+2, r24	; 0x02
    date->month = bcd_to_int(i2c_read(0) & MONTHS_MASK); // Es necesario para ignorar el bit de century
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	0e 94 2d 13 	call	0x265a	; 0x265a <i2c_read>
    2150:	8f 71       	andi	r24, 0x1F	; 31
    2152:	0e 94 b5 13 	call	0x276a	; 0x276a <bcd_to_int>
    2156:	89 83       	std	Y+1, r24	; 0x01
    date->year = bcd_to_int(i2c_read(1) & YEARS_MASK);
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	0e 94 2d 13 	call	0x265a	; 0x265a <i2c_read>
    215e:	0e 94 b5 13 	call	0x276a	; 0x276a <bcd_to_int>
    2162:	88 83       	st	Y, r24

    i2c_stop();
    2164:	0e 94 00 14 	call	0x2800	; 0x2800 <i2c_stop>
}
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	08 95       	ret

Disassembly of section .text.rtc_set_time:

00002320 <rtc_set_time>:

void rtc_set_time(date_t *date)
{
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	ec 01       	movw	r28, r24
    i2c_start();
    2326:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <i2c_start>
    i2c_write(DS3231_WRITE_MODE);
    232a:	80 ed       	ldi	r24, 0xD0	; 208
    232c:	0e 94 cb 13 	call	0x2796	; 0x2796 <i2c_write>
    i2c_write(DS3231_SECONDS_REG); // Apuntar al primer registro (segundos)
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	0e 94 cb 13 	call	0x2796	; 0x2796 <i2c_write>

    i2c_write(int_to_bcd(date->seconds));
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	0e 94 07 13 	call	0x260e	; 0x260e <int_to_bcd>
    233c:	0e 94 cb 13 	call	0x2796	; 0x2796 <i2c_write>
    i2c_write(int_to_bcd(date->minutes));
    2340:	8c 81       	ldd	r24, Y+4	; 0x04
    2342:	0e 94 07 13 	call	0x260e	; 0x260e <int_to_bcd>
    2346:	0e 94 cb 13 	call	0x2796	; 0x2796 <i2c_write>
    i2c_write(int_to_bcd(date->hours));
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	0e 94 07 13 	call	0x260e	; 0x260e <int_to_bcd>
    2350:	0e 94 cb 13 	call	0x2796	; 0x2796 <i2c_write>
    i2c_write(0); // Día de la semana (lo ignoramos o seteamos a 1)
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	0e 94 cb 13 	call	0x2796	; 0x2796 <i2c_write>

    i2c_write(int_to_bcd(date->day));
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	0e 94 07 13 	call	0x260e	; 0x260e <int_to_bcd>
    2360:	0e 94 cb 13 	call	0x2796	; 0x2796 <i2c_write>
    i2c_write(int_to_bcd(date->month));
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	0e 94 07 13 	call	0x260e	; 0x260e <int_to_bcd>
    236a:	0e 94 cb 13 	call	0x2796	; 0x2796 <i2c_write>
    i2c_write(int_to_bcd(date->year));
    236e:	88 81       	ld	r24, Y
    2370:	0e 94 07 13 	call	0x260e	; 0x260e <int_to_bcd>
    2374:	0e 94 cb 13 	call	0x2796	; 0x2796 <i2c_write>

    i2c_stop();
    2378:	0e 94 00 14 	call	0x2800	; 0x2800 <i2c_stop>
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	08 95       	ret

Disassembly of section .text.timer_init:

000025e6 <timer_init>:
#include "timer.h"

void timer_init(void) {
    // Timer1 en modo CTC 
    // TCCR1A = 0;
    TCCR1B |= (1 << WGM12); // Modo CTC, TOP = OCR1A
    25e6:	e1 e8       	ldi	r30, 0x81	; 129
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	88 60       	ori	r24, 0x08	; 8
    25ee:	80 83       	st	Z, r24

    // 16MHz / 1024 = 15.625kHz -> 1s = 15,625 ciclos
    OCR1A = 15624;
    25f0:	88 e0       	ldi	r24, 0x08	; 8
    25f2:	9d e3       	ldi	r25, 0x3D	; 61
    25f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    25f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    // Prescaler = 1024
    TCCR1B |= (1 << CS12) | (1 << CS10);
    25fc:	80 81       	ld	r24, Z
    25fe:	85 60       	ori	r24, 0x05	; 5
    2600:	80 83       	st	Z, r24

    // Habilita interrupción por comparación en OCR1A
    TIMSK1 |= (1 << OCIE1A);
    2602:	ef e6       	ldi	r30, 0x6F	; 111
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	82 60       	ori	r24, 0x02	; 2
    260a:	80 83       	st	Z, r24
    260c:	08 95       	ret

Disassembly of section .text.__vector_11:

0000269a <__vector_11>:
}

// ISR de Timer1 – ejecutado cada 1 segundo
ISR(TIMER1_COMPA_vect) {
    269a:	1f 92       	push	r1
    269c:	0f 92       	push	r0
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	0f 92       	push	r0
    26a2:	11 24       	eor	r1, r1
    26a4:	8f 93       	push	r24
    timer_flag = 1;
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <timer_flag>
    // uart_send_string("Timer interrupt triggered\r\n");
    26ac:	8f 91       	pop	r24
    26ae:	0f 90       	pop	r0
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	0f 90       	pop	r0
    26b4:	1f 90       	pop	r1
    26b6:	18 95       	reti

Disassembly of section .text.UART_init:

0000270a <UART_init>:
volatile uint8_t tx_tail = 0;
volatile uint8_t tx_busy = 0;
char buffer[CMD_BUFFER_SIZE];

void UART_init(uint8_t baud_rate){
   UCSR0B = 0;
    270a:	e1 ec       	ldi	r30, 0xC1	; 193
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	10 82       	st	Z, r1
   UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);              // Configura el formato de datos: 8 bits, sin paridad, 1 bit de stop
    2710:	96 e0       	ldi	r25, 0x06	; 6
    2712:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  UBRR0L = (unsigned char)baud_rate;                // Configura el baud rate
    2716:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
   UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); // Habilita RX, TX y RXC interrupt
    271a:	80 81       	ld	r24, Z
    271c:	88 69       	ori	r24, 0x98	; 152
    271e:	80 83       	st	Z, r24
    2720:	08 95       	ret

Disassembly of section .text.uart_send_char:

000023e2 <uart_send_char>:
    uart_send_char(received); // Eco del carácter recibido
  }
}

void uart_send_char(uint8_t ch){
  uint8_t next_head = (tx_head + 1) % CMD_BUFFER_SIZE;
    23e2:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <tx_head>
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	2f 5f       	subi	r18, 0xFF	; 255
    23ea:	3f 4f       	sbci	r19, 0xFF	; 255
    23ec:	2f 77       	andi	r18, 0x7F	; 127
    23ee:	30 78       	andi	r19, 0x80	; 128
    23f0:	33 23       	and	r19, r19
    23f2:	34 f4       	brge	.+12     	; 0x2400 <uart_send_char+0x1e>
    23f4:	21 50       	subi	r18, 0x01	; 1
    23f6:	31 09       	sbc	r19, r1
    23f8:	20 68       	ori	r18, 0x80	; 128
    23fa:	3f 6f       	ori	r19, 0xFF	; 255
    23fc:	2f 5f       	subi	r18, 0xFF	; 255
    23fe:	3f 4f       	sbci	r19, 0xFF	; 255

  // Esperar si el buffer está lleno
  while (next_head == tx_tail)
    2400:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <tx_tail>
    2404:	29 17       	cp	r18, r25
    2406:	e1 f3       	breq	.-8      	; 0x2400 <uart_send_char+0x1e>
    ; // bloqueante, o podés implementar timeout

  tx_buffer[tx_head] = ch;
    2408:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <tx_head>
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	ed 5e       	subi	r30, 0xED	; 237
    2410:	fd 4f       	sbci	r31, 0xFD	; 253
    2412:	80 83       	st	Z, r24
  tx_head = next_head;
    2414:	20 93 b8 02 	sts	0x02B8, r18	; 0x8002b8 <tx_head>

  // si no hay transmisión en curso, iniciar la transmisión
  if (!tx_busy)
    2418:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <tx_busy>
    241c:	81 11       	cpse	r24, r1
    241e:	08 c0       	rjmp	.+16     	; 0x2430 <uart_send_char+0x4e>
  {
    tx_busy = 1;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <tx_busy>
    UCSR0B |= (1 << UDRIE0); //habilitar interrupcion de transmisión
    2426:	e1 ec       	ldi	r30, 0xC1	; 193
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	80 62       	ori	r24, 0x20	; 32
    242e:	80 83       	st	Z, r24
    2430:	08 95       	ret

Disassembly of section .text.uart_send_string:

0000258e <uart_send_string>:
  }
}

void uart_send_string(const char *str){
    258e:	cf 92       	push	r12
    2590:	df 92       	push	r13
    2592:	ef 92       	push	r14
    2594:	6b 01       	movw	r12, r22
    2596:	e8 2e       	mov	r14, r24
  while (*str) {
    2598:	06 c0       	rjmp	.+12     	; 0x25a6 <uart_send_string+0x18>
    uart_send_char(*str++);
    259a:	9f ef       	ldi	r25, 0xFF	; 255
    259c:	c9 1a       	sub	r12, r25
    259e:	d9 0a       	sbc	r13, r25
    25a0:	e9 0a       	sbc	r14, r25
    25a2:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <uart_send_char>
    UCSR0B |= (1 << UDRIE0); //habilitar interrupcion de transmisión
  }
}

void uart_send_string(const char *str){
  while (*str) {
    25a6:	f6 01       	movw	r30, r12
    25a8:	84 91       	lpm	r24, Z
    25aa:	e7 fc       	sbrc	r14, 7
    25ac:	80 81       	ld	r24, Z
    25ae:	81 11       	cpse	r24, r1
    25b0:	f4 cf       	rjmp	.-24     	; 0x259a <uart_send_string+0xc>
    uart_send_char(*str++);
  }
}
    25b2:	ef 90       	pop	r14
    25b4:	df 90       	pop	r13
    25b6:	cf 90       	pop	r12
    25b8:	08 95       	ret

Disassembly of section .text.__vector_18:

00001d34 <__vector_18>:
  UBRR0L = (unsigned char)baud_rate;                // Configura el baud rate
   UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); // Habilita RX, TX y RXC interrupt
}

ISR(USART_RX_vect)
{
    1d34:	1f 92       	push	r1
    1d36:	0f 92       	push	r0
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	0f 92       	push	r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	2f 93       	push	r18
    1d40:	3f 93       	push	r19
    1d42:	4f 93       	push	r20
    1d44:	5f 93       	push	r21
    1d46:	6f 93       	push	r22
    1d48:	7f 93       	push	r23
    1d4a:	8f 93       	push	r24
    1d4c:	9f 93       	push	r25
    1d4e:	af 93       	push	r26
    1d50:	bf 93       	push	r27
    1d52:	ef 93       	push	r30
    1d54:	ff 93       	push	r31
  uint8_t received = UDR0;
    1d56:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  if ((received == '\b' || received == 0x7F) && cmd_index > 0){
    1d5a:	88 30       	cpi	r24, 0x08	; 8
    1d5c:	11 f0       	breq	.+4      	; 0x1d62 <__vector_18+0x2e>
    1d5e:	8f 37       	cpi	r24, 0x7F	; 127
    1d60:	49 f4       	brne	.+18     	; 0x1d74 <__vector_18+0x40>
    1d62:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <cmd_index>
    1d66:	99 23       	and	r25, r25
    1d68:	29 f0       	breq	.+10     	; 0x1d74 <__vector_18+0x40>
    cmd_index--;
    1d6a:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <cmd_index>
    1d6e:	91 50       	subi	r25, 0x01	; 1
    1d70:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <cmd_index>
  }
  if (received == '\r' || received == '\n'){
    1d74:	8d 30       	cpi	r24, 0x0D	; 13
    1d76:	11 f0       	breq	.+4      	; 0x1d7c <__vector_18+0x48>
    1d78:	8a 30       	cpi	r24, 0x0A	; 10
    1d7a:	89 f4       	brne	.+34     	; 0x1d9e <__vector_18+0x6a>
    rx_buffer[cmd_index] = '\0';
    1d7c:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <cmd_index>
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	e9 5f       	subi	r30, 0xF9	; 249
    1d84:	fe 4f       	sbci	r31, 0xFE	; 254
    1d86:	10 82       	st	Z, r1
    cmd_index = 0;
    1d88:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <cmd_index>
    rx_flag = 1;                  //flag de comando listo para el main loop
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <rx_flag>
    uart_send_string("\r\n");
    1d92:	66 e2       	ldi	r22, 0x26	; 38
    1d94:	73 e0       	ldi	r23, 0x03	; 3
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	0e 94 c7 12 	call	0x258e	; 0x258e <uart_send_string>
    1d9c:	11 c0       	rjmp	.+34     	; 0x1dc0 <__vector_18+0x8c>
  }
  else if (cmd_index < CMD_BUFFER_SIZE - 1)
    1d9e:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <cmd_index>
    1da2:	9f 37       	cpi	r25, 0x7F	; 127
    1da4:	68 f4       	brcc	.+26     	; 0x1dc0 <__vector_18+0x8c>
  {
    rx_buffer[cmd_index++] = received;
    1da6:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <cmd_index>
    1daa:	91 e0       	ldi	r25, 0x01	; 1
    1dac:	9e 0f       	add	r25, r30
    1dae:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <cmd_index>
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	e9 5f       	subi	r30, 0xF9	; 249
    1db6:	fe 4f       	sbci	r31, 0xFE	; 254
    1db8:	80 83       	st	Z, r24
    uart_send_char(received); // Eco del carácter recibido
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <uart_send_char>
  }
}
    1dc0:	ff 91       	pop	r31
    1dc2:	ef 91       	pop	r30
    1dc4:	bf 91       	pop	r27
    1dc6:	af 91       	pop	r26
    1dc8:	9f 91       	pop	r25
    1dca:	8f 91       	pop	r24
    1dcc:	7f 91       	pop	r23
    1dce:	6f 91       	pop	r22
    1dd0:	5f 91       	pop	r21
    1dd2:	4f 91       	pop	r20
    1dd4:	3f 91       	pop	r19
    1dd6:	2f 91       	pop	r18
    1dd8:	0f 90       	pop	r0
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	0f 90       	pop	r0
    1dde:	1f 90       	pop	r1
    1de0:	18 95       	reti

Disassembly of section .text.__vector_19:

000021e8 <__vector_19>:
    uart_send_char(*str++);
  }
}

ISR(USART_UDRE_vect)
{
    21e8:	1f 92       	push	r1
    21ea:	0f 92       	push	r0
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	0f 92       	push	r0
    21f0:	11 24       	eor	r1, r1
    21f2:	8f 93       	push	r24
    21f4:	9f 93       	push	r25
    21f6:	ef 93       	push	r30
    21f8:	ff 93       	push	r31
  // Si el buffer está vacío, desactivar interrupción
  if (tx_tail == tx_head)
    21fa:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <tx_tail>
    21fe:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <tx_head>
    2202:	98 13       	cpse	r25, r24
    2204:	08 c0       	rjmp	.+16     	; 0x2216 <__vector_19+0x2e>
  {
    tx_busy = 0;
    2206:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <tx_busy>
    UCSR0B &= ~(1 << UDRIE0); // Deshabilita interrupción de transmisión
    220a:	e1 ec       	ldi	r30, 0xC1	; 193
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	8f 7d       	andi	r24, 0xDF	; 223
    2212:	80 83       	st	Z, r24
    return;
    2214:	16 c0       	rjmp	.+44     	; 0x2242 <__vector_19+0x5a>
  }

  // Enviar siguiente carácter del buffer
  UDR0 = tx_buffer[tx_tail];
    2216:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <tx_tail>
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	ed 5e       	subi	r30, 0xED	; 237
    221e:	fd 4f       	sbci	r31, 0xFD	; 253
    2220:	80 81       	ld	r24, Z
    2222:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  tx_tail = (tx_tail + 1) % CMD_BUFFER_SIZE;
    2226:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <tx_tail>
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	01 96       	adiw	r24, 0x01	; 1
    222e:	8f 77       	andi	r24, 0x7F	; 127
    2230:	90 78       	andi	r25, 0x80	; 128
    2232:	99 23       	and	r25, r25
    2234:	24 f4       	brge	.+8      	; 0x223e <__vector_19+0x56>
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	80 68       	ori	r24, 0x80	; 128
    223a:	9f 6f       	ori	r25, 0xFF	; 255
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <tx_tail>
    2242:	ff 91       	pop	r31
    2244:	ef 91       	pop	r30
    2246:	9f 91       	pop	r25
    2248:	8f 91       	pop	r24
    224a:	0f 90       	pop	r0
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	0f 90       	pop	r0
    2250:	1f 90       	pop	r1
    2252:	18 95       	reti

Disassembly of section .text.get_initial_date:

00002722 <get_initial_date>:
#include "utils.h"

// Función para hardcodear una fecha inicial
void get_initial_date(date_t *date) {
    2722:	fc 01       	movw	r30, r24
    date->year = 25;
    2724:	89 e1       	ldi	r24, 0x19	; 25
    2726:	80 83       	st	Z, r24
    date->month = 6;
    2728:	86 e0       	ldi	r24, 0x06	; 6
    272a:	81 83       	std	Z+1, r24	; 0x01
    date->day = 14;
    272c:	8e e0       	ldi	r24, 0x0E	; 14
    272e:	82 83       	std	Z+2, r24	; 0x02
    date->hours = 16;
    2730:	80 e1       	ldi	r24, 0x10	; 16
    2732:	83 83       	std	Z+3, r24	; 0x03
    date->minutes = 0; // Minuto 0
    2734:	14 82       	std	Z+4, r1	; 0x04
    date->seconds = 0; // Segundo 0
    2736:	15 82       	std	Z+5, r1	; 0x05
    2738:	08 95       	ret

Disassembly of section .text.check_alarm:

000022bc <check_alarm>:
}

uint8_t check_alarm(date_t *current_date, date_t *alarm_date) {
    // Compara la fecha y hora actual con la alarma
    if (current_date->year == alarm_date->year &&
    22bc:	fc 01       	movw	r30, r24
    22be:	30 81       	ld	r19, Z
    22c0:	fb 01       	movw	r30, r22
    22c2:	20 81       	ld	r18, Z
    22c4:	32 13       	cpse	r19, r18
    22c6:	20 c0       	rjmp	.+64     	; 0x2308 <check_alarm+0x4c>
        current_date->month == alarm_date->month &&
    22c8:	fc 01       	movw	r30, r24
    22ca:	31 81       	ldd	r19, Z+1	; 0x01
    22cc:	fb 01       	movw	r30, r22
    22ce:	21 81       	ldd	r18, Z+1	; 0x01
    date->seconds = 0; // Segundo 0
}

uint8_t check_alarm(date_t *current_date, date_t *alarm_date) {
    // Compara la fecha y hora actual con la alarma
    if (current_date->year == alarm_date->year &&
    22d0:	32 13       	cpse	r19, r18
    22d2:	1c c0       	rjmp	.+56     	; 0x230c <check_alarm+0x50>
        current_date->month == alarm_date->month &&
        current_date->day == alarm_date->day &&
    22d4:	fc 01       	movw	r30, r24
    22d6:	32 81       	ldd	r19, Z+2	; 0x02
    22d8:	fb 01       	movw	r30, r22
    22da:	22 81       	ldd	r18, Z+2	; 0x02
}

uint8_t check_alarm(date_t *current_date, date_t *alarm_date) {
    // Compara la fecha y hora actual con la alarma
    if (current_date->year == alarm_date->year &&
        current_date->month == alarm_date->month &&
    22dc:	32 13       	cpse	r19, r18
    22de:	18 c0       	rjmp	.+48     	; 0x2310 <check_alarm+0x54>
        current_date->day == alarm_date->day &&
        current_date->hours == alarm_date->hours &&
    22e0:	fc 01       	movw	r30, r24
    22e2:	33 81       	ldd	r19, Z+3	; 0x03
    22e4:	fb 01       	movw	r30, r22
    22e6:	23 81       	ldd	r18, Z+3	; 0x03

uint8_t check_alarm(date_t *current_date, date_t *alarm_date) {
    // Compara la fecha y hora actual con la alarma
    if (current_date->year == alarm_date->year &&
        current_date->month == alarm_date->month &&
        current_date->day == alarm_date->day &&
    22e8:	32 13       	cpse	r19, r18
    22ea:	14 c0       	rjmp	.+40     	; 0x2314 <check_alarm+0x58>
        current_date->hours == alarm_date->hours &&
        current_date->minutes == alarm_date->minutes &&
    22ec:	fc 01       	movw	r30, r24
    22ee:	34 81       	ldd	r19, Z+4	; 0x04
    22f0:	fb 01       	movw	r30, r22
    22f2:	24 81       	ldd	r18, Z+4	; 0x04
uint8_t check_alarm(date_t *current_date, date_t *alarm_date) {
    // Compara la fecha y hora actual con la alarma
    if (current_date->year == alarm_date->year &&
        current_date->month == alarm_date->month &&
        current_date->day == alarm_date->day &&
        current_date->hours == alarm_date->hours &&
    22f4:	32 13       	cpse	r19, r18
    22f6:	10 c0       	rjmp	.+32     	; 0x2318 <check_alarm+0x5c>
        current_date->minutes == alarm_date->minutes &&
        current_date->seconds == alarm_date->seconds) {
    22f8:	fc 01       	movw	r30, r24
    22fa:	95 81       	ldd	r25, Z+5	; 0x05
    22fc:	fb 01       	movw	r30, r22
    22fe:	85 81       	ldd	r24, Z+5	; 0x05
    // Compara la fecha y hora actual con la alarma
    if (current_date->year == alarm_date->year &&
        current_date->month == alarm_date->month &&
        current_date->day == alarm_date->day &&
        current_date->hours == alarm_date->hours &&
        current_date->minutes == alarm_date->minutes &&
    2300:	98 17       	cp	r25, r24
    2302:	61 f0       	breq	.+24     	; 0x231c <check_alarm+0x60>
        current_date->seconds == alarm_date->seconds) {
        return 1; // Alarma activada
    }
    return 0; // Alarma no activada
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	08 95       	ret
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	08 95       	ret
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	08 95       	ret
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	08 95       	ret
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	08 95       	ret
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	08 95       	ret
        current_date->month == alarm_date->month &&
        current_date->day == alarm_date->day &&
        current_date->hours == alarm_date->hours &&
        current_date->minutes == alarm_date->minutes &&
        current_date->seconds == alarm_date->seconds) {
        return 1; // Alarma activada
    231c:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0; // Alarma no activada
}
    231e:	08 95       	ret

Disassembly of section .text.is_valid_date:

00000b4c <is_valid_date>:

uint8_t is_valid_date(const char *str, date_t *date) {
 b4c:	6f 92       	push	r6
 b4e:	7f 92       	push	r7
 b50:	8f 92       	push	r8
 b52:	cf 92       	push	r12
 b54:	df 92       	push	r13
 b56:	ef 92       	push	r14
 b58:	ff 92       	push	r15
 b5a:	0f 93       	push	r16
 b5c:	1f 93       	push	r17
 b5e:	cf 93       	push	r28
 b60:	df 93       	push	r29
 b62:	cd b7       	in	r28, 0x3d	; 61
 b64:	de b7       	in	r29, 0x3e	; 62
 b66:	68 97       	sbiw	r28, 0x18	; 24
 b68:	0f b6       	in	r0, 0x3f	; 63
 b6a:	f8 94       	cli
 b6c:	de bf       	out	0x3e, r29	; 62
 b6e:	0f be       	out	0x3f, r0	; 63
 b70:	cd bf       	out	0x3d, r28	; 61
 b72:	6b 01       	movw	r12, r22
 b74:	e8 2e       	mov	r14, r24
 b76:	8a 01       	movw	r16, r20
    if (strlen(str) != 17) return 0;
 b78:	0e 94 dd 12 	call	0x25ba	; 0x25ba <strlen>
 b7c:	41 97       	sbiw	r24, 0x11	; 17
 b7e:	09 f0       	breq	.+2      	; 0xb82 <is_valid_date+0x36>
 b80:	31 c1       	rjmp	.+610    	; 0xde4 <is_valid_date+0x298>

    // validar formato de separadores
    if (str[2] != '/' || str[5] != '/' || str[8] != ' ' ||
 b82:	ae 2d       	mov	r26, r14
 b84:	c6 01       	movw	r24, r12
 b86:	02 96       	adiw	r24, 0x02	; 2
 b88:	a1 1d       	adc	r26, r1
 b8a:	fc 01       	movw	r30, r24
 b8c:	84 91       	lpm	r24, Z
 b8e:	a7 fd       	sbrc	r26, 7
 b90:	80 81       	ld	r24, Z
 b92:	8f 32       	cpi	r24, 0x2F	; 47
 b94:	09 f0       	breq	.+2      	; 0xb98 <is_valid_date+0x4c>
 b96:	28 c1       	rjmp	.+592    	; 0xde8 <is_valid_date+0x29c>
 b98:	ae 2d       	mov	r26, r14
 b9a:	c6 01       	movw	r24, r12
 b9c:	05 96       	adiw	r24, 0x05	; 5
 b9e:	a1 1d       	adc	r26, r1
 ba0:	fc 01       	movw	r30, r24
 ba2:	84 91       	lpm	r24, Z
 ba4:	a7 fd       	sbrc	r26, 7
 ba6:	80 81       	ld	r24, Z
 ba8:	8f 32       	cpi	r24, 0x2F	; 47
 baa:	09 f0       	breq	.+2      	; 0xbae <is_valid_date+0x62>
 bac:	1f c1       	rjmp	.+574    	; 0xdec <is_valid_date+0x2a0>
 bae:	ae 2d       	mov	r26, r14
 bb0:	c6 01       	movw	r24, r12
 bb2:	08 96       	adiw	r24, 0x08	; 8
 bb4:	a1 1d       	adc	r26, r1
 bb6:	fc 01       	movw	r30, r24
 bb8:	84 91       	lpm	r24, Z
 bba:	a7 fd       	sbrc	r26, 7
 bbc:	80 81       	ld	r24, Z
 bbe:	80 32       	cpi	r24, 0x20	; 32
 bc0:	09 f0       	breq	.+2      	; 0xbc4 <is_valid_date+0x78>
 bc2:	16 c1       	rjmp	.+556    	; 0xdf0 <is_valid_date+0x2a4>
        str[11] != ':' || str[14] != ':') {
 bc4:	ae 2d       	mov	r26, r14
 bc6:	c6 01       	movw	r24, r12
 bc8:	0b 96       	adiw	r24, 0x0b	; 11
 bca:	a1 1d       	adc	r26, r1
 bcc:	fc 01       	movw	r30, r24
 bce:	84 91       	lpm	r24, Z
 bd0:	a7 fd       	sbrc	r26, 7
 bd2:	80 81       	ld	r24, Z

uint8_t is_valid_date(const char *str, date_t *date) {
    if (strlen(str) != 17) return 0;

    // validar formato de separadores
    if (str[2] != '/' || str[5] != '/' || str[8] != ' ' ||
 bd4:	8a 33       	cpi	r24, 0x3A	; 58
 bd6:	09 f0       	breq	.+2      	; 0xbda <is_valid_date+0x8e>
 bd8:	0d c1       	rjmp	.+538    	; 0xdf4 <is_valid_date+0x2a8>
        str[11] != ':' || str[14] != ':') {
 bda:	ae 2d       	mov	r26, r14
 bdc:	c6 01       	movw	r24, r12
 bde:	0e 96       	adiw	r24, 0x0e	; 14
 be0:	a1 1d       	adc	r26, r1
 be2:	fc 01       	movw	r30, r24
 be4:	84 91       	lpm	r24, Z
 be6:	a7 fd       	sbrc	r26, 7
 be8:	80 81       	ld	r24, Z
 bea:	8a 33       	cpi	r24, 0x3A	; 58
 bec:	09 f0       	breq	.+2      	; 0xbf0 <is_valid_date+0xa4>
 bee:	04 c1       	rjmp	.+520    	; 0xdf8 <is_valid_date+0x2ac>
 bf0:	80 e0       	ldi	r24, 0x00	; 0
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	22 c0       	rjmp	.+68     	; 0xc3a <is_valid_date+0xee>
        return 0;
    }

    for (int i = 0; i < 17; i++) {
        if (i == 2 || i == 5 || i == 8 || i == 11 || i == 14)
 bf6:	82 30       	cpi	r24, 0x02	; 2
 bf8:	91 05       	cpc	r25, r1
 bfa:	f1 f0       	breq	.+60     	; 0xc38 <is_valid_date+0xec>
 bfc:	85 30       	cpi	r24, 0x05	; 5
 bfe:	91 05       	cpc	r25, r1
 c00:	d9 f0       	breq	.+54     	; 0xc38 <is_valid_date+0xec>
 c02:	88 30       	cpi	r24, 0x08	; 8
 c04:	91 05       	cpc	r25, r1
 c06:	c1 f0       	breq	.+48     	; 0xc38 <is_valid_date+0xec>
 c08:	8b 30       	cpi	r24, 0x0B	; 11
 c0a:	91 05       	cpc	r25, r1
 c0c:	a9 f0       	breq	.+42     	; 0xc38 <is_valid_date+0xec>
 c0e:	8e 30       	cpi	r24, 0x0E	; 14
 c10:	91 05       	cpc	r25, r1
 c12:	91 f0       	breq	.+36     	; 0xc38 <is_valid_date+0xec>
            continue;
        if (!isdigit((unsigned char)str[i]))
 c14:	4e 2d       	mov	r20, r14
 c16:	96 01       	movw	r18, r12
 c18:	28 0f       	add	r18, r24
 c1a:	39 1f       	adc	r19, r25
 c1c:	41 1d       	adc	r20, r1
 c1e:	97 fd       	sbrc	r25, 7
 c20:	4a 95       	dec	r20
 c22:	f9 01       	movw	r30, r18
 c24:	24 91       	lpm	r18, Z
 c26:	47 fd       	sbrc	r20, 7
 c28:	20 81       	ld	r18, Z
 c2a:	30 e0       	ldi	r19, 0x00	; 0
 c2c:	20 53       	subi	r18, 0x30	; 48
 c2e:	31 09       	sbc	r19, r1
 c30:	2a 30       	cpi	r18, 0x0A	; 10
 c32:	31 05       	cpc	r19, r1
 c34:	08 f0       	brcs	.+2      	; 0xc38 <is_valid_date+0xec>
 c36:	e2 c0       	rjmp	.+452    	; 0xdfc <is_valid_date+0x2b0>
    if (str[2] != '/' || str[5] != '/' || str[8] != ' ' ||
        str[11] != ':' || str[14] != ':') {
        return 0;
    }

    for (int i = 0; i < 17; i++) {
 c38:	01 96       	adiw	r24, 0x01	; 1
 c3a:	81 31       	cpi	r24, 0x11	; 17
 c3c:	91 05       	cpc	r25, r1
 c3e:	dc f2       	brlt	.-74     	; 0xbf6 <is_valid_date+0xaa>
            continue;
        if (!isdigit((unsigned char)str[i]))
            return 0;
    }

    uint8_t day   = (str[0] - '0') * 10 + (str[1] - '0');
 c40:	f6 01       	movw	r30, r12
 c42:	84 91       	lpm	r24, Z
 c44:	e7 fc       	sbrc	r14, 7
 c46:	80 81       	ld	r24, Z
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	c0 97       	sbiw	r24, 0x30	; 48
 c4c:	88 0f       	add	r24, r24
 c4e:	68 2f       	mov	r22, r24
 c50:	66 0f       	add	r22, r22
 c52:	66 0f       	add	r22, r22
 c54:	86 0f       	add	r24, r22
 c56:	4e 2d       	mov	r20, r14
 c58:	96 01       	movw	r18, r12
 c5a:	2f 5f       	subi	r18, 0xFF	; 255
 c5c:	3f 4f       	sbci	r19, 0xFF	; 255
 c5e:	4f 4f       	sbci	r20, 0xFF	; 255
 c60:	f9 01       	movw	r30, r18
 c62:	64 91       	lpm	r22, Z
 c64:	47 fd       	sbrc	r20, 7
 c66:	60 81       	ld	r22, Z
 c68:	68 0f       	add	r22, r24
 c6a:	50 ed       	ldi	r21, 0xD0	; 208
 c6c:	56 0f       	add	r21, r22
    uint8_t month = (str[3] - '0') * 10 + (str[4] - '0');
 c6e:	ae 2d       	mov	r26, r14
 c70:	c6 01       	movw	r24, r12
 c72:	03 96       	adiw	r24, 0x03	; 3
 c74:	a1 1d       	adc	r26, r1
 c76:	fc 01       	movw	r30, r24
 c78:	84 91       	lpm	r24, Z
 c7a:	a7 fd       	sbrc	r26, 7
 c7c:	80 81       	ld	r24, Z
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	c0 97       	sbiw	r24, 0x30	; 48
 c82:	88 0f       	add	r24, r24
 c84:	28 2f       	mov	r18, r24
 c86:	22 0f       	add	r18, r18
 c88:	22 0f       	add	r18, r18
 c8a:	82 0f       	add	r24, r18
 c8c:	4e 2d       	mov	r20, r14
 c8e:	96 01       	movw	r18, r12
 c90:	2c 5f       	subi	r18, 0xFC	; 252
 c92:	3f 4f       	sbci	r19, 0xFF	; 255
 c94:	4f 4f       	sbci	r20, 0xFF	; 255
 c96:	f9 01       	movw	r30, r18
 c98:	94 91       	lpm	r25, Z
 c9a:	47 fd       	sbrc	r20, 7
 c9c:	90 81       	ld	r25, Z
 c9e:	28 2f       	mov	r18, r24
 ca0:	29 0f       	add	r18, r25
 ca2:	20 53       	subi	r18, 0x30	; 48
    uint8_t year  = (str[6] - '0') * 10 + (str[7] - '0');
 ca4:	ae 2d       	mov	r26, r14
 ca6:	c6 01       	movw	r24, r12
 ca8:	06 96       	adiw	r24, 0x06	; 6
 caa:	a1 1d       	adc	r26, r1
 cac:	fc 01       	movw	r30, r24
 cae:	84 91       	lpm	r24, Z
 cb0:	a7 fd       	sbrc	r26, 7
 cb2:	80 81       	ld	r24, Z
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	c0 97       	sbiw	r24, 0x30	; 48
 cb8:	88 0f       	add	r24, r24
 cba:	48 2f       	mov	r20, r24
 cbc:	44 0f       	add	r20, r20
 cbe:	44 0f       	add	r20, r20
 cc0:	84 0f       	add	r24, r20
 cc2:	36 01       	movw	r6, r12
 cc4:	8e 2c       	mov	r8, r14
 cc6:	97 e0       	ldi	r25, 0x07	; 7
 cc8:	69 0e       	add	r6, r25
 cca:	71 1c       	adc	r7, r1
 ccc:	81 1c       	adc	r8, r1
 cce:	f3 01       	movw	r30, r6
 cd0:	94 91       	lpm	r25, Z
 cd2:	87 fc       	sbrc	r8, 7
 cd4:	90 81       	ld	r25, Z
 cd6:	48 2f       	mov	r20, r24
 cd8:	49 0f       	add	r20, r25
 cda:	40 53       	subi	r20, 0x30	; 48
    uint8_t hour  = (str[9]  - '0') * 10 + (str[10] - '0');
 cdc:	ae 2d       	mov	r26, r14
 cde:	c6 01       	movw	r24, r12
 ce0:	09 96       	adiw	r24, 0x09	; 9
 ce2:	a1 1d       	adc	r26, r1
 ce4:	fc 01       	movw	r30, r24
 ce6:	84 91       	lpm	r24, Z
 ce8:	a7 fd       	sbrc	r26, 7
 cea:	80 81       	ld	r24, Z
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	c0 97       	sbiw	r24, 0x30	; 48
 cf0:	88 0f       	add	r24, r24
 cf2:	38 2f       	mov	r19, r24
 cf4:	33 0f       	add	r19, r19
 cf6:	33 0f       	add	r19, r19
 cf8:	83 0f       	add	r24, r19
 cfa:	36 01       	movw	r6, r12
 cfc:	8e 2c       	mov	r8, r14
 cfe:	ea e0       	ldi	r30, 0x0A	; 10
 d00:	6e 0e       	add	r6, r30
 d02:	71 1c       	adc	r7, r1
 d04:	81 1c       	adc	r8, r1
 d06:	f3 01       	movw	r30, r6
 d08:	94 91       	lpm	r25, Z
 d0a:	87 fc       	sbrc	r8, 7
 d0c:	90 81       	ld	r25, Z
 d0e:	38 2f       	mov	r19, r24
 d10:	39 0f       	add	r19, r25
 d12:	30 53       	subi	r19, 0x30	; 48
    uint8_t min   = (str[12] - '0') * 10 + (str[13] - '0');
 d14:	ae 2d       	mov	r26, r14
 d16:	c6 01       	movw	r24, r12
 d18:	0c 96       	adiw	r24, 0x0c	; 12
 d1a:	a1 1d       	adc	r26, r1
 d1c:	fc 01       	movw	r30, r24
 d1e:	84 91       	lpm	r24, Z
 d20:	a7 fd       	sbrc	r26, 7
 d22:	80 81       	ld	r24, Z
 d24:	90 e0       	ldi	r25, 0x00	; 0
 d26:	c0 97       	sbiw	r24, 0x30	; 48
 d28:	88 0f       	add	r24, r24
 d2a:	78 2f       	mov	r23, r24
 d2c:	77 0f       	add	r23, r23
 d2e:	77 0f       	add	r23, r23
 d30:	87 0f       	add	r24, r23
 d32:	36 01       	movw	r6, r12
 d34:	8e 2c       	mov	r8, r14
 d36:	fd e0       	ldi	r31, 0x0D	; 13
 d38:	6f 0e       	add	r6, r31
 d3a:	71 1c       	adc	r7, r1
 d3c:	81 1c       	adc	r8, r1
 d3e:	f3 01       	movw	r30, r6
 d40:	94 91       	lpm	r25, Z
 d42:	87 fc       	sbrc	r8, 7
 d44:	90 81       	ld	r25, Z
 d46:	78 2f       	mov	r23, r24
 d48:	79 0f       	add	r23, r25
 d4a:	70 53       	subi	r23, 0x30	; 48
    uint8_t sec   = (str[15] - '0') * 10 + (str[16] - '0');
 d4c:	ae 2d       	mov	r26, r14
 d4e:	c6 01       	movw	r24, r12
 d50:	0f 96       	adiw	r24, 0x0f	; 15
 d52:	a1 1d       	adc	r26, r1
 d54:	fc 01       	movw	r30, r24
 d56:	84 91       	lpm	r24, Z
 d58:	a7 fd       	sbrc	r26, 7
 d5a:	80 81       	ld	r24, Z
 d5c:	90 e0       	ldi	r25, 0x00	; 0
 d5e:	c0 97       	sbiw	r24, 0x30	; 48
 d60:	88 0f       	add	r24, r24
 d62:	98 2f       	mov	r25, r24
 d64:	99 0f       	add	r25, r25
 d66:	99 0f       	add	r25, r25
 d68:	89 0f       	add	r24, r25
 d6a:	90 e1       	ldi	r25, 0x10	; 16
 d6c:	c9 0e       	add	r12, r25
 d6e:	d1 1c       	adc	r13, r1
 d70:	e1 1c       	adc	r14, r1
 d72:	f6 01       	movw	r30, r12
 d74:	94 91       	lpm	r25, Z
 d76:	e7 fc       	sbrc	r14, 7
 d78:	90 81       	ld	r25, Z
 d7a:	89 0f       	add	r24, r25
 d7c:	80 53       	subi	r24, 0x30	; 48

    // validar rangos
    if (day < 1 || day > 31 || month < 1 || month > 12 ||
 d7e:	61 53       	subi	r22, 0x31	; 49
 d80:	6f 31       	cpi	r22, 0x1F	; 31
 d82:	f0 f5       	brcc	.+124    	; 0xe00 <is_valid_date+0x2b4>
 d84:	22 23       	and	r18, r18
 d86:	f1 f1       	breq	.+124    	; 0xe04 <is_valid_date+0x2b8>
 d88:	2d 30       	cpi	r18, 0x0D	; 13
 d8a:	f0 f5       	brcc	.+124    	; 0xe08 <is_valid_date+0x2bc>
 d8c:	38 31       	cpi	r19, 0x18	; 24
 d8e:	f0 f5       	brcc	.+124    	; 0xe0c <is_valid_date+0x2c0>
        hour > 23 || min > 59 || sec > 59) {
 d90:	7c 33       	cpi	r23, 0x3C	; 60
 d92:	f0 f5       	brcc	.+124    	; 0xe10 <is_valid_date+0x2c4>
 d94:	8c 33       	cpi	r24, 0x3C	; 60
 d96:	f0 f5       	brcc	.+124    	; 0xe14 <is_valid_date+0x2c8>
        return 0;
    }

    // Validar días del mes
    const int days_in_month[] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
 d98:	98 e1       	ldi	r25, 0x18	; 24
 d9a:	e5 e9       	ldi	r30, 0x95	; 149
 d9c:	f2 e0       	ldi	r31, 0x02	; 2
 d9e:	de 01       	movw	r26, r28
 da0:	11 96       	adiw	r26, 0x01	; 1
 da2:	01 90       	ld	r0, Z+
 da4:	0d 92       	st	X+, r0
 da6:	9a 95       	dec	r25
 da8:	e1 f7       	brne	.-8      	; 0xda2 <is_valid_date+0x256>
    if (day > days_in_month[month - 1]) {
 daa:	a5 2f       	mov	r26, r21
 dac:	b0 e0       	ldi	r27, 0x00	; 0
 dae:	e2 2f       	mov	r30, r18
 db0:	f0 e0       	ldi	r31, 0x00	; 0
 db2:	31 97       	sbiw	r30, 0x01	; 1
 db4:	ee 0f       	add	r30, r30
 db6:	ff 1f       	adc	r31, r31
 db8:	ee 24       	eor	r14, r14
 dba:	e3 94       	inc	r14
 dbc:	f1 2c       	mov	r15, r1
 dbe:	ec 0e       	add	r14, r28
 dc0:	fd 1e       	adc	r15, r29
 dc2:	ee 0d       	add	r30, r14
 dc4:	ff 1d       	adc	r31, r15
 dc6:	01 90       	ld	r0, Z+
 dc8:	f0 81       	ld	r31, Z
 dca:	e0 2d       	mov	r30, r0
 dcc:	ea 17       	cp	r30, r26
 dce:	fb 07       	cpc	r31, r27
 dd0:	1c f1       	brlt	.+70     	; 0xe18 <is_valid_date+0x2cc>
        return 0;
    }

    date->day = (uint8_t)day;
 dd2:	f8 01       	movw	r30, r16
 dd4:	52 83       	std	Z+2, r21	; 0x02
    date->month = (uint8_t)month;
 dd6:	21 83       	std	Z+1, r18	; 0x01
    date->year = (uint8_t)year;
 dd8:	40 83       	st	Z, r20
    date->hours = (uint8_t)hour;
 dda:	33 83       	std	Z+3, r19	; 0x03
    date->minutes = (uint8_t)min;
 ddc:	74 83       	std	Z+4, r23	; 0x04
    date->seconds = (uint8_t)sec;
 dde:	85 83       	std	Z+5, r24	; 0x05

    return 1;
 de0:	81 e0       	ldi	r24, 0x01	; 1
 de2:	1b c0       	rjmp	.+54     	; 0xe1a <is_valid_date+0x2ce>
    }
    return 0; // Alarma no activada
}

uint8_t is_valid_date(const char *str, date_t *date) {
    if (strlen(str) != 17) return 0;
 de4:	80 e0       	ldi	r24, 0x00	; 0
 de6:	19 c0       	rjmp	.+50     	; 0xe1a <is_valid_date+0x2ce>

    // validar formato de separadores
    if (str[2] != '/' || str[5] != '/' || str[8] != ' ' ||
        str[11] != ':' || str[14] != ':') {
        return 0;
 de8:	80 e0       	ldi	r24, 0x00	; 0
 dea:	17 c0       	rjmp	.+46     	; 0xe1a <is_valid_date+0x2ce>
 dec:	80 e0       	ldi	r24, 0x00	; 0
 dee:	15 c0       	rjmp	.+42     	; 0xe1a <is_valid_date+0x2ce>
 df0:	80 e0       	ldi	r24, 0x00	; 0
 df2:	13 c0       	rjmp	.+38     	; 0xe1a <is_valid_date+0x2ce>
 df4:	80 e0       	ldi	r24, 0x00	; 0
 df6:	11 c0       	rjmp	.+34     	; 0xe1a <is_valid_date+0x2ce>
 df8:	80 e0       	ldi	r24, 0x00	; 0
 dfa:	0f c0       	rjmp	.+30     	; 0xe1a <is_valid_date+0x2ce>

    for (int i = 0; i < 17; i++) {
        if (i == 2 || i == 5 || i == 8 || i == 11 || i == 14)
            continue;
        if (!isdigit((unsigned char)str[i]))
            return 0;
 dfc:	80 e0       	ldi	r24, 0x00	; 0
 dfe:	0d c0       	rjmp	.+26     	; 0xe1a <is_valid_date+0x2ce>
    uint8_t sec   = (str[15] - '0') * 10 + (str[16] - '0');

    // validar rangos
    if (day < 1 || day > 31 || month < 1 || month > 12 ||
        hour > 23 || min > 59 || sec > 59) {
        return 0;
 e00:	80 e0       	ldi	r24, 0x00	; 0
 e02:	0b c0       	rjmp	.+22     	; 0xe1a <is_valid_date+0x2ce>
 e04:	80 e0       	ldi	r24, 0x00	; 0
 e06:	09 c0       	rjmp	.+18     	; 0xe1a <is_valid_date+0x2ce>
 e08:	80 e0       	ldi	r24, 0x00	; 0
 e0a:	07 c0       	rjmp	.+14     	; 0xe1a <is_valid_date+0x2ce>
 e0c:	80 e0       	ldi	r24, 0x00	; 0
 e0e:	05 c0       	rjmp	.+10     	; 0xe1a <is_valid_date+0x2ce>
 e10:	80 e0       	ldi	r24, 0x00	; 0
 e12:	03 c0       	rjmp	.+6      	; 0xe1a <is_valid_date+0x2ce>
 e14:	80 e0       	ldi	r24, 0x00	; 0
 e16:	01 c0       	rjmp	.+2      	; 0xe1a <is_valid_date+0x2ce>
    }

    // Validar días del mes
    const int days_in_month[] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
    if (day > days_in_month[month - 1]) {
        return 0;
 e18:	80 e0       	ldi	r24, 0x00	; 0
    date->hours = (uint8_t)hour;
    date->minutes = (uint8_t)min;
    date->seconds = (uint8_t)sec;

    return 1;
}
 e1a:	68 96       	adiw	r28, 0x18	; 24
 e1c:	0f b6       	in	r0, 0x3f	; 63
 e1e:	f8 94       	cli
 e20:	de bf       	out	0x3e, r29	; 62
 e22:	0f be       	out	0x3f, r0	; 63
 e24:	cd bf       	out	0x3d, r28	; 61
 e26:	df 91       	pop	r29
 e28:	cf 91       	pop	r28
 e2a:	1f 91       	pop	r17
 e2c:	0f 91       	pop	r16
 e2e:	ff 90       	pop	r15
 e30:	ef 90       	pop	r14
 e32:	df 90       	pop	r13
 e34:	cf 90       	pop	r12
 e36:	8f 90       	pop	r8
 e38:	7f 90       	pop	r7
 e3a:	6f 90       	pop	r6
 e3c:	08 95       	ret

Disassembly of section .text.is_valid_time:

00001326 <is_valid_time>:

uint8_t is_valid_time(const char *str, date_t *result, const date_t *current_date) {
    1326:	6f 92       	push	r6
    1328:	7f 92       	push	r7
    132a:	8f 92       	push	r8
    132c:	cf 92       	push	r12
    132e:	df 92       	push	r13
    1330:	ef 92       	push	r14
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	6b 01       	movw	r12, r22
    133c:	e8 2e       	mov	r14, r24
    133e:	ea 01       	movw	r28, r20
    1340:	38 01       	movw	r6, r16
    1342:	82 2e       	mov	r8, r18
    if (strlen(str) != 8) return 0;
    1344:	0e 94 dd 12 	call	0x25ba	; 0x25ba <strlen>
    1348:	08 97       	sbiw	r24, 0x08	; 8
    134a:	09 f0       	breq	.+2      	; 0x134e <is_valid_time+0x28>
    134c:	a4 c0       	rjmp	.+328    	; 0x1496 <is_valid_time+0x170>

    // validar formato HH:MM:SS
    if (str[2] != ':' || str[5] != ':')
    134e:	ae 2d       	mov	r26, r14
    1350:	c6 01       	movw	r24, r12
    1352:	02 96       	adiw	r24, 0x02	; 2
    1354:	a1 1d       	adc	r26, r1
    1356:	fc 01       	movw	r30, r24
    1358:	84 91       	lpm	r24, Z
    135a:	a7 fd       	sbrc	r26, 7
    135c:	80 81       	ld	r24, Z
    135e:	8a 33       	cpi	r24, 0x3A	; 58
    1360:	09 f0       	breq	.+2      	; 0x1364 <is_valid_time+0x3e>
    1362:	9b c0       	rjmp	.+310    	; 0x149a <is_valid_time+0x174>
    1364:	ae 2d       	mov	r26, r14
    1366:	c6 01       	movw	r24, r12
    1368:	05 96       	adiw	r24, 0x05	; 5
    136a:	a1 1d       	adc	r26, r1
    136c:	fc 01       	movw	r30, r24
    136e:	84 91       	lpm	r24, Z
    1370:	a7 fd       	sbrc	r26, 7
    1372:	80 81       	ld	r24, Z
    1374:	8a 33       	cpi	r24, 0x3A	; 58
    1376:	09 f0       	breq	.+2      	; 0x137a <is_valid_time+0x54>
    1378:	92 c0       	rjmp	.+292    	; 0x149e <is_valid_time+0x178>
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	19 c0       	rjmp	.+50     	; 0x13b2 <is_valid_time+0x8c>
        return 0;

    for (int i = 0; i < 8; i++) {
        if (i == 2 || i == 5) continue;
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	91 05       	cpc	r25, r1
    1384:	a9 f0       	breq	.+42     	; 0x13b0 <is_valid_time+0x8a>
    1386:	85 30       	cpi	r24, 0x05	; 5
    1388:	91 05       	cpc	r25, r1
    138a:	91 f0       	breq	.+36     	; 0x13b0 <is_valid_time+0x8a>
        if (!isdigit((unsigned char)str[i]))
    138c:	4e 2d       	mov	r20, r14
    138e:	96 01       	movw	r18, r12
    1390:	28 0f       	add	r18, r24
    1392:	39 1f       	adc	r19, r25
    1394:	41 1d       	adc	r20, r1
    1396:	97 fd       	sbrc	r25, 7
    1398:	4a 95       	dec	r20
    139a:	f9 01       	movw	r30, r18
    139c:	24 91       	lpm	r18, Z
    139e:	47 fd       	sbrc	r20, 7
    13a0:	20 81       	ld	r18, Z
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	20 53       	subi	r18, 0x30	; 48
    13a6:	31 09       	sbc	r19, r1
    13a8:	2a 30       	cpi	r18, 0x0A	; 10
    13aa:	31 05       	cpc	r19, r1
    13ac:	08 f0       	brcs	.+2      	; 0x13b0 <is_valid_time+0x8a>
    13ae:	79 c0       	rjmp	.+242    	; 0x14a2 <is_valid_time+0x17c>

    // validar formato HH:MM:SS
    if (str[2] != ':' || str[5] != ':')
        return 0;

    for (int i = 0; i < 8; i++) {
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	88 30       	cpi	r24, 0x08	; 8
    13b4:	91 05       	cpc	r25, r1
    13b6:	24 f3       	brlt	.-56     	; 0x1380 <is_valid_time+0x5a>
        if (i == 2 || i == 5) continue;
        if (!isdigit((unsigned char)str[i]))
            return 0;
    }

    uint8_t hour = (str[0] - '0') * 10 + (str[1] - '0');
    13b8:	f6 01       	movw	r30, r12
    13ba:	84 91       	lpm	r24, Z
    13bc:	e7 fc       	sbrc	r14, 7
    13be:	80 81       	ld	r24, Z
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	c0 97       	sbiw	r24, 0x30	; 48
    13c4:	88 0f       	add	r24, r24
    13c6:	28 2f       	mov	r18, r24
    13c8:	22 0f       	add	r18, r18
    13ca:	22 0f       	add	r18, r18
    13cc:	82 0f       	add	r24, r18
    13ce:	4e 2d       	mov	r20, r14
    13d0:	96 01       	movw	r18, r12
    13d2:	2f 5f       	subi	r18, 0xFF	; 255
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    13d6:	4f 4f       	sbci	r20, 0xFF	; 255
    13d8:	f9 01       	movw	r30, r18
    13da:	94 91       	lpm	r25, Z
    13dc:	47 fd       	sbrc	r20, 7
    13de:	90 81       	ld	r25, Z
    13e0:	28 2f       	mov	r18, r24
    13e2:	29 0f       	add	r18, r25
    13e4:	20 53       	subi	r18, 0x30	; 48
    uint8_t min  = (str[3] - '0') * 10 + (str[4] - '0');
    13e6:	ae 2d       	mov	r26, r14
    13e8:	c6 01       	movw	r24, r12
    13ea:	03 96       	adiw	r24, 0x03	; 3
    13ec:	a1 1d       	adc	r26, r1
    13ee:	fc 01       	movw	r30, r24
    13f0:	84 91       	lpm	r24, Z
    13f2:	a7 fd       	sbrc	r26, 7
    13f4:	80 81       	ld	r24, Z
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	c0 97       	sbiw	r24, 0x30	; 48
    13fa:	88 0f       	add	r24, r24
    13fc:	98 2f       	mov	r25, r24
    13fe:	99 0f       	add	r25, r25
    1400:	99 0f       	add	r25, r25
    1402:	89 0f       	add	r24, r25
    1404:	6e 2d       	mov	r22, r14
    1406:	a6 01       	movw	r20, r12
    1408:	4c 5f       	subi	r20, 0xFC	; 252
    140a:	5f 4f       	sbci	r21, 0xFF	; 255
    140c:	6f 4f       	sbci	r22, 0xFF	; 255
    140e:	fa 01       	movw	r30, r20
    1410:	94 91       	lpm	r25, Z
    1412:	67 fd       	sbrc	r22, 7
    1414:	90 81       	ld	r25, Z
    1416:	98 0f       	add	r25, r24
    1418:	30 ed       	ldi	r19, 0xD0	; 208
    141a:	39 0f       	add	r19, r25
    uint8_t sec  = (str[6] - '0') * 10 + (str[7] - '0');
    141c:	ae 2d       	mov	r26, r14
    141e:	c6 01       	movw	r24, r12
    1420:	06 96       	adiw	r24, 0x06	; 6
    1422:	a1 1d       	adc	r26, r1
    1424:	fc 01       	movw	r30, r24
    1426:	84 91       	lpm	r24, Z
    1428:	a7 fd       	sbrc	r26, 7
    142a:	80 81       	ld	r24, Z
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	c0 97       	sbiw	r24, 0x30	; 48
    1430:	88 0f       	add	r24, r24
    1432:	98 2f       	mov	r25, r24
    1434:	99 0f       	add	r25, r25
    1436:	99 0f       	add	r25, r25
    1438:	89 0f       	add	r24, r25
    143a:	97 e0       	ldi	r25, 0x07	; 7
    143c:	c9 0e       	add	r12, r25
    143e:	d1 1c       	adc	r13, r1
    1440:	e1 1c       	adc	r14, r1
    1442:	f6 01       	movw	r30, r12
    1444:	94 91       	lpm	r25, Z
    1446:	e7 fc       	sbrc	r14, 7
    1448:	90 81       	ld	r25, Z
    144a:	98 0f       	add	r25, r24
    144c:	90 53       	subi	r25, 0x30	; 48

    if (hour > 23 || min > 59 || sec > 59)
    144e:	28 31       	cpi	r18, 0x18	; 24
    1450:	50 f5       	brcc	.+84     	; 0x14a6 <is_valid_time+0x180>
    1452:	3c 33       	cpi	r19, 0x3C	; 60
    1454:	50 f5       	brcc	.+84     	; 0x14aa <is_valid_time+0x184>
    1456:	9c 33       	cpi	r25, 0x3C	; 60
    1458:	50 f5       	brcc	.+84     	; 0x14ae <is_valid_time+0x188>
        return 0;

    result->year = current_date->year;
    145a:	f3 01       	movw	r30, r6
    145c:	84 91       	lpm	r24, Z
    145e:	87 fc       	sbrc	r8, 7
    1460:	80 81       	ld	r24, Z
    1462:	88 83       	st	Y, r24
    result->month = current_date->month;
    1464:	e8 2c       	mov	r14, r8
    1466:	63 01       	movw	r12, r6
    1468:	8f ef       	ldi	r24, 0xFF	; 255
    146a:	c8 1a       	sub	r12, r24
    146c:	d8 0a       	sbc	r13, r24
    146e:	e8 0a       	sbc	r14, r24
    1470:	f6 01       	movw	r30, r12
    1472:	84 91       	lpm	r24, Z
    1474:	e7 fc       	sbrc	r14, 7
    1476:	80 81       	ld	r24, Z
    1478:	89 83       	std	Y+1, r24	; 0x01
    result->day = current_date->day;
    147a:	82 e0       	ldi	r24, 0x02	; 2
    147c:	68 0e       	add	r6, r24
    147e:	71 1c       	adc	r7, r1
    1480:	81 1c       	adc	r8, r1
    1482:	f3 01       	movw	r30, r6
    1484:	84 91       	lpm	r24, Z
    1486:	87 fc       	sbrc	r8, 7
    1488:	80 81       	ld	r24, Z
    148a:	8a 83       	std	Y+2, r24	; 0x02

    result->hours = (uint8_t)hour;
    148c:	2b 83       	std	Y+3, r18	; 0x03
    result->minutes = (uint8_t)min;
    148e:	3c 83       	std	Y+4, r19	; 0x04
    result->seconds = (uint8_t)sec;
    1490:	9d 83       	std	Y+5, r25	; 0x05

    return 1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	0d c0       	rjmp	.+26     	; 0x14b0 <is_valid_time+0x18a>

    return 1;
}

uint8_t is_valid_time(const char *str, date_t *result, const date_t *current_date) {
    if (strlen(str) != 8) return 0;
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	0b c0       	rjmp	.+22     	; 0x14b0 <is_valid_time+0x18a>

    // validar formato HH:MM:SS
    if (str[2] != ':' || str[5] != ':')
        return 0;
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	09 c0       	rjmp	.+18     	; 0x14b0 <is_valid_time+0x18a>
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	07 c0       	rjmp	.+14     	; 0x14b0 <is_valid_time+0x18a>

    for (int i = 0; i < 8; i++) {
        if (i == 2 || i == 5) continue;
        if (!isdigit((unsigned char)str[i]))
            return 0;
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	05 c0       	rjmp	.+10     	; 0x14b0 <is_valid_time+0x18a>
    uint8_t hour = (str[0] - '0') * 10 + (str[1] - '0');
    uint8_t min  = (str[3] - '0') * 10 + (str[4] - '0');
    uint8_t sec  = (str[6] - '0') * 10 + (str[7] - '0');

    if (hour > 23 || min > 59 || sec > 59)
        return 0;
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <is_valid_time+0x18a>
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <is_valid_time+0x18a>
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    result->hours = (uint8_t)hour;
    result->minutes = (uint8_t)min;
    result->seconds = (uint8_t)sec;

    return 1;
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	ef 90       	pop	r14
    14ba:	df 90       	pop	r13
    14bc:	cf 90       	pop	r12
    14be:	8f 90       	pop	r8
    14c0:	7f 90       	pop	r7
    14c2:	6f 90       	pop	r6
    14c4:	08 95       	ret

Disassembly of section .text.libgcc:

000026f0 <__movmemx_qi>:
    26f0:	99 27       	eor	r25, r25

000026f2 <__movmemx_hi>:
    26f2:	77 fd       	sbrc	r23, 7
    26f4:	05 c0       	rjmp	.+10     	; 0x2700 <__movmemx_hi+0xe>
    26f6:	05 90       	lpm	r0, Z+
    26f8:	0d 92       	st	X+, r0
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	e1 f7       	brne	.-8      	; 0x26f6 <__movmemx_hi+0x4>
    26fe:	08 95       	ret
    2700:	01 90       	ld	r0, Z+
    2702:	0d 92       	st	X+, r0
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	e1 f7       	brne	.-8      	; 0x2700 <__movmemx_hi+0xe>
    2708:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000281c <_fini>:
    281c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000281e <__funcs_on_exit>:
    281e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00002820 <__simulator_exit>:
    2820:	08 95       	ret

Disassembly of section .text.exit:

00002780 <exit>:
    2780:	ec 01       	movw	r28, r24
    2782:	0e 94 0f 14 	call	0x281e	; 0x281e <__funcs_on_exit>
    2786:	0e 94 0e 14 	call	0x281c	; 0x281c <_fini>
    278a:	ce 01       	movw	r24, r28
    278c:	0e 94 10 14 	call	0x2820	; 0x2820 <__simulator_exit>
    2790:	ce 01       	movw	r24, r28
    2792:	0e 94 0c 14 	call	0x2818	; 0x2818 <_Exit>

Disassembly of section .text.__wrap_sprintf:

00002634 <_sprintf_cdnopuxX>:
    2634:	a0 e0       	ldi	r26, 0x00	; 0
    2636:	b0 e0       	ldi	r27, 0x00	; 0
    2638:	e0 e2       	ldi	r30, 0x20	; 32
    263a:	f3 e1       	ldi	r31, 0x13	; 19
    263c:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__prologue_saves__+0x20>
    2640:	9e 01       	movw	r18, r28
    2642:	26 5f       	subi	r18, 0xF6	; 246
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	4f 81       	ldd	r20, Y+7	; 0x07
    2648:	58 85       	ldd	r21, Y+8	; 0x08
    264a:	69 85       	ldd	r22, Y+9	; 0x09
    264c:	8d 81       	ldd	r24, Y+5	; 0x05
    264e:	9e 81       	ldd	r25, Y+6	; 0x06
    2650:	0e 94 9d 13 	call	0x273a	; 0x273a <__vsprintf>
    2654:	e2 e0       	ldi	r30, 0x02	; 2
    2656:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__epilogue_restores__+0x20>

Disassembly of section .text.__fmt_s:

00001bba <__fmt_s>:
    1bba:	2f 92       	push	r2
    1bbc:	3f 92       	push	r3
    1bbe:	4f 92       	push	r4
    1bc0:	6f 92       	push	r6
    1bc2:	7f 92       	push	r7
    1bc4:	8f 92       	push	r8
    1bc6:	af 92       	push	r10
    1bc8:	bf 92       	push	r11
    1bca:	cf 92       	push	r12
    1bcc:	df 92       	push	r13
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	27 97       	sbiw	r28, 0x07	; 7
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	6c 01       	movw	r12, r24
    1bec:	7b 01       	movw	r14, r22
    1bee:	39 01       	movw	r6, r18
    1bf0:	84 2e       	mov	r8, r20
    1bf2:	98 01       	movw	r18, r16
    1bf4:	89 e1       	ldi	r24, 0x19	; 25
    1bf6:	28 2e       	mov	r2, r24
    1bf8:	83 e0       	ldi	r24, 0x03	; 3
    1bfa:	38 2e       	mov	r3, r24
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	48 2e       	mov	r4, r24
    1c00:	87 e0       	ldi	r24, 0x07	; 7
    1c02:	f1 01       	movw	r30, r2
    1c04:	ae 01       	movw	r20, r28
    1c06:	4f 5f       	subi	r20, 0xFF	; 255
    1c08:	5f 4f       	sbci	r21, 0xFF	; 255
    1c0a:	da 01       	movw	r26, r20
    1c0c:	74 2d       	mov	r23, r4
    1c0e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__movmemx_qi>
    1c12:	f7 01       	movw	r30, r14
    1c14:	02 81       	ldd	r16, Z+2	; 0x02
    1c16:	13 81       	ldd	r17, Z+3	; 0x03
    1c18:	a4 80       	ldd	r10, Z+4	; 0x04
    1c1a:	b5 80       	ldd	r11, Z+5	; 0x05
    1c1c:	e0 80       	ld	r14, Z
    1c1e:	f1 80       	ldd	r15, Z+1	; 0x01
    1c20:	61 14       	cp	r6, r1
    1c22:	71 04       	cpc	r7, r1
    1c24:	81 04       	cpc	r8, r1
    1c26:	19 f4       	brne	.+6      	; 0x1c2e <__fmt_s+0x74>
    1c28:	3a 01       	movw	r6, r20
    1c2a:	f0 e8       	ldi	r31, 0x80	; 128
    1c2c:	8f 2e       	mov	r8, r31
    1c2e:	21 15       	cp	r18, r1
    1c30:	31 05       	cpc	r19, r1
    1c32:	29 f4       	brne	.+10     	; 0x1c3e <__fmt_s+0x84>
    1c34:	88 2d       	mov	r24, r8
    1c36:	b3 01       	movw	r22, r6
    1c38:	0e 94 dd 12 	call	0x25ba	; 0x25ba <strlen>
    1c3c:	9c 01       	movw	r18, r24
    1c3e:	17 fd       	sbrc	r17, 7
    1c40:	04 c0       	rjmp	.+8      	; 0x1c4a <__fmt_s+0x90>
    1c42:	02 17       	cp	r16, r18
    1c44:	13 07       	cpc	r17, r19
    1c46:	08 f4       	brcc	.+2      	; 0x1c4a <__fmt_s+0x90>
    1c48:	98 01       	movw	r18, r16
    1c4a:	85 01       	movw	r16, r10
    1c4c:	68 2d       	mov	r22, r8
    1c4e:	a3 01       	movw	r20, r6
    1c50:	c6 01       	movw	r24, r12
    1c52:	0e 94 80 0c 	call	0x1900	; 0x1900 <__pad>
    1c56:	27 96       	adiw	r28, 0x07	; 7
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	1f 91       	pop	r17
    1c68:	0f 91       	pop	r16
    1c6a:	ff 90       	pop	r15
    1c6c:	ef 90       	pop	r14
    1c6e:	df 90       	pop	r13
    1c70:	cf 90       	pop	r12
    1c72:	bf 90       	pop	r11
    1c74:	af 90       	pop	r10
    1c76:	8f 90       	pop	r8
    1c78:	7f 90       	pop	r7
    1c7a:	6f 90       	pop	r6
    1c7c:	4f 90       	pop	r4
    1c7e:	3f 90       	pop	r3
    1c80:	2f 90       	pop	r2
    1c82:	08 95       	ret

Disassembly of section .text.__out:

00002254 <__out>:
    2254:	6f 92       	push	r6
    2256:	7f 92       	push	r7
    2258:	8f 92       	push	r8
    225a:	cf 92       	push	r12
    225c:	df 92       	push	r13
    225e:	ef 92       	push	r14
    2260:	0f 93       	push	r16
    2262:	1f 93       	push	r17
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	8c 01       	movw	r16, r24
    226a:	6a 01       	movw	r12, r20
    226c:	e6 2e       	mov	r14, r22
    226e:	e9 01       	movw	r28, r18
    2270:	3a 01       	movw	r6, r20
    2272:	86 2e       	mov	r8, r22
    2274:	62 0e       	add	r6, r18
    2276:	73 1e       	adc	r7, r19
    2278:	81 1c       	adc	r8, r1
    227a:	37 fd       	sbrc	r19, 7
    227c:	8a 94       	dec	r8
    227e:	c6 14       	cp	r12, r6
    2280:	d7 04       	cpc	r13, r7
    2282:	e8 04       	cpc	r14, r8
    2284:	79 f0       	breq	.+30     	; 0x22a4 <__out+0x50>
    2286:	f6 01       	movw	r30, r12
    2288:	84 91       	lpm	r24, Z
    228a:	e7 fc       	sbrc	r14, 7
    228c:	80 81       	ld	r24, Z
    228e:	b8 01       	movw	r22, r16
    2290:	08 2e       	mov	r0, r24
    2292:	00 0c       	add	r0, r0
    2294:	99 0b       	sbc	r25, r25
    2296:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <fputc>
    229a:	8f ef       	ldi	r24, 0xFF	; 255
    229c:	c8 1a       	sub	r12, r24
    229e:	d8 0a       	sbc	r13, r24
    22a0:	e8 0a       	sbc	r14, r24
    22a2:	ed cf       	rjmp	.-38     	; 0x227e <__out+0x2a>
    22a4:	ce 01       	movw	r24, r28
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	1f 91       	pop	r17
    22ac:	0f 91       	pop	r16
    22ae:	ef 90       	pop	r14
    22b0:	df 90       	pop	r13
    22b2:	cf 90       	pop	r12
    22b4:	8f 90       	pop	r8
    22b6:	7f 90       	pop	r7
    22b8:	6f 90       	pop	r6
    22ba:	08 95       	ret

Disassembly of section .text.__pad:

00001900 <__pad>:
    1900:	2f 92       	push	r2
    1902:	3f 92       	push	r3
    1904:	4f 92       	push	r4
    1906:	6f 92       	push	r6
    1908:	7f 92       	push	r7
    190a:	8f 92       	push	r8
    190c:	af 92       	push	r10
    190e:	bf 92       	push	r11
    1910:	cf 92       	push	r12
    1912:	df 92       	push	r13
    1914:	ef 92       	push	r14
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	66 97       	sbiw	r28, 0x16	; 22
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	5c 01       	movw	r10, r24
    1932:	3a 01       	movw	r6, r20
    1934:	86 2e       	mov	r8, r22
    1936:	69 01       	movw	r12, r18
    1938:	c7 01       	movw	r24, r14
    193a:	81 70       	andi	r24, 0x01	; 1
    193c:	99 27       	eor	r25, r25
    193e:	9c 8b       	std	Y+20, r25	; 0x14
    1940:	8b 8b       	std	Y+19, r24	; 0x13
    1942:	e0 fc       	sbrc	r14, 0
    1944:	1d c0       	rjmp	.+58     	; 0x1980 <__pad+0x80>
    1946:	20 17       	cp	r18, r16
    1948:	31 07       	cpc	r19, r17
    194a:	d4 f4       	brge	.+52     	; 0x1980 <__pad+0x80>
    194c:	78 01       	movw	r14, r16
    194e:	ec 18       	sub	r14, r12
    1950:	fd 08       	sbc	r15, r13
    1952:	fe 8a       	std	Y+22, r15	; 0x16
    1954:	ed 8a       	std	Y+21, r14	; 0x15
    1956:	a7 01       	movw	r20, r14
    1958:	91 e1       	ldi	r25, 0x11	; 17
    195a:	e9 16       	cp	r14, r25
    195c:	f1 04       	cpc	r15, r1
    195e:	10 f0       	brcs	.+4      	; 0x1964 <__pad+0x64>
    1960:	40 e1       	ldi	r20, 0x10	; 16
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	60 e2       	ldi	r22, 0x20	; 32
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	ce 01       	movw	r24, r28
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	9a 8b       	std	Y+18, r25	; 0x12
    196e:	89 8b       	std	Y+17, r24	; 0x11
    1970:	0e 94 de 13 	call	0x27bc	; 0x27bc <memset>
    1974:	89 89       	ldd	r24, Y+17	; 0x11
    1976:	9a 89       	ldd	r25, Y+18	; 0x12
    1978:	1c 01       	movw	r2, r24
    197a:	20 e8       	ldi	r18, 0x80	; 128
    197c:	42 2e       	mov	r4, r18
    197e:	0b c0       	rjmp	.+22     	; 0x1996 <__pad+0x96>
    1980:	96 01       	movw	r18, r12
    1982:	68 2d       	mov	r22, r8
    1984:	a3 01       	movw	r20, r6
    1986:	c5 01       	movw	r24, r10
    1988:	0e 94 2a 11 	call	0x2254	; 0x2254 <__out>
    198c:	c0 16       	cp	r12, r16
    198e:	d1 06       	cpc	r13, r17
    1990:	ec f2       	brlt	.-70     	; 0x194c <__pad+0x4c>
    1992:	c6 01       	movw	r24, r12
    1994:	25 c0       	rjmp	.+74     	; 0x19e0 <__pad+0xe0>
    1996:	90 e1       	ldi	r25, 0x10	; 16
    1998:	e9 16       	cp	r14, r25
    199a:	f1 04       	cpc	r15, r1
    199c:	58 f0       	brcs	.+22     	; 0x19b4 <__pad+0xb4>
    199e:	20 e1       	ldi	r18, 0x10	; 16
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	64 2d       	mov	r22, r4
    19a4:	a1 01       	movw	r20, r2
    19a6:	c5 01       	movw	r24, r10
    19a8:	0e 94 2a 11 	call	0x2254	; 0x2254 <__out>
    19ac:	80 e1       	ldi	r24, 0x10	; 16
    19ae:	e8 1a       	sub	r14, r24
    19b0:	f1 08       	sbc	r15, r1
    19b2:	f1 cf       	rjmp	.-30     	; 0x1996 <__pad+0x96>
    19b4:	2d 89       	ldd	r18, Y+21	; 0x15
    19b6:	3e 89       	ldd	r19, Y+22	; 0x16
    19b8:	2f 70       	andi	r18, 0x0F	; 15
    19ba:	33 27       	eor	r19, r19
    19bc:	89 89       	ldd	r24, Y+17	; 0x11
    19be:	9a 89       	ldd	r25, Y+18	; 0x12
    19c0:	ac 01       	movw	r20, r24
    19c2:	60 e8       	ldi	r22, 0x80	; 128
    19c4:	c5 01       	movw	r24, r10
    19c6:	0e 94 2a 11 	call	0x2254	; 0x2254 <__out>
    19ca:	8b 89       	ldd	r24, Y+19	; 0x13
    19cc:	9c 89       	ldd	r25, Y+20	; 0x14
    19ce:	89 2b       	or	r24, r25
    19d0:	31 f4       	brne	.+12     	; 0x19de <__pad+0xde>
    19d2:	96 01       	movw	r18, r12
    19d4:	68 2d       	mov	r22, r8
    19d6:	a3 01       	movw	r20, r6
    19d8:	c5 01       	movw	r24, r10
    19da:	0e 94 2a 11 	call	0x2254	; 0x2254 <__out>
    19de:	c8 01       	movw	r24, r16
    19e0:	66 96       	adiw	r28, 0x16	; 22
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	ff 90       	pop	r15
    19f6:	ef 90       	pop	r14
    19f8:	df 90       	pop	r13
    19fa:	cf 90       	pop	r12
    19fc:	bf 90       	pop	r11
    19fe:	af 90       	pop	r10
    1a00:	8f 90       	pop	r8
    1a02:	7f 90       	pop	r7
    1a04:	6f 90       	pop	r6
    1a06:	4f 90       	pop	r4
    1a08:	3f 90       	pop	r3
    1a0a:	2f 90       	pop	r2
    1a0c:	08 95       	ret

Disassembly of section .text.__dummy_fmt4:

0000280e <__fmt_a>:
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	08 95       	ret

Disassembly of section .text.__fmt_state:

00001f28 <__fmt_state>:
    1f28:	cf 92       	push	r12
    1f2a:	df 92       	push	r13
    1f2c:	ef 92       	push	r14
    1f2e:	dc 01       	movw	r26, r24
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	29 2f       	mov	r18, r25
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	22 0f       	add	r18, r18
    1f38:	33 1f       	adc	r19, r19
    1f3a:	69 01       	movw	r12, r18
    1f3c:	03 2e       	mov	r0, r19
    1f3e:	00 0c       	add	r0, r0
    1f40:	ee 08       	sbc	r14, r14
    1f42:	6e 2d       	mov	r22, r14
    1f44:	a6 01       	movw	r20, r12
    1f46:	4d 5f       	subi	r20, 0xFD	; 253
    1f48:	5c 4f       	sbci	r21, 0xFC	; 252
    1f4a:	6f 4f       	sbci	r22, 0xFF	; 255
    1f4c:	6a 01       	movw	r12, r20
    1f4e:	e6 2e       	mov	r14, r22
    1f50:	fa 01       	movw	r30, r20
    1f52:	84 91       	lpm	r24, Z
    1f54:	e7 fc       	sbrc	r14, 7
    1f56:	80 81       	ld	r24, Z
    1f58:	81 11       	cpse	r24, r1
    1f5a:	0d c0       	rjmp	.+26     	; 0x1f76 <__fmt_state+0x4e>
    1f5c:	2f 5f       	subi	r18, 0xFF	; 255
    1f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f60:	03 2e       	mov	r0, r19
    1f62:	00 0c       	add	r0, r0
    1f64:	44 0b       	sbc	r20, r20
    1f66:	2d 5f       	subi	r18, 0xFD	; 253
    1f68:	3c 4f       	sbci	r19, 0xFC	; 252
    1f6a:	4f 4f       	sbci	r20, 0xFF	; 255
    1f6c:	f9 01       	movw	r30, r18
    1f6e:	84 91       	lpm	r24, Z
    1f70:	47 fd       	sbrc	r20, 7
    1f72:	80 81       	ld	r24, Z
    1f74:	24 c0       	rjmp	.+72     	; 0x1fbe <__fmt_state+0x96>
    1f76:	cd 90       	ld	r12, X+
    1f78:	dd 90       	ld	r13, X+
    1f7a:	ec 90       	ld	r14, X
    1f7c:	12 97       	sbiw	r26, 0x02	; 2
    1f7e:	f6 01       	movw	r30, r12
    1f80:	44 91       	lpm	r20, Z
    1f82:	e7 fc       	sbrc	r14, 7
    1f84:	40 81       	ld	r20, Z
    1f86:	84 13       	cpse	r24, r20
    1f88:	15 c0       	rjmp	.+42     	; 0x1fb4 <__fmt_state+0x8c>
    1f8a:	2f 5f       	subi	r18, 0xFF	; 255
    1f8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8e:	03 2e       	mov	r0, r19
    1f90:	00 0c       	add	r0, r0
    1f92:	44 0b       	sbc	r20, r20
    1f94:	2d 5f       	subi	r18, 0xFD	; 253
    1f96:	3c 4f       	sbci	r19, 0xFC	; 252
    1f98:	4f 4f       	sbci	r20, 0xFF	; 255
    1f9a:	f9 01       	movw	r30, r18
    1f9c:	94 91       	lpm	r25, Z
    1f9e:	47 fd       	sbrc	r20, 7
    1fa0:	90 81       	ld	r25, Z
    1fa2:	5f ef       	ldi	r21, 0xFF	; 255
    1fa4:	c5 1a       	sub	r12, r21
    1fa6:	d5 0a       	sbc	r13, r21
    1fa8:	e5 0a       	sbc	r14, r21
    1faa:	cd 92       	st	X+, r12
    1fac:	dd 92       	st	X+, r13
    1fae:	ec 92       	st	X, r14
    1fb0:	12 97       	sbiw	r26, 0x02	; 2
    1fb2:	01 c0       	rjmp	.+2      	; 0x1fb6 <__fmt_state+0x8e>
    1fb4:	9f 5f       	subi	r25, 0xFF	; 255
    1fb6:	9b 30       	cpi	r25, 0x0B	; 11
    1fb8:	08 f4       	brcc	.+2      	; 0x1fbc <__fmt_state+0x94>
    1fba:	bb cf       	rjmp	.-138    	; 0x1f32 <__fmt_state+0xa>
    1fbc:	89 2f       	mov	r24, r25
    1fbe:	ef 90       	pop	r14
    1fc0:	df 90       	pop	r13
    1fc2:	cf 90       	pop	r12
    1fc4:	08 95       	ret

Disassembly of section .text.__printf_core:

0000032a <__printf_core>:
 32a:	a3 ea       	ldi	r26, 0xA3	; 163
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	eb e9       	ldi	r30, 0x9B	; 155
 330:	f1 e0       	ldi	r31, 0x01	; 1
 332:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__prologue_saves__>
 336:	4c 01       	movw	r8, r24
 338:	59 01       	movw	r10, r18
 33a:	c7 56       	subi	r28, 0x67	; 103
 33c:	df 4f       	sbci	r29, 0xFF	; 255
 33e:	48 83       	st	Y, r20
 340:	59 83       	std	Y+1, r21	; 0x01
 342:	6a 83       	std	Y+2, r22	; 0x02
 344:	c9 59       	subi	r28, 0x99	; 153
 346:	d0 40       	sbci	r29, 0x00	; 0
 348:	21 2c       	mov	r2, r1
 34a:	31 2c       	mov	r3, r1
 34c:	6e 01       	movw	r12, r28
 34e:	2b e8       	ldi	r18, 0x8B	; 139
 350:	c2 0e       	add	r12, r18
 352:	d1 1c       	adc	r13, r1
 354:	85 e2       	ldi	r24, 0x25	; 37
 356:	78 2e       	mov	r7, r24
 358:	26 01       	movw	r4, r12
 35a:	30 e8       	ldi	r19, 0x80	; 128
 35c:	63 2e       	mov	r6, r19
 35e:	ce 01       	movw	r24, r28
 360:	8d 56       	subi	r24, 0x6D	; 109
 362:	9f 4f       	sbci	r25, 0xFF	; 255
 364:	c4 56       	subi	r28, 0x64	; 100
 366:	df 4f       	sbci	r29, 0xFF	; 255
 368:	99 83       	std	Y+1, r25	; 0x01
 36a:	88 83       	st	Y, r24
 36c:	cc 59       	subi	r28, 0x9C	; 156
 36e:	d0 40       	sbci	r29, 0x00	; 0
 370:	9c 01       	movw	r18, r24
 372:	40 e8       	ldi	r20, 0x80	; 128
 374:	cf 55       	subi	r28, 0x5F	; 95
 376:	df 4f       	sbci	r29, 0xFF	; 255
 378:	28 83       	st	Y, r18
 37a:	39 83       	std	Y+1, r19	; 0x01
 37c:	4a 83       	std	Y+2, r20	; 0x02
 37e:	c1 5a       	subi	r28, 0xA1	; 161
 380:	d0 40       	sbci	r29, 0x00	; 0
 382:	c7 56       	subi	r28, 0x67	; 103
 384:	df 4f       	sbci	r29, 0xFF	; 255
 386:	48 81       	ld	r20, Y
 388:	c9 59       	subi	r28, 0x99	; 153
 38a:	d0 40       	sbci	r29, 0x00	; 0
 38c:	c6 56       	subi	r28, 0x66	; 102
 38e:	df 4f       	sbci	r29, 0xFF	; 255
 390:	58 81       	ld	r21, Y
 392:	ca 59       	subi	r28, 0x9A	; 154
 394:	d0 40       	sbci	r29, 0x00	; 0
 396:	c5 56       	subi	r28, 0x65	; 101
 398:	df 4f       	sbci	r29, 0xFF	; 255
 39a:	68 81       	ld	r22, Y
 39c:	cb 59       	subi	r28, 0x9B	; 155
 39e:	d0 40       	sbci	r29, 0x00	; 0
 3a0:	fa 01       	movw	r30, r20
 3a2:	84 91       	lpm	r24, Z
 3a4:	67 fd       	sbrc	r22, 7
 3a6:	80 81       	ld	r24, Z
 3a8:	88 23       	and	r24, r24
 3aa:	09 f4       	brne	.+2      	; 0x3ae <__printf_core+0x84>
 3ac:	c9 c3       	rjmp	.+1938   	; 0xb40 <__stack+0x241>
 3ae:	cf 57       	subi	r28, 0x7F	; 127
 3b0:	df 4f       	sbci	r29, 0xFF	; 255
 3b2:	19 82       	std	Y+1, r1	; 0x01
 3b4:	18 82       	st	Y, r1
 3b6:	c1 58       	subi	r28, 0x81	; 129
 3b8:	d0 40       	sbci	r29, 0x00	; 0
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	9f ef       	ldi	r25, 0xFF	; 255
 3be:	cd 57       	subi	r28, 0x7D	; 125
 3c0:	df 4f       	sbci	r29, 0xFF	; 255
 3c2:	99 83       	std	Y+1, r25	; 0x01
 3c4:	88 83       	st	Y, r24
 3c6:	c3 58       	subi	r28, 0x83	; 131
 3c8:	d0 40       	sbci	r29, 0x00	; 0
 3ca:	cb 57       	subi	r28, 0x7B	; 123
 3cc:	df 4f       	sbci	r29, 0xFF	; 255
 3ce:	19 82       	std	Y+1, r1	; 0x01
 3d0:	18 82       	st	Y, r1
 3d2:	c5 58       	subi	r28, 0x85	; 133
 3d4:	d0 40       	sbci	r29, 0x00	; 0
 3d6:	a1 e0       	ldi	r26, 0x01	; 1
 3d8:	b0 e0       	ldi	r27, 0x00	; 0
 3da:	ac 0f       	add	r26, r28
 3dc:	bd 1f       	adc	r27, r29
 3de:	c9 57       	subi	r28, 0x79	; 121
 3e0:	df 4f       	sbci	r29, 0xFF	; 255
 3e2:	b9 83       	std	Y+1, r27	; 0x01
 3e4:	a8 83       	st	Y, r26
 3e6:	c7 58       	subi	r28, 0x87	; 135
 3e8:	d0 40       	sbci	r29, 0x00	; 0
 3ea:	e0 e8       	ldi	r30, 0x80	; 128
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	c7 57       	subi	r28, 0x77	; 119
 3f0:	df 4f       	sbci	r29, 0xFF	; 255
 3f2:	f9 83       	std	Y+1, r31	; 0x01
 3f4:	e8 83       	st	Y, r30
 3f6:	c9 58       	subi	r28, 0x89	; 137
 3f8:	d0 40       	sbci	r29, 0x00	; 0
 3fa:	ca 01       	movw	r24, r20
 3fc:	a6 2f       	mov	r26, r22
 3fe:	e1 2c       	mov	r14, r1
 400:	f1 2c       	mov	r15, r1
 402:	fc 01       	movw	r30, r24
 404:	24 91       	lpm	r18, Z
 406:	a7 fd       	sbrc	r26, 7
 408:	20 81       	ld	r18, Z
 40a:	21 11       	cpse	r18, r1
 40c:	1b c0       	rjmp	.+54     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 40e:	e1 14       	cp	r14, r1
 410:	f1 04       	cpc	r15, r1
 412:	01 f1       	breq	.+64     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 414:	97 01       	movw	r18, r14
 416:	c4 01       	movw	r24, r8
 418:	0e 94 2a 11 	call	0x2254	; 0x2254 <__out>
 41c:	c7 56       	subi	r28, 0x67	; 103
 41e:	df 4f       	sbci	r29, 0xFF	; 255
 420:	88 81       	ld	r24, Y
 422:	99 81       	ldd	r25, Y+1	; 0x01
 424:	aa 81       	ldd	r26, Y+2	; 0x02
 426:	c9 59       	subi	r28, 0x99	; 153
 428:	d0 40       	sbci	r29, 0x00	; 0
 42a:	8e 0d       	add	r24, r14
 42c:	9f 1d       	adc	r25, r15
 42e:	a1 1d       	adc	r26, r1
 430:	f7 fc       	sbrc	r15, 7
 432:	aa 95       	dec	r26
 434:	c7 56       	subi	r28, 0x67	; 103
 436:	df 4f       	sbci	r29, 0xFF	; 255
 438:	88 83       	st	Y, r24
 43a:	99 83       	std	Y+1, r25	; 0x01
 43c:	aa 83       	std	Y+2, r26	; 0x02
 43e:	c9 59       	subi	r28, 0x99	; 153
 440:	d0 40       	sbci	r29, 0x00	; 0
 442:	08 c0       	rjmp	.+16     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	a1 1d       	adc	r26, r1
 448:	25 32       	cpi	r18, 0x25	; 37
 44a:	09 f3       	breq	.-62     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 44c:	ff ef       	ldi	r31, 0xFF	; 255
 44e:	ef 1a       	sub	r14, r31
 450:	ff 0a       	sbc	r15, r31
 452:	d7 cf       	rjmp	.-82     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 454:	c7 56       	subi	r28, 0x67	; 103
 456:	df 4f       	sbci	r29, 0xFF	; 255
 458:	88 81       	ld	r24, Y
 45a:	99 81       	ldd	r25, Y+1	; 0x01
 45c:	aa 81       	ldd	r26, Y+2	; 0x02
 45e:	c9 59       	subi	r28, 0x99	; 153
 460:	d0 40       	sbci	r29, 0x00	; 0
 462:	fc 01       	movw	r30, r24
 464:	24 91       	lpm	r18, Z
 466:	a7 fd       	sbrc	r26, 7
 468:	20 81       	ld	r18, Z
 46a:	25 32       	cpi	r18, 0x25	; 37
 46c:	09 f0       	breq	.+2      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46e:	56 c3       	rjmp	.+1708   	; 0xb1c <__stack+0x21d>
 470:	9c 01       	movw	r18, r24
 472:	4a 2f       	mov	r20, r26
 474:	2f 5f       	subi	r18, 0xFF	; 255
 476:	3f 4f       	sbci	r19, 0xFF	; 255
 478:	4f 4f       	sbci	r20, 0xFF	; 255
 47a:	c2 56       	subi	r28, 0x62	; 98
 47c:	df 4f       	sbci	r29, 0xFF	; 255
 47e:	28 83       	st	Y, r18
 480:	39 83       	std	Y+1, r19	; 0x01
 482:	4a 83       	std	Y+2, r20	; 0x02
 484:	ce 59       	subi	r28, 0x9E	; 158
 486:	d0 40       	sbci	r29, 0x00	; 0
 488:	c7 56       	subi	r28, 0x67	; 103
 48a:	df 4f       	sbci	r29, 0xFF	; 255
 48c:	28 83       	st	Y, r18
 48e:	39 83       	std	Y+1, r19	; 0x01
 490:	4a 83       	std	Y+2, r20	; 0x02
 492:	c9 59       	subi	r28, 0x99	; 153
 494:	d0 40       	sbci	r29, 0x00	; 0
 496:	c7 56       	subi	r28, 0x67	; 103
 498:	df 4f       	sbci	r29, 0xFF	; 255
 49a:	88 81       	ld	r24, Y
 49c:	99 81       	ldd	r25, Y+1	; 0x01
 49e:	aa 81       	ldd	r26, Y+2	; 0x02
 4a0:	c9 59       	subi	r28, 0x99	; 153
 4a2:	d0 40       	sbci	r29, 0x00	; 0
 4a4:	fc 01       	movw	r30, r24
 4a6:	24 91       	lpm	r18, Z
 4a8:	a7 fd       	sbrc	r26, 7
 4aa:	20 81       	ld	r18, Z
 4ac:	2b 32       	cpi	r18, 0x2B	; 43
 4ae:	41 f4       	brne	.+16     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4b0:	cf 57       	subi	r28, 0x7F	; 127
 4b2:	df 4f       	sbci	r29, 0xFF	; 255
 4b4:	28 81       	ld	r18, Y
 4b6:	39 81       	ldd	r19, Y+1	; 0x01
 4b8:	c1 58       	subi	r28, 0x81	; 129
 4ba:	d0 40       	sbci	r29, 0x00	; 0
 4bc:	24 60       	ori	r18, 0x04	; 4
 4be:	0b c0       	rjmp	.+22     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4c0:	2c 32       	cpi	r18, 0x2C	; 44
 4c2:	cc f0       	brlt	.+50     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4c4:	2d 32       	cpi	r18, 0x2D	; 45
 4c6:	59 f5       	brne	.+86     	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
 4c8:	cf 57       	subi	r28, 0x7F	; 127
 4ca:	df 4f       	sbci	r29, 0xFF	; 255
 4cc:	28 81       	ld	r18, Y
 4ce:	39 81       	ldd	r19, Y+1	; 0x01
 4d0:	c1 58       	subi	r28, 0x81	; 129
 4d2:	d0 40       	sbci	r29, 0x00	; 0
 4d4:	21 60       	ori	r18, 0x01	; 1
 4d6:	cf 57       	subi	r28, 0x7F	; 127
 4d8:	df 4f       	sbci	r29, 0xFF	; 255
 4da:	39 83       	std	Y+1, r19	; 0x01
 4dc:	28 83       	st	Y, r18
 4de:	c1 58       	subi	r28, 0x81	; 129
 4e0:	d0 40       	sbci	r29, 0x00	; 0
 4e2:	01 96       	adiw	r24, 0x01	; 1
 4e4:	a1 1d       	adc	r26, r1
 4e6:	c7 56       	subi	r28, 0x67	; 103
 4e8:	df 4f       	sbci	r29, 0xFF	; 255
 4ea:	88 83       	st	Y, r24
 4ec:	99 83       	std	Y+1, r25	; 0x01
 4ee:	aa 83       	std	Y+2, r26	; 0x02
 4f0:	c9 59       	subi	r28, 0x99	; 153
 4f2:	d0 40       	sbci	r29, 0x00	; 0
 4f4:	d0 cf       	rjmp	.-96     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 4f6:	20 32       	cpi	r18, 0x20	; 32
 4f8:	41 f4       	brne	.+16     	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 4fa:	cf 57       	subi	r28, 0x7F	; 127
 4fc:	df 4f       	sbci	r29, 0xFF	; 255
 4fe:	28 81       	ld	r18, Y
 500:	39 81       	ldd	r19, Y+1	; 0x01
 502:	c1 58       	subi	r28, 0x81	; 129
 504:	d0 40       	sbci	r29, 0x00	; 0
 506:	28 60       	ori	r18, 0x08	; 8
 508:	e6 cf       	rjmp	.-52     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 50a:	23 32       	cpi	r18, 0x23	; 35
 50c:	91 f4       	brne	.+36     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 50e:	cf 57       	subi	r28, 0x7F	; 127
 510:	df 4f       	sbci	r29, 0xFF	; 255
 512:	28 81       	ld	r18, Y
 514:	39 81       	ldd	r19, Y+1	; 0x01
 516:	c1 58       	subi	r28, 0x81	; 129
 518:	d0 40       	sbci	r29, 0x00	; 0
 51a:	20 61       	ori	r18, 0x10	; 16
 51c:	dc cf       	rjmp	.-72     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 51e:	20 33       	cpi	r18, 0x30	; 48
 520:	41 f4       	brne	.+16     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 522:	cf 57       	subi	r28, 0x7F	; 127
 524:	df 4f       	sbci	r29, 0xFF	; 255
 526:	28 81       	ld	r18, Y
 528:	39 81       	ldd	r19, Y+1	; 0x01
 52a:	c1 58       	subi	r28, 0x81	; 129
 52c:	d0 40       	sbci	r29, 0x00	; 0
 52e:	22 60       	ori	r18, 0x02	; 2
 530:	d2 cf       	rjmp	.-92     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 532:	2a 32       	cpi	r18, 0x2A	; 42
 534:	99 f5       	brne	.+102    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
 536:	01 96       	adiw	r24, 0x01	; 1
 538:	a1 1d       	adc	r26, r1
 53a:	c7 56       	subi	r28, 0x67	; 103
 53c:	df 4f       	sbci	r29, 0xFF	; 255
 53e:	88 83       	st	Y, r24
 540:	99 83       	std	Y+1, r25	; 0x01
 542:	aa 83       	std	Y+2, r26	; 0x02
 544:	c9 59       	subi	r28, 0x99	; 153
 546:	d0 40       	sbci	r29, 0x00	; 0
 548:	d5 01       	movw	r26, r10
 54a:	ed 91       	ld	r30, X+
 54c:	fc 91       	ld	r31, X
 54e:	11 97       	sbiw	r26, 0x01	; 1
 550:	cf 01       	movw	r24, r30
 552:	02 96       	adiw	r24, 0x02	; 2
 554:	8d 93       	st	X+, r24
 556:	9c 93       	st	X, r25
 558:	80 81       	ld	r24, Z
 55a:	91 81       	ldd	r25, Z+1	; 0x01
 55c:	cb 57       	subi	r28, 0x7B	; 123
 55e:	df 4f       	sbci	r29, 0xFF	; 255
 560:	99 83       	std	Y+1, r25	; 0x01
 562:	88 83       	st	Y, r24
 564:	c5 58       	subi	r28, 0x85	; 133
 566:	d0 40       	sbci	r29, 0x00	; 0
 568:	97 ff       	sbrs	r25, 7
 56a:	3e c0       	rjmp	.+124    	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
 56c:	cf 57       	subi	r28, 0x7F	; 127
 56e:	df 4f       	sbci	r29, 0xFF	; 255
 570:	28 81       	ld	r18, Y
 572:	39 81       	ldd	r19, Y+1	; 0x01
 574:	c1 58       	subi	r28, 0x81	; 129
 576:	d0 40       	sbci	r29, 0x00	; 0
 578:	b1 e0       	ldi	r27, 0x01	; 1
 57a:	2b 27       	eor	r18, r27
 57c:	cf 57       	subi	r28, 0x7F	; 127
 57e:	df 4f       	sbci	r29, 0xFF	; 255
 580:	39 83       	std	Y+1, r19	; 0x01
 582:	28 83       	st	Y, r18
 584:	c1 58       	subi	r28, 0x81	; 129
 586:	d0 40       	sbci	r29, 0x00	; 0
 588:	91 95       	neg	r25
 58a:	81 95       	neg	r24
 58c:	91 09       	sbc	r25, r1
 58e:	cb 57       	subi	r28, 0x7B	; 123
 590:	df 4f       	sbci	r29, 0xFF	; 255
 592:	99 83       	std	Y+1, r25	; 0x01
 594:	88 83       	st	Y, r24
 596:	c5 58       	subi	r28, 0x85	; 133
 598:	d0 40       	sbci	r29, 0x00	; 0
 59a:	26 c0       	rjmp	.+76     	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
 59c:	bc 01       	movw	r22, r24
 59e:	8a 2f       	mov	r24, r26
 5a0:	0e 94 2c 10 	call	0x2058	; 0x2058 <atoi>
 5a4:	cb 57       	subi	r28, 0x7B	; 123
 5a6:	df 4f       	sbci	r29, 0xFF	; 255
 5a8:	99 83       	std	Y+1, r25	; 0x01
 5aa:	88 83       	st	Y, r24
 5ac:	c5 58       	subi	r28, 0x85	; 133
 5ae:	d0 40       	sbci	r29, 0x00	; 0
 5b0:	c7 56       	subi	r28, 0x67	; 103
 5b2:	df 4f       	sbci	r29, 0xFF	; 255
 5b4:	28 81       	ld	r18, Y
 5b6:	39 81       	ldd	r19, Y+1	; 0x01
 5b8:	4a 81       	ldd	r20, Y+2	; 0x02
 5ba:	c9 59       	subi	r28, 0x99	; 153
 5bc:	d0 40       	sbci	r29, 0x00	; 0
 5be:	f9 01       	movw	r30, r18
 5c0:	84 91       	lpm	r24, Z
 5c2:	47 fd       	sbrc	r20, 7
 5c4:	80 81       	ld	r24, Z
 5c6:	08 2e       	mov	r0, r24
 5c8:	00 0c       	add	r0, r0
 5ca:	99 0b       	sbc	r25, r25
 5cc:	c0 97       	sbiw	r24, 0x30	; 48
 5ce:	0a 97       	sbiw	r24, 0x0a	; 10
 5d0:	58 f4       	brcc	.+22     	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
 5d2:	2f 5f       	subi	r18, 0xFF	; 255
 5d4:	3f 4f       	sbci	r19, 0xFF	; 255
 5d6:	4f 4f       	sbci	r20, 0xFF	; 255
 5d8:	c7 56       	subi	r28, 0x67	; 103
 5da:	df 4f       	sbci	r29, 0xFF	; 255
 5dc:	28 83       	st	Y, r18
 5de:	39 83       	std	Y+1, r19	; 0x01
 5e0:	4a 83       	std	Y+2, r20	; 0x02
 5e2:	c9 59       	subi	r28, 0x99	; 153
 5e4:	d0 40       	sbci	r29, 0x00	; 0
 5e6:	e4 cf       	rjmp	.-56     	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 5e8:	cf 57       	subi	r28, 0x7F	; 127
 5ea:	df 4f       	sbci	r29, 0xFF	; 255
 5ec:	88 81       	ld	r24, Y
 5ee:	99 81       	ldd	r25, Y+1	; 0x01
 5f0:	c1 58       	subi	r28, 0x81	; 129
 5f2:	d0 40       	sbci	r29, 0x00	; 0
 5f4:	80 ff       	sbrs	r24, 0
 5f6:	07 c0       	rjmp	.+14     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
 5f8:	8d 7f       	andi	r24, 0xFD	; 253
 5fa:	cf 57       	subi	r28, 0x7F	; 127
 5fc:	df 4f       	sbci	r29, 0xFF	; 255
 5fe:	99 83       	std	Y+1, r25	; 0x01
 600:	88 83       	st	Y, r24
 602:	c1 58       	subi	r28, 0x81	; 129
 604:	d0 40       	sbci	r29, 0x00	; 0
 606:	c7 56       	subi	r28, 0x67	; 103
 608:	df 4f       	sbci	r29, 0xFF	; 255
 60a:	88 81       	ld	r24, Y
 60c:	99 81       	ldd	r25, Y+1	; 0x01
 60e:	aa 81       	ldd	r26, Y+2	; 0x02
 610:	c9 59       	subi	r28, 0x99	; 153
 612:	d0 40       	sbci	r29, 0x00	; 0
 614:	fc 01       	movw	r30, r24
 616:	24 91       	lpm	r18, Z
 618:	a7 fd       	sbrc	r26, 7
 61a:	20 81       	ld	r18, Z
 61c:	2e 32       	cpi	r18, 0x2E	; 46
 61e:	09 f0       	breq	.+2      	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
 620:	58 c0       	rjmp	.+176    	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
 622:	cd 57       	subi	r28, 0x7D	; 125
 624:	df 4f       	sbci	r29, 0xFF	; 255
 626:	19 82       	std	Y+1, r1	; 0x01
 628:	18 82       	st	Y, r1
 62a:	c3 58       	subi	r28, 0x83	; 131
 62c:	d0 40       	sbci	r29, 0x00	; 0
 62e:	9c 01       	movw	r18, r24
 630:	4a 2f       	mov	r20, r26
 632:	2f 5f       	subi	r18, 0xFF	; 255
 634:	3f 4f       	sbci	r19, 0xFF	; 255
 636:	4f 4f       	sbci	r20, 0xFF	; 255
 638:	c7 56       	subi	r28, 0x67	; 103
 63a:	df 4f       	sbci	r29, 0xFF	; 255
 63c:	28 83       	st	Y, r18
 63e:	39 83       	std	Y+1, r19	; 0x01
 640:	4a 83       	std	Y+2, r20	; 0x02
 642:	c9 59       	subi	r28, 0x99	; 153
 644:	d0 40       	sbci	r29, 0x00	; 0
 646:	f9 01       	movw	r30, r18
 648:	54 91       	lpm	r21, Z
 64a:	47 fd       	sbrc	r20, 7
 64c:	50 81       	ld	r21, Z
 64e:	5a 32       	cpi	r21, 0x2A	; 42
 650:	d1 f4       	brne	.+52     	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
 652:	02 96       	adiw	r24, 0x02	; 2
 654:	a1 1d       	adc	r26, r1
 656:	c7 56       	subi	r28, 0x67	; 103
 658:	df 4f       	sbci	r29, 0xFF	; 255
 65a:	88 83       	st	Y, r24
 65c:	99 83       	std	Y+1, r25	; 0x01
 65e:	aa 83       	std	Y+2, r26	; 0x02
 660:	c9 59       	subi	r28, 0x99	; 153
 662:	d0 40       	sbci	r29, 0x00	; 0
 664:	d5 01       	movw	r26, r10
 666:	ed 91       	ld	r30, X+
 668:	fc 91       	ld	r31, X
 66a:	11 97       	sbiw	r26, 0x01	; 1
 66c:	cf 01       	movw	r24, r30
 66e:	02 96       	adiw	r24, 0x02	; 2
 670:	8d 93       	st	X+, r24
 672:	9c 93       	st	X, r25
 674:	80 81       	ld	r24, Z
 676:	91 81       	ldd	r25, Z+1	; 0x01
 678:	cd 57       	subi	r28, 0x7D	; 125
 67a:	df 4f       	sbci	r29, 0xFF	; 255
 67c:	99 83       	std	Y+1, r25	; 0x01
 67e:	88 83       	st	Y, r24
 680:	c3 58       	subi	r28, 0x83	; 131
 682:	d0 40       	sbci	r29, 0x00	; 0
 684:	26 c0       	rjmp	.+76     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
 686:	84 2f       	mov	r24, r20
 688:	b9 01       	movw	r22, r18
 68a:	0e 94 2c 10 	call	0x2058	; 0x2058 <atoi>
 68e:	cd 57       	subi	r28, 0x7D	; 125
 690:	df 4f       	sbci	r29, 0xFF	; 255
 692:	99 83       	std	Y+1, r25	; 0x01
 694:	88 83       	st	Y, r24
 696:	c3 58       	subi	r28, 0x83	; 131
 698:	d0 40       	sbci	r29, 0x00	; 0
 69a:	c7 56       	subi	r28, 0x67	; 103
 69c:	df 4f       	sbci	r29, 0xFF	; 255
 69e:	28 81       	ld	r18, Y
 6a0:	39 81       	ldd	r19, Y+1	; 0x01
 6a2:	4a 81       	ldd	r20, Y+2	; 0x02
 6a4:	c9 59       	subi	r28, 0x99	; 153
 6a6:	d0 40       	sbci	r29, 0x00	; 0
 6a8:	f9 01       	movw	r30, r18
 6aa:	84 91       	lpm	r24, Z
 6ac:	47 fd       	sbrc	r20, 7
 6ae:	80 81       	ld	r24, Z
 6b0:	08 2e       	mov	r0, r24
 6b2:	00 0c       	add	r0, r0
 6b4:	99 0b       	sbc	r25, r25
 6b6:	c0 97       	sbiw	r24, 0x30	; 48
 6b8:	0a 97       	sbiw	r24, 0x0a	; 10
 6ba:	58 f4       	brcc	.+22     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
 6bc:	2f 5f       	subi	r18, 0xFF	; 255
 6be:	3f 4f       	sbci	r19, 0xFF	; 255
 6c0:	4f 4f       	sbci	r20, 0xFF	; 255
 6c2:	c7 56       	subi	r28, 0x67	; 103
 6c4:	df 4f       	sbci	r29, 0xFF	; 255
 6c6:	28 83       	st	Y, r18
 6c8:	39 83       	std	Y+1, r19	; 0x01
 6ca:	4a 83       	std	Y+2, r20	; 0x02
 6cc:	c9 59       	subi	r28, 0x99	; 153
 6ce:	d0 40       	sbci	r29, 0x00	; 0
 6d0:	e4 cf       	rjmp	.-56     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
 6d2:	ce 01       	movw	r24, r28
 6d4:	87 56       	subi	r24, 0x67	; 103
 6d6:	9f 4f       	sbci	r25, 0xFF	; 255
 6d8:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__fmt_state>
 6dc:	18 2f       	mov	r17, r24
 6de:	c7 56       	subi	r28, 0x67	; 103
 6e0:	df 4f       	sbci	r29, 0xFF	; 255
 6e2:	28 81       	ld	r18, Y
 6e4:	c9 59       	subi	r28, 0x99	; 153
 6e6:	d0 40       	sbci	r29, 0x00	; 0
 6e8:	c6 56       	subi	r28, 0x66	; 102
 6ea:	df 4f       	sbci	r29, 0xFF	; 255
 6ec:	88 81       	ld	r24, Y
 6ee:	ca 59       	subi	r28, 0x9A	; 154
 6f0:	d0 40       	sbci	r29, 0x00	; 0
 6f2:	c5 56       	subi	r28, 0x65	; 101
 6f4:	df 4f       	sbci	r29, 0xFF	; 255
 6f6:	98 81       	ld	r25, Y
 6f8:	cb 59       	subi	r28, 0x9B	; 155
 6fa:	d0 40       	sbci	r29, 0x00	; 0
 6fc:	e2 2f       	mov	r30, r18
 6fe:	f8 2f       	mov	r31, r24
 700:	84 91       	lpm	r24, Z
 702:	97 fd       	sbrc	r25, 7
 704:	80 81       	ld	r24, Z
 706:	08 2e       	mov	r0, r24
 708:	00 0c       	add	r0, r0
 70a:	99 0b       	sbc	r25, r25
 70c:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <tolower>
 710:	89 36       	cpi	r24, 0x69	; 105
 712:	91 05       	cpc	r25, r1
 714:	09 f4       	brne	.+2      	; 0x718 <__EEPROM_REGION_LENGTH__+0x318>
 716:	5a c0       	rjmp	.+180    	; 0x7cc <__EEPROM_REGION_LENGTH__+0x3cc>
 718:	b4 f4       	brge	.+44     	; 0x746 <__EEPROM_REGION_LENGTH__+0x346>
 71a:	83 36       	cpi	r24, 0x63	; 99
 71c:	91 05       	cpc	r25, r1
 71e:	09 f4       	brne	.+2      	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 720:	66 c1       	rjmp	.+716    	; 0x9ee <__stack+0xef>
 722:	44 f4       	brge	.+16     	; 0x734 <__EEPROM_REGION_LENGTH__+0x334>
 724:	85 32       	cpi	r24, 0x25	; 37
 726:	91 05       	cpc	r25, r1
 728:	09 f4       	brne	.+2      	; 0x72c <__EEPROM_REGION_LENGTH__+0x32c>
 72a:	a1 c1       	rjmp	.+834    	; 0xa6e <__stack+0x16f>
 72c:	81 36       	cpi	r24, 0x61	; 97
 72e:	91 05       	cpc	r25, r1
 730:	29 f1       	breq	.+74     	; 0x77c <__EEPROM_REGION_LENGTH__+0x37c>
 732:	b3 c1       	rjmp	.+870    	; 0xa9a <__stack+0x19b>
 734:	84 36       	cpi	r24, 0x64	; 100
 736:	91 05       	cpc	r25, r1
 738:	09 f4       	brne	.+2      	; 0x73c <__EEPROM_REGION_LENGTH__+0x33c>
 73a:	48 c0       	rjmp	.+144    	; 0x7cc <__EEPROM_REGION_LENGTH__+0x3cc>
 73c:	88 36       	cpi	r24, 0x68	; 104
 73e:	91 05       	cpc	r25, r1
 740:	0c f4       	brge	.+2      	; 0x744 <__EEPROM_REGION_LENGTH__+0x344>
 742:	2d c1       	rjmp	.+602    	; 0x99e <__stack+0x9f>
 744:	aa c1       	rjmp	.+852    	; 0xa9a <__stack+0x19b>
 746:	80 37       	cpi	r24, 0x70	; 112
 748:	91 05       	cpc	r25, r1
 74a:	09 f4       	brne	.+2      	; 0x74e <__EEPROM_REGION_LENGTH__+0x34e>
 74c:	cb c0       	rjmp	.+406    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 74e:	4c f4       	brge	.+18     	; 0x762 <__EEPROM_REGION_LENGTH__+0x362>
 750:	8e 36       	cpi	r24, 0x6E	; 110
 752:	91 05       	cpc	r25, r1
 754:	09 f4       	brne	.+2      	; 0x758 <__EEPROM_REGION_LENGTH__+0x358>
 756:	19 c1       	rjmp	.+562    	; 0x98a <__stack+0x8b>
 758:	8f 36       	cpi	r24, 0x6F	; 111
 75a:	91 05       	cpc	r25, r1
 75c:	09 f4       	brne	.+2      	; 0x760 <__EEPROM_REGION_LENGTH__+0x360>
 75e:	7c c0       	rjmp	.+248    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 760:	9c c1       	rjmp	.+824    	; 0xa9a <__stack+0x19b>
 762:	85 37       	cpi	r24, 0x75	; 117
 764:	91 05       	cpc	r25, r1
 766:	09 f4       	brne	.+2      	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
 768:	54 c0       	rjmp	.+168    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 76a:	88 37       	cpi	r24, 0x78	; 120
 76c:	91 05       	cpc	r25, r1
 76e:	09 f4       	brne	.+2      	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>
 770:	96 c0       	rjmp	.+300    	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 772:	83 37       	cpi	r24, 0x73	; 115
 774:	91 05       	cpc	r25, r1
 776:	09 f0       	breq	.+2      	; 0x77a <__EEPROM_REGION_LENGTH__+0x37a>
 778:	90 c1       	rjmp	.+800    	; 0xa9a <__stack+0x19b>
 77a:	58 c1       	rjmp	.+688    	; 0xa2c <__stack+0x12d>
 77c:	61 2f       	mov	r22, r17
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	a5 01       	movw	r20, r10
 782:	c6 01       	movw	r24, r12
 784:	0e 94 3a 12 	call	0x2474	; 0x2474 <__pop_float>
 788:	89 2b       	or	r24, r25
 78a:	09 f4       	brne	.+2      	; 0x78e <__EEPROM_REGION_LENGTH__+0x38e>
 78c:	b7 c1       	rjmp	.+878    	; 0xafc <__stack+0x1fd>
 78e:	c7 56       	subi	r28, 0x67	; 103
 790:	df 4f       	sbci	r29, 0xFF	; 255
 792:	88 81       	ld	r24, Y
 794:	99 81       	ldd	r25, Y+1	; 0x01
 796:	aa 81       	ldd	r26, Y+2	; 0x02
 798:	c9 59       	subi	r28, 0x99	; 153
 79a:	d0 40       	sbci	r29, 0x00	; 0
 79c:	9c 01       	movw	r18, r24
 79e:	4a 2f       	mov	r20, r26
 7a0:	2f 5f       	subi	r18, 0xFF	; 255
 7a2:	3f 4f       	sbci	r19, 0xFF	; 255
 7a4:	4f 4f       	sbci	r20, 0xFF	; 255
 7a6:	c7 56       	subi	r28, 0x67	; 103
 7a8:	df 4f       	sbci	r29, 0xFF	; 255
 7aa:	28 83       	st	Y, r18
 7ac:	39 83       	std	Y+1, r19	; 0x01
 7ae:	4a 83       	std	Y+2, r20	; 0x02
 7b0:	c9 59       	subi	r28, 0x99	; 153
 7b2:	d0 40       	sbci	r29, 0x00	; 0
 7b4:	fc 01       	movw	r30, r24
 7b6:	24 91       	lpm	r18, Z
 7b8:	a7 fd       	sbrc	r26, 7
 7ba:	20 81       	ld	r18, Z
 7bc:	a6 01       	movw	r20, r12
 7be:	be 01       	movw	r22, r28
 7c0:	6f 57       	subi	r22, 0x7F	; 127
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	c4 01       	movw	r24, r8
 7c6:	0e 94 07 14 	call	0x280e	; 0x280e <__fmt_a>
 7ca:	95 c1       	rjmp	.+810    	; 0xaf6 <__stack+0x1f7>
 7cc:	61 2f       	mov	r22, r17
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	95 01       	movw	r18, r10
 7d2:	41 e0       	ldi	r20, 0x01	; 1
 7d4:	50 e0       	ldi	r21, 0x00	; 0
 7d6:	c6 01       	movw	r24, r12
 7d8:	0e 94 22 0b 	call	0x1644	; 0x1644 <__pop_int>
 7dc:	89 2b       	or	r24, r25
 7de:	09 f4       	brne	.+2      	; 0x7e2 <__EEPROM_REGION_LENGTH__+0x3e2>
 7e0:	8d c1       	rjmp	.+794    	; 0xafc <__stack+0x1fd>
 7e2:	c7 56       	subi	r28, 0x67	; 103
 7e4:	df 4f       	sbci	r29, 0xFF	; 255
 7e6:	88 81       	ld	r24, Y
 7e8:	99 81       	ldd	r25, Y+1	; 0x01
 7ea:	aa 81       	ldd	r26, Y+2	; 0x02
 7ec:	c9 59       	subi	r28, 0x99	; 153
 7ee:	d0 40       	sbci	r29, 0x00	; 0
 7f0:	01 96       	adiw	r24, 0x01	; 1
 7f2:	a1 1d       	adc	r26, r1
 7f4:	c7 56       	subi	r28, 0x67	; 103
 7f6:	df 4f       	sbci	r29, 0xFF	; 255
 7f8:	88 83       	st	Y, r24
 7fa:	99 83       	std	Y+1, r25	; 0x01
 7fc:	aa 83       	std	Y+2, r26	; 0x02
 7fe:	c9 59       	subi	r28, 0x99	; 153
 800:	d0 40       	sbci	r29, 0x00	; 0
 802:	a6 01       	movw	r20, r12
 804:	be 01       	movw	r22, r28
 806:	6f 57       	subi	r22, 0x7F	; 127
 808:	7f 4f       	sbci	r23, 0xFF	; 255
 80a:	c4 01       	movw	r24, r8
 80c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__fmt_d>
 810:	72 c1       	rjmp	.+740    	; 0xaf6 <__stack+0x1f7>
 812:	61 2f       	mov	r22, r17
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	95 01       	movw	r18, r10
 818:	40 e0       	ldi	r20, 0x00	; 0
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	c6 01       	movw	r24, r12
 81e:	0e 94 22 0b 	call	0x1644	; 0x1644 <__pop_int>
 822:	89 2b       	or	r24, r25
 824:	09 f4       	brne	.+2      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 826:	6a c1       	rjmp	.+724    	; 0xafc <__stack+0x1fd>
 828:	c7 56       	subi	r28, 0x67	; 103
 82a:	df 4f       	sbci	r29, 0xFF	; 255
 82c:	88 81       	ld	r24, Y
 82e:	99 81       	ldd	r25, Y+1	; 0x01
 830:	aa 81       	ldd	r26, Y+2	; 0x02
 832:	c9 59       	subi	r28, 0x99	; 153
 834:	d0 40       	sbci	r29, 0x00	; 0
 836:	01 96       	adiw	r24, 0x01	; 1
 838:	a1 1d       	adc	r26, r1
 83a:	c7 56       	subi	r28, 0x67	; 103
 83c:	df 4f       	sbci	r29, 0xFF	; 255
 83e:	88 83       	st	Y, r24
 840:	99 83       	std	Y+1, r25	; 0x01
 842:	aa 83       	std	Y+2, r26	; 0x02
 844:	c9 59       	subi	r28, 0x99	; 153
 846:	d0 40       	sbci	r29, 0x00	; 0
 848:	a6 01       	movw	r20, r12
 84a:	be 01       	movw	r22, r28
 84c:	6f 57       	subi	r22, 0x7F	; 127
 84e:	7f 4f       	sbci	r23, 0xFF	; 255
 850:	c4 01       	movw	r24, r8
 852:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__fmt_u>
 856:	4f c1       	rjmp	.+670    	; 0xaf6 <__stack+0x1f7>
 858:	61 2f       	mov	r22, r17
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	95 01       	movw	r18, r10
 85e:	40 e0       	ldi	r20, 0x00	; 0
 860:	50 e0       	ldi	r21, 0x00	; 0
 862:	c6 01       	movw	r24, r12
 864:	0e 94 22 0b 	call	0x1644	; 0x1644 <__pop_int>
 868:	89 2b       	or	r24, r25
 86a:	09 f4       	brne	.+2      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 86c:	47 c1       	rjmp	.+654    	; 0xafc <__stack+0x1fd>
 86e:	c7 56       	subi	r28, 0x67	; 103
 870:	df 4f       	sbci	r29, 0xFF	; 255
 872:	88 81       	ld	r24, Y
 874:	99 81       	ldd	r25, Y+1	; 0x01
 876:	aa 81       	ldd	r26, Y+2	; 0x02
 878:	c9 59       	subi	r28, 0x99	; 153
 87a:	d0 40       	sbci	r29, 0x00	; 0
 87c:	01 96       	adiw	r24, 0x01	; 1
 87e:	a1 1d       	adc	r26, r1
 880:	c7 56       	subi	r28, 0x67	; 103
 882:	df 4f       	sbci	r29, 0xFF	; 255
 884:	88 83       	st	Y, r24
 886:	99 83       	std	Y+1, r25	; 0x01
 888:	aa 83       	std	Y+2, r26	; 0x02
 88a:	c9 59       	subi	r28, 0x99	; 153
 88c:	d0 40       	sbci	r29, 0x00	; 0
 88e:	a6 01       	movw	r20, r12
 890:	be 01       	movw	r22, r28
 892:	6f 57       	subi	r22, 0x7F	; 127
 894:	7f 4f       	sbci	r23, 0xFF	; 255
 896:	c4 01       	movw	r24, r8
 898:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__fmt_o>
 89c:	2c c1       	rjmp	.+600    	; 0xaf6 <__stack+0x1f7>
 89e:	61 2f       	mov	r22, r17
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	95 01       	movw	r18, r10
 8a4:	40 e0       	ldi	r20, 0x00	; 0
 8a6:	50 e0       	ldi	r21, 0x00	; 0
 8a8:	c6 01       	movw	r24, r12
 8aa:	0e 94 22 0b 	call	0x1644	; 0x1644 <__pop_int>
 8ae:	89 2b       	or	r24, r25
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 8b2:	24 c1       	rjmp	.+584    	; 0xafc <__stack+0x1fd>
 8b4:	c7 56       	subi	r28, 0x67	; 103
 8b6:	df 4f       	sbci	r29, 0xFF	; 255
 8b8:	88 81       	ld	r24, Y
 8ba:	99 81       	ldd	r25, Y+1	; 0x01
 8bc:	aa 81       	ldd	r26, Y+2	; 0x02
 8be:	c9 59       	subi	r28, 0x99	; 153
 8c0:	d0 40       	sbci	r29, 0x00	; 0
 8c2:	9c 01       	movw	r18, r24
 8c4:	4a 2f       	mov	r20, r26
 8c6:	2f 5f       	subi	r18, 0xFF	; 255
 8c8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ca:	4f 4f       	sbci	r20, 0xFF	; 255
 8cc:	c7 56       	subi	r28, 0x67	; 103
 8ce:	df 4f       	sbci	r29, 0xFF	; 255
 8d0:	28 83       	st	Y, r18
 8d2:	39 83       	std	Y+1, r19	; 0x01
 8d4:	4a 83       	std	Y+2, r20	; 0x02
 8d6:	c9 59       	subi	r28, 0x99	; 153
 8d8:	d0 40       	sbci	r29, 0x00	; 0
 8da:	fc 01       	movw	r30, r24
 8dc:	24 91       	lpm	r18, Z
 8de:	a7 fd       	sbrc	r26, 7
 8e0:	20 81       	ld	r18, Z
 8e2:	4b c0       	rjmp	.+150    	; 0x97a <__stack+0x7b>
 8e4:	95 01       	movw	r18, r10
 8e6:	40 e0       	ldi	r20, 0x00	; 0
 8e8:	50 e0       	ldi	r21, 0x00	; 0
 8ea:	60 ef       	ldi	r22, 0xF0	; 240
 8ec:	70 e0       	ldi	r23, 0x00	; 0
 8ee:	c6 01       	movw	r24, r12
 8f0:	0e 94 22 0b 	call	0x1644	; 0x1644 <__pop_int>
 8f4:	89 2b       	or	r24, r25
 8f6:	09 f4       	brne	.+2      	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8f8:	01 c1       	rjmp	.+514    	; 0xafc <__stack+0x1fd>
 8fa:	c7 56       	subi	r28, 0x67	; 103
 8fc:	df 4f       	sbci	r29, 0xFF	; 255
 8fe:	88 81       	ld	r24, Y
 900:	99 81       	ldd	r25, Y+1	; 0x01
 902:	aa 81       	ldd	r26, Y+2	; 0x02
 904:	c9 59       	subi	r28, 0x99	; 153
 906:	d0 40       	sbci	r29, 0x00	; 0
 908:	01 96       	adiw	r24, 0x01	; 1
 90a:	a1 1d       	adc	r26, r1
 90c:	c7 56       	subi	r28, 0x67	; 103
 90e:	df 4f       	sbci	r29, 0xFF	; 255
 910:	88 83       	st	Y, r24
 912:	99 83       	std	Y+1, r25	; 0x01
 914:	aa 83       	std	Y+2, r26	; 0x02
 916:	c9 59       	subi	r28, 0x99	; 153
 918:	d0 40       	sbci	r29, 0x00	; 0
 91a:	86 e0       	ldi	r24, 0x06	; 6
 91c:	20 e2       	ldi	r18, 0x20	; 32
 91e:	33 e0       	ldi	r19, 0x03	; 3
 920:	40 e0       	ldi	r20, 0x00	; 0
 922:	f9 01       	movw	r30, r18
 924:	de 01       	movw	r26, r28
 926:	ad 56       	subi	r26, 0x6D	; 109
 928:	bf 4f       	sbci	r27, 0xFF	; 255
 92a:	74 2f       	mov	r23, r20
 92c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__movmemx_qi>
 930:	d6 01       	movw	r26, r12
 932:	2c 91       	ld	r18, X
 934:	11 96       	adiw	r26, 0x01	; 1
 936:	3c 91       	ld	r19, X
 938:	11 97       	sbiw	r26, 0x01	; 1
 93a:	12 96       	adiw	r26, 0x02	; 2
 93c:	4c 91       	ld	r20, X
 93e:	12 97       	sbiw	r26, 0x02	; 2
 940:	13 96       	adiw	r26, 0x03	; 3
 942:	5c 91       	ld	r21, X
 944:	13 97       	sbiw	r26, 0x03	; 3
 946:	14 96       	adiw	r26, 0x04	; 4
 948:	6c 91       	ld	r22, X
 94a:	14 97       	sbiw	r26, 0x04	; 4
 94c:	15 96       	adiw	r26, 0x05	; 5
 94e:	7c 91       	ld	r23, X
 950:	15 97       	sbiw	r26, 0x05	; 5
 952:	16 96       	adiw	r26, 0x06	; 6
 954:	8c 91       	ld	r24, X
 956:	16 97       	sbiw	r26, 0x06	; 6
 958:	17 96       	adiw	r26, 0x07	; 7
 95a:	9c 91       	ld	r25, X
 95c:	a0 e0       	ldi	r26, 0x00	; 0
 95e:	0e 94 a9 13 	call	0x2752	; 0x2752 <__cmpdi2_s8>
 962:	51 f4       	brne	.+20     	; 0x978 <__stack+0x79>
 964:	00 e0       	ldi	r16, 0x00	; 0
 966:	10 e0       	ldi	r17, 0x00	; 0
 968:	cf 55       	subi	r28, 0x5F	; 95
 96a:	df 4f       	sbci	r29, 0xFF	; 255
 96c:	28 81       	ld	r18, Y
 96e:	39 81       	ldd	r19, Y+1	; 0x01
 970:	4a 81       	ldd	r20, Y+2	; 0x02
 972:	c1 5a       	subi	r28, 0xA1	; 161
 974:	d0 40       	sbci	r29, 0x00	; 0
 976:	b9 c0       	rjmp	.+370    	; 0xaea <__stack+0x1eb>
 978:	28 e7       	ldi	r18, 0x78	; 120
 97a:	a6 01       	movw	r20, r12
 97c:	be 01       	movw	r22, r28
 97e:	6f 57       	subi	r22, 0x7F	; 127
 980:	7f 4f       	sbci	r23, 0xFF	; 255
 982:	c4 01       	movw	r24, r8
 984:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fmt_x>
 988:	b6 c0       	rjmp	.+364    	; 0xaf6 <__stack+0x1f7>
 98a:	61 2f       	mov	r22, r17
 98c:	70 e0       	ldi	r23, 0x00	; 0
 98e:	95 01       	movw	r18, r10
 990:	a1 01       	movw	r20, r2
 992:	4e 0d       	add	r20, r14
 994:	5f 1d       	adc	r21, r15
 996:	c6 01       	movw	r24, r12
 998:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__pop_ptr>
 99c:	af c0       	rjmp	.+350    	; 0xafc <__stack+0x1fd>
 99e:	61 2f       	mov	r22, r17
 9a0:	70 e0       	ldi	r23, 0x00	; 0
 9a2:	a5 01       	movw	r20, r10
 9a4:	c6 01       	movw	r24, r12
 9a6:	0e 94 3a 12 	call	0x2474	; 0x2474 <__pop_float>
 9aa:	89 2b       	or	r24, r25
 9ac:	09 f4       	brne	.+2      	; 0x9b0 <__stack+0xb1>
 9ae:	a6 c0       	rjmp	.+332    	; 0xafc <__stack+0x1fd>
 9b0:	c7 56       	subi	r28, 0x67	; 103
 9b2:	df 4f       	sbci	r29, 0xFF	; 255
 9b4:	88 81       	ld	r24, Y
 9b6:	99 81       	ldd	r25, Y+1	; 0x01
 9b8:	aa 81       	ldd	r26, Y+2	; 0x02
 9ba:	c9 59       	subi	r28, 0x99	; 153
 9bc:	d0 40       	sbci	r29, 0x00	; 0
 9be:	9c 01       	movw	r18, r24
 9c0:	4a 2f       	mov	r20, r26
 9c2:	2f 5f       	subi	r18, 0xFF	; 255
 9c4:	3f 4f       	sbci	r19, 0xFF	; 255
 9c6:	4f 4f       	sbci	r20, 0xFF	; 255
 9c8:	c7 56       	subi	r28, 0x67	; 103
 9ca:	df 4f       	sbci	r29, 0xFF	; 255
 9cc:	28 83       	st	Y, r18
 9ce:	39 83       	std	Y+1, r19	; 0x01
 9d0:	4a 83       	std	Y+2, r20	; 0x02
 9d2:	c9 59       	subi	r28, 0x99	; 153
 9d4:	d0 40       	sbci	r29, 0x00	; 0
 9d6:	fc 01       	movw	r30, r24
 9d8:	24 91       	lpm	r18, Z
 9da:	a7 fd       	sbrc	r26, 7
 9dc:	20 81       	ld	r18, Z
 9de:	a6 01       	movw	r20, r12
 9e0:	be 01       	movw	r22, r28
 9e2:	6f 57       	subi	r22, 0x7F	; 127
 9e4:	7f 4f       	sbci	r23, 0xFF	; 255
 9e6:	c4 01       	movw	r24, r8
 9e8:	0e 94 07 14 	call	0x280e	; 0x280e <__fmt_a>
 9ec:	84 c0       	rjmp	.+264    	; 0xaf6 <__stack+0x1f7>
 9ee:	10 38       	cpi	r17, 0x80	; 128
 9f0:	09 f0       	breq	.+2      	; 0x9f4 <__stack+0xf5>
 9f2:	84 c0       	rjmp	.+264    	; 0xafc <__stack+0x1fd>
 9f4:	c7 56       	subi	r28, 0x67	; 103
 9f6:	df 4f       	sbci	r29, 0xFF	; 255
 9f8:	88 81       	ld	r24, Y
 9fa:	99 81       	ldd	r25, Y+1	; 0x01
 9fc:	aa 81       	ldd	r26, Y+2	; 0x02
 9fe:	c9 59       	subi	r28, 0x99	; 153
 a00:	d0 40       	sbci	r29, 0x00	; 0
 a02:	01 96       	adiw	r24, 0x01	; 1
 a04:	a1 1d       	adc	r26, r1
 a06:	c7 56       	subi	r28, 0x67	; 103
 a08:	df 4f       	sbci	r29, 0xFF	; 255
 a0a:	88 83       	st	Y, r24
 a0c:	99 83       	std	Y+1, r25	; 0x01
 a0e:	aa 83       	std	Y+2, r26	; 0x02
 a10:	c9 59       	subi	r28, 0x99	; 153
 a12:	d0 40       	sbci	r29, 0x00	; 0
 a14:	d5 01       	movw	r26, r10
 a16:	ed 91       	ld	r30, X+
 a18:	fc 91       	ld	r31, X
 a1a:	11 97       	sbiw	r26, 0x01	; 1
 a1c:	cf 01       	movw	r24, r30
 a1e:	02 96       	adiw	r24, 0x02	; 2
 a20:	8d 93       	st	X+, r24
 a22:	9c 93       	st	X, r25
 a24:	80 81       	ld	r24, Z
 a26:	f6 01       	movw	r30, r12
 a28:	80 83       	st	Z, r24
 a2a:	5b c0       	rjmp	.+182    	; 0xae2 <__stack+0x1e3>
 a2c:	10 38       	cpi	r17, 0x80	; 128
 a2e:	09 f0       	breq	.+2      	; 0xa32 <__stack+0x133>
 a30:	65 c0       	rjmp	.+202    	; 0xafc <__stack+0x1fd>
 a32:	c7 56       	subi	r28, 0x67	; 103
 a34:	df 4f       	sbci	r29, 0xFF	; 255
 a36:	88 81       	ld	r24, Y
 a38:	99 81       	ldd	r25, Y+1	; 0x01
 a3a:	aa 81       	ldd	r26, Y+2	; 0x02
 a3c:	c9 59       	subi	r28, 0x99	; 153
 a3e:	d0 40       	sbci	r29, 0x00	; 0
 a40:	01 96       	adiw	r24, 0x01	; 1
 a42:	a1 1d       	adc	r26, r1
 a44:	c7 56       	subi	r28, 0x67	; 103
 a46:	df 4f       	sbci	r29, 0xFF	; 255
 a48:	88 83       	st	Y, r24
 a4a:	99 83       	std	Y+1, r25	; 0x01
 a4c:	aa 83       	std	Y+2, r26	; 0x02
 a4e:	c9 59       	subi	r28, 0x99	; 153
 a50:	d0 40       	sbci	r29, 0x00	; 0
 a52:	d5 01       	movw	r26, r10
 a54:	ed 91       	ld	r30, X+
 a56:	fc 91       	ld	r31, X
 a58:	11 97       	sbiw	r26, 0x01	; 1
 a5a:	cf 01       	movw	r24, r30
 a5c:	03 96       	adiw	r24, 0x03	; 3
 a5e:	8d 93       	st	X+, r24
 a60:	9c 93       	st	X, r25
 a62:	20 81       	ld	r18, Z
 a64:	31 81       	ldd	r19, Z+1	; 0x01
 a66:	42 81       	ldd	r20, Z+2	; 0x02
 a68:	00 e0       	ldi	r16, 0x00	; 0
 a6a:	10 e0       	ldi	r17, 0x00	; 0
 a6c:	3e c0       	rjmp	.+124    	; 0xaea <__stack+0x1eb>
 a6e:	10 38       	cpi	r17, 0x80	; 128
 a70:	09 f0       	breq	.+2      	; 0xa74 <__stack+0x175>
 a72:	44 c0       	rjmp	.+136    	; 0xafc <__stack+0x1fd>
 a74:	c7 56       	subi	r28, 0x67	; 103
 a76:	df 4f       	sbci	r29, 0xFF	; 255
 a78:	88 81       	ld	r24, Y
 a7a:	99 81       	ldd	r25, Y+1	; 0x01
 a7c:	aa 81       	ldd	r26, Y+2	; 0x02
 a7e:	c9 59       	subi	r28, 0x99	; 153
 a80:	d0 40       	sbci	r29, 0x00	; 0
 a82:	01 96       	adiw	r24, 0x01	; 1
 a84:	a1 1d       	adc	r26, r1
 a86:	c7 56       	subi	r28, 0x67	; 103
 a88:	df 4f       	sbci	r29, 0xFF	; 255
 a8a:	88 83       	st	Y, r24
 a8c:	99 83       	std	Y+1, r25	; 0x01
 a8e:	aa 83       	std	Y+2, r26	; 0x02
 a90:	c9 59       	subi	r28, 0x99	; 153
 a92:	d0 40       	sbci	r29, 0x00	; 0
 a94:	f6 01       	movw	r30, r12
 a96:	70 82       	st	Z, r7
 a98:	24 c0       	rjmp	.+72     	; 0xae2 <__stack+0x1e3>
 a9a:	d6 01       	movw	r26, r12
 a9c:	7c 92       	st	X, r7
 a9e:	c2 56       	subi	r28, 0x62	; 98
 aa0:	df 4f       	sbci	r29, 0xFF	; 255
 aa2:	28 81       	ld	r18, Y
 aa4:	39 81       	ldd	r19, Y+1	; 0x01
 aa6:	4a 81       	ldd	r20, Y+2	; 0x02
 aa8:	ce 59       	subi	r28, 0x9E	; 158
 aaa:	d0 40       	sbci	r29, 0x00	; 0
 aac:	c7 56       	subi	r28, 0x67	; 103
 aae:	df 4f       	sbci	r29, 0xFF	; 255
 ab0:	28 83       	st	Y, r18
 ab2:	39 83       	std	Y+1, r19	; 0x01
 ab4:	4a 83       	std	Y+2, r20	; 0x02
 ab6:	c9 59       	subi	r28, 0x99	; 153
 ab8:	d0 40       	sbci	r29, 0x00	; 0
 aba:	cf 57       	subi	r28, 0x7F	; 127
 abc:	df 4f       	sbci	r29, 0xFF	; 255
 abe:	19 82       	std	Y+1, r1	; 0x01
 ac0:	18 82       	st	Y, r1
 ac2:	c1 58       	subi	r28, 0x81	; 129
 ac4:	d0 40       	sbci	r29, 0x00	; 0
 ac6:	cb 57       	subi	r28, 0x7B	; 123
 ac8:	df 4f       	sbci	r29, 0xFF	; 255
 aca:	19 82       	std	Y+1, r1	; 0x01
 acc:	18 82       	st	Y, r1
 ace:	c5 58       	subi	r28, 0x85	; 133
 ad0:	d0 40       	sbci	r29, 0x00	; 0
 ad2:	8f ef       	ldi	r24, 0xFF	; 255
 ad4:	9f ef       	ldi	r25, 0xFF	; 255
 ad6:	cd 57       	subi	r28, 0x7D	; 125
 ad8:	df 4f       	sbci	r29, 0xFF	; 255
 ada:	99 83       	std	Y+1, r25	; 0x01
 adc:	88 83       	st	Y, r24
 ade:	c3 58       	subi	r28, 0x83	; 131
 ae0:	d0 40       	sbci	r29, 0x00	; 0
 ae2:	01 e0       	ldi	r16, 0x01	; 1
 ae4:	10 e0       	ldi	r17, 0x00	; 0
 ae6:	46 2d       	mov	r20, r6
 ae8:	92 01       	movw	r18, r4
 aea:	be 01       	movw	r22, r28
 aec:	6f 57       	subi	r22, 0x7F	; 127
 aee:	7f 4f       	sbci	r23, 0xFF	; 255
 af0:	c4 01       	movw	r24, r8
 af2:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__fmt_s>
 af6:	8e 0d       	add	r24, r14
 af8:	9f 1d       	adc	r25, r15
 afa:	11 c0       	rjmp	.+34     	; 0xb1e <__stack+0x21f>
 afc:	c7 56       	subi	r28, 0x67	; 103
 afe:	df 4f       	sbci	r29, 0xFF	; 255
 b00:	88 81       	ld	r24, Y
 b02:	99 81       	ldd	r25, Y+1	; 0x01
 b04:	aa 81       	ldd	r26, Y+2	; 0x02
 b06:	c9 59       	subi	r28, 0x99	; 153
 b08:	d0 40       	sbci	r29, 0x00	; 0
 b0a:	01 96       	adiw	r24, 0x01	; 1
 b0c:	a1 1d       	adc	r26, r1
 b0e:	c7 56       	subi	r28, 0x67	; 103
 b10:	df 4f       	sbci	r29, 0xFF	; 255
 b12:	88 83       	st	Y, r24
 b14:	99 83       	std	Y+1, r25	; 0x01
 b16:	aa 83       	std	Y+2, r26	; 0x02
 b18:	c9 59       	subi	r28, 0x99	; 153
 b1a:	d0 40       	sbci	r29, 0x00	; 0
 b1c:	c7 01       	movw	r24, r14
 b1e:	71 01       	movw	r14, r2
 b20:	e8 0e       	add	r14, r24
 b22:	f9 1e       	adc	r15, r25
 b24:	e2 14       	cp	r14, r2
 b26:	f3 04       	cpc	r15, r3
 b28:	4c f4       	brge	.+18     	; 0xb3c <__stack+0x23d>
 b2a:	8f e4       	ldi	r24, 0x4F	; 79
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <__errno_val+0x1>
 b32:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <__errno_val>
 b36:	8f ef       	ldi	r24, 0xFF	; 255
 b38:	9f ef       	ldi	r25, 0xFF	; 255
 b3a:	03 c0       	rjmp	.+6      	; 0xb42 <__stack+0x243>
 b3c:	17 01       	movw	r2, r14
 b3e:	21 cc       	rjmp	.-1982   	; 0x382 <__printf_core+0x58>
 b40:	c1 01       	movw	r24, r2
 b42:	cd 55       	subi	r28, 0x5D	; 93
 b44:	df 4f       	sbci	r29, 0xFF	; 255
 b46:	e2 e1       	ldi	r30, 0x12	; 18
 b48:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__epilogue_restores__>

Disassembly of section .text.fputc:

00001fc6 <fputc>:
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	db 01       	movw	r26, r22
    1fd0:	2d 91       	ld	r18, X+
    1fd2:	3c 91       	ld	r19, X
    1fd4:	11 97       	sbiw	r26, 0x01	; 1
    1fd6:	30 ff       	sbrs	r19, 0
    1fd8:	25 c0       	rjmp	.+74     	; 0x2024 <fputc+0x5e>
    1fda:	17 96       	adiw	r26, 0x07	; 7
    1fdc:	4d 91       	ld	r20, X+
    1fde:	5c 91       	ld	r21, X
    1fe0:	18 97       	sbiw	r26, 0x08	; 8
    1fe2:	15 96       	adiw	r26, 0x05	; 5
    1fe4:	2d 91       	ld	r18, X+
    1fe6:	3c 91       	ld	r19, X
    1fe8:	16 97       	sbiw	r26, 0x06	; 6
    1fea:	42 17       	cp	r20, r18
    1fec:	53 07       	cpc	r21, r19
    1fee:	78 f4       	brcc	.+30     	; 0x200e <fputc+0x48>
    1ff0:	12 96       	adiw	r26, 0x02	; 2
    1ff2:	ed 91       	ld	r30, X+
    1ff4:	fc 91       	ld	r31, X
    1ff6:	13 97       	sbiw	r26, 0x03	; 3
    1ff8:	80 83       	st	Z, r24
    1ffa:	12 96       	adiw	r26, 0x02	; 2
    1ffc:	2d 91       	ld	r18, X+
    1ffe:	3c 91       	ld	r19, X
    2000:	13 97       	sbiw	r26, 0x03	; 3
    2002:	2f 5f       	subi	r18, 0xFF	; 255
    2004:	3f 4f       	sbci	r19, 0xFF	; 255
    2006:	13 96       	adiw	r26, 0x03	; 3
    2008:	3c 93       	st	X, r19
    200a:	2e 93       	st	-X, r18
    200c:	12 97       	sbiw	r26, 0x02	; 2
    200e:	17 96       	adiw	r26, 0x07	; 7
    2010:	2d 91       	ld	r18, X+
    2012:	3c 91       	ld	r19, X
    2014:	18 97       	sbiw	r26, 0x08	; 8
    2016:	2f 5f       	subi	r18, 0xFF	; 255
    2018:	3f 4f       	sbci	r19, 0xFF	; 255
    201a:	18 96       	adiw	r26, 0x08	; 8
    201c:	3c 93       	st	X, r19
    201e:	2e 93       	st	-X, r18
    2020:	17 97       	sbiw	r26, 0x07	; 7
    2022:	15 c0       	rjmp	.+42     	; 0x204e <fputc+0x88>
    2024:	1d 96       	adiw	r26, 0x0d	; 13
    2026:	ed 91       	ld	r30, X+
    2028:	fc 91       	ld	r31, X
    202a:	1e 97       	sbiw	r26, 0x0e	; 14
    202c:	30 97       	sbiw	r30, 0x00	; 0
    202e:	19 f4       	brne	.+6      	; 0x2036 <fputc+0x70>
    2030:	8f ef       	ldi	r24, 0xFF	; 255
    2032:	9f ef       	ldi	r25, 0xFF	; 255
    2034:	0c c0       	rjmp	.+24     	; 0x204e <fputc+0x88>
    2036:	8b 01       	movw	r16, r22
    2038:	ec 01       	movw	r28, r24
    203a:	09 95       	icall
    203c:	89 2b       	or	r24, r25
    203e:	c1 f7       	brne	.-16     	; 0x2030 <fputc+0x6a>
    2040:	f8 01       	movw	r30, r16
    2042:	87 81       	ldd	r24, Z+7	; 0x07
    2044:	90 85       	ldd	r25, Z+8	; 0x08
    2046:	01 96       	adiw	r24, 0x01	; 1
    2048:	90 87       	std	Z+8, r25	; 0x08
    204a:	87 83       	std	Z+7, r24	; 0x07
    204c:	ce 01       	movw	r24, r28
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	08 95       	ret

Disassembly of section .text.__fmt_d:

000014c6 <__fmt_d>:
    14c6:	ad e0       	ldi	r26, 0x0D	; 13
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e9 e6       	ldi	r30, 0x69	; 105
    14cc:	fa e0       	ldi	r31, 0x0A	; 10
    14ce:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__prologue_saves__>
    14d2:	9a 87       	std	Y+10, r25	; 0x0a
    14d4:	89 87       	std	Y+9, r24	; 0x09
    14d6:	7c 83       	std	Y+4, r23	; 0x04
    14d8:	6b 83       	std	Y+3, r22	; 0x03
    14da:	fa 01       	movw	r30, r20
    14dc:	db 01       	movw	r26, r22
    14de:	12 96       	adiw	r26, 0x02	; 2
    14e0:	cd 90       	ld	r12, X+
    14e2:	dc 90       	ld	r13, X
    14e4:	13 97       	sbiw	r26, 0x03	; 3
    14e6:	14 96       	adiw	r26, 0x04	; 4
    14e8:	8d 91       	ld	r24, X+
    14ea:	9c 91       	ld	r25, X
    14ec:	15 97       	sbiw	r26, 0x05	; 5
    14ee:	9e 83       	std	Y+6, r25	; 0x06
    14f0:	8d 83       	std	Y+5, r24	; 0x05
    14f2:	ed 90       	ld	r14, X+
    14f4:	fc 90       	ld	r15, X
    14f6:	11 97       	sbiw	r26, 0x01	; 1
    14f8:	fa 82       	std	Y+2, r15	; 0x02
    14fa:	e9 82       	std	Y+1, r14	; 0x01
    14fc:	16 96       	adiw	r26, 0x06	; 6
    14fe:	0d 90       	ld	r0, X+
    1500:	bc 91       	ld	r27, X
    1502:	a0 2d       	mov	r26, r0
    1504:	b8 87       	std	Y+8, r27	; 0x08
    1506:	af 83       	std	Y+7, r26	; 0x07
    1508:	20 80       	ld	r2, Z
    150a:	31 80       	ldd	r3, Z+1	; 0x01
    150c:	42 80       	ldd	r4, Z+2	; 0x02
    150e:	53 80       	ldd	r5, Z+3	; 0x03
    1510:	64 80       	ldd	r6, Z+4	; 0x04
    1512:	75 80       	ldd	r7, Z+5	; 0x05
    1514:	86 80       	ldd	r8, Z+6	; 0x06
    1516:	97 80       	ldd	r9, Z+7	; 0x07
    1518:	81 01       	movw	r16, r2
    151a:	b4 2d       	mov	r27, r4
    151c:	f5 2d       	mov	r31, r5
    151e:	e6 2d       	mov	r30, r6
    1520:	7b 86       	std	Y+11, r7	; 0x0b
    1522:	8c 86       	std	Y+12, r8	; 0x0c
    1524:	9d 86       	std	Y+13, r9	; 0x0d
    1526:	91 01       	movw	r18, r2
    1528:	a2 01       	movw	r20, r4
    152a:	b3 01       	movw	r22, r6
    152c:	c4 01       	movw	r24, r8
    152e:	a0 e0       	ldi	r26, 0x00	; 0
    1530:	0e 94 a9 13 	call	0x2752	; 0x2752 <__cmpdi2_s8>
    1534:	4c f4       	brge	.+18     	; 0x1548 <__fmt_d+0x82>
    1536:	0e 94 3d 13 	call	0x267a	; 0x267a <__negdi2>
    153a:	89 01       	movw	r16, r18
    153c:	b4 2f       	mov	r27, r20
    153e:	f5 2f       	mov	r31, r21
    1540:	e6 2f       	mov	r30, r22
    1542:	7b 87       	std	Y+11, r23	; 0x0b
    1544:	8c 87       	std	Y+12, r24	; 0x0c
    1546:	9d 87       	std	Y+13, r25	; 0x0d
    1548:	d7 fc       	sbrc	r13, 7
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <__fmt_d+0x8e>
    154c:	e8 94       	clt
    154e:	e1 f8       	bld	r14, 1
    1550:	fa 82       	std	Y+2, r15	; 0x02
    1552:	e9 82       	std	Y+1, r14	; 0x01
    1554:	91 01       	movw	r18, r2
    1556:	a2 01       	movw	r20, r4
    1558:	b3 01       	movw	r22, r6
    155a:	c4 01       	movw	r24, r8
    155c:	a0 e0       	ldi	r26, 0x00	; 0
    155e:	ed 80       	ldd	r14, Y+5	; 0x05
    1560:	fe 80       	ldd	r15, Y+6	; 0x06
    1562:	0e 94 a9 13 	call	0x2752	; 0x2752 <__cmpdi2_s8>
    1566:	1c f0       	brlt	.+6      	; 0x156e <__fmt_d+0xa8>
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	82 ff       	sbrs	r24, 2
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <__fmt_d+0xb0>
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	e8 1a       	sub	r14, r24
    1572:	f1 08       	sbc	r15, r1
    1574:	05 c0       	rjmp	.+10     	; 0x1580 <__fmt_d+0xba>
    1576:	83 ff       	sbrs	r24, 3
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <__fmt_d+0xba>
    157a:	91 e0       	ldi	r25, 0x01	; 1
    157c:	e9 1a       	sub	r14, r25
    157e:	f1 08       	sbc	r15, r1
    1580:	ce 01       	movw	r24, r28
    1582:	01 96       	adiw	r24, 0x01	; 1
    1584:	5c 01       	movw	r10, r24
    1586:	8a e0       	ldi	r24, 0x0A	; 10
    1588:	c8 2e       	mov	r12, r24
    158a:	d1 2c       	mov	r13, r1
    158c:	2b 2f       	mov	r18, r27
    158e:	3f 2f       	mov	r19, r31
    1590:	4e 2f       	mov	r20, r30
    1592:	5b 85       	ldd	r21, Y+11	; 0x0b
    1594:	6c 85       	ldd	r22, Y+12	; 0x0c
    1596:	7d 85       	ldd	r23, Y+13	; 0x0d
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__cvt_u>
    15a0:	fc 01       	movw	r30, r24
    15a2:	91 01       	movw	r18, r2
    15a4:	a2 01       	movw	r20, r4
    15a6:	b3 01       	movw	r22, r6
    15a8:	c4 01       	movw	r24, r8
    15aa:	a0 e0       	ldi	r26, 0x00	; 0
    15ac:	0e 94 a9 13 	call	0x2752	; 0x2752 <__cmpdi2_s8>
    15b0:	1c f0       	brlt	.+6      	; 0x15b8 <__fmt_d+0xf2>
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	82 ff       	sbrs	r24, 2
    15b6:	12 c0       	rjmp	.+36     	; 0x15dc <__fmt_d+0x116>
    15b8:	31 97       	sbiw	r30, 0x01	; 1
    15ba:	0f 81       	ldd	r16, Y+7	; 0x07
    15bc:	18 85       	ldd	r17, Y+8	; 0x08
    15be:	0e 0f       	add	r16, r30
    15c0:	1f 1f       	adc	r17, r31
    15c2:	91 01       	movw	r18, r2
    15c4:	a2 01       	movw	r20, r4
    15c6:	b3 01       	movw	r22, r6
    15c8:	c4 01       	movw	r24, r8
    15ca:	a0 e0       	ldi	r26, 0x00	; 0
    15cc:	0e 94 a9 13 	call	0x2752	; 0x2752 <__cmpdi2_s8>
    15d0:	14 f0       	brlt	.+4      	; 0x15d6 <__fmt_d+0x110>
    15d2:	8b e2       	ldi	r24, 0x2B	; 43
    15d4:	01 c0       	rjmp	.+2      	; 0x15d8 <__fmt_d+0x112>
    15d6:	8d e2       	ldi	r24, 0x2D	; 45
    15d8:	d8 01       	movw	r26, r16
    15da:	08 c0       	rjmp	.+16     	; 0x15ec <__fmt_d+0x126>
    15dc:	83 ff       	sbrs	r24, 3
    15de:	07 c0       	rjmp	.+14     	; 0x15ee <__fmt_d+0x128>
    15e0:	31 97       	sbiw	r30, 0x01	; 1
    15e2:	af 81       	ldd	r26, Y+7	; 0x07
    15e4:	b8 85       	ldd	r27, Y+8	; 0x08
    15e6:	ae 0f       	add	r26, r30
    15e8:	bf 1f       	adc	r27, r31
    15ea:	80 e2       	ldi	r24, 0x20	; 32
    15ec:	8c 93       	st	X, r24
    15ee:	e9 80       	ldd	r14, Y+1	; 0x01
    15f0:	fa 80       	ldd	r15, Y+2	; 0x02
    15f2:	ab 81       	ldd	r26, Y+3	; 0x03
    15f4:	bc 81       	ldd	r27, Y+4	; 0x04
    15f6:	18 96       	adiw	r26, 0x08	; 8
    15f8:	2d 91       	ld	r18, X+
    15fa:	3c 91       	ld	r19, X
    15fc:	19 97       	sbiw	r26, 0x09	; 9
    15fe:	21 50       	subi	r18, 0x01	; 1
    1600:	31 09       	sbc	r19, r1
    1602:	2e 1b       	sub	r18, r30
    1604:	3f 0b       	sbc	r19, r31
    1606:	8f 81       	ldd	r24, Y+7	; 0x07
    1608:	98 85       	ldd	r25, Y+8	; 0x08
    160a:	e8 0f       	add	r30, r24
    160c:	f9 1f       	adc	r31, r25
    160e:	af 01       	movw	r20, r30
    1610:	60 e8       	ldi	r22, 0x80	; 128
    1612:	0d 81       	ldd	r16, Y+5	; 0x05
    1614:	1e 81       	ldd	r17, Y+6	; 0x06
    1616:	89 85       	ldd	r24, Y+9	; 0x09
    1618:	9a 85       	ldd	r25, Y+10	; 0x0a
    161a:	0e 94 80 0c 	call	0x1900	; 0x1900 <__pad>
    161e:	9c 01       	movw	r18, r24
    1620:	a9 85       	ldd	r26, Y+9	; 0x09
    1622:	ba 85       	ldd	r27, Y+10	; 0x0a
    1624:	8d 91       	ld	r24, X+
    1626:	9c 91       	ld	r25, X
    1628:	90 ff       	sbrs	r25, 0
    162a:	07 c0       	rjmp	.+14     	; 0x163a <__fmt_d+0x174>
    162c:	eb 81       	ldd	r30, Y+3	; 0x03
    162e:	fc 81       	ldd	r31, Y+4	; 0x04
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	82 17       	cp	r24, r18
    1636:	93 07       	cpc	r25, r19
    1638:	0c f4       	brge	.+2      	; 0x163c <__fmt_d+0x176>
    163a:	c9 01       	movw	r24, r18
    163c:	2d 96       	adiw	r28, 0x0d	; 13
    163e:	e2 e1       	ldi	r30, 0x12	; 18
    1640:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__epilogue_restores__>

Disassembly of section .text.__fmt_o:

00001ae6 <__fmt_o>:
    1ae6:	a2 e0       	ldi	r26, 0x02	; 2
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e9 e7       	ldi	r30, 0x79	; 121
    1aec:	fd e0       	ldi	r31, 0x0D	; 13
    1aee:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__prologue_saves__>
    1af2:	1c 01       	movw	r2, r24
    1af4:	4b 01       	movw	r8, r22
    1af6:	fa 01       	movw	r30, r20
    1af8:	db 01       	movw	r26, r22
    1afa:	12 96       	adiw	r26, 0x02	; 2
    1afc:	2d 91       	ld	r18, X+
    1afe:	3c 91       	ld	r19, X
    1b00:	13 97       	sbiw	r26, 0x03	; 3
    1b02:	14 96       	adiw	r26, 0x04	; 4
    1b04:	4d 90       	ld	r4, X+
    1b06:	5c 90       	ld	r5, X
    1b08:	15 97       	sbiw	r26, 0x05	; 5
    1b0a:	8d 91       	ld	r24, X+
    1b0c:	9c 91       	ld	r25, X
    1b0e:	11 97       	sbiw	r26, 0x01	; 1
    1b10:	9a 83       	std	Y+2, r25	; 0x02
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	16 96       	adiw	r26, 0x06	; 6
    1b16:	6d 90       	ld	r6, X+
    1b18:	7c 90       	ld	r7, X
    1b1a:	17 97       	sbiw	r26, 0x07	; 7
    1b1c:	37 fd       	sbrc	r19, 7
    1b1e:	03 c0       	rjmp	.+6      	; 0x1b26 <__fmt_o+0x40>
    1b20:	8d 7f       	andi	r24, 0xFD	; 253
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	00 81       	ld	r16, Z
    1b28:	11 81       	ldd	r17, Z+1	; 0x01
    1b2a:	22 81       	ldd	r18, Z+2	; 0x02
    1b2c:	33 81       	ldd	r19, Z+3	; 0x03
    1b2e:	44 81       	ldd	r20, Z+4	; 0x04
    1b30:	55 81       	ldd	r21, Z+5	; 0x05
    1b32:	66 81       	ldd	r22, Z+6	; 0x06
    1b34:	77 81       	ldd	r23, Z+7	; 0x07
    1b36:	fe 01       	movw	r30, r28
    1b38:	31 96       	adiw	r30, 0x01	; 1
    1b3a:	5f 01       	movw	r10, r30
    1b3c:	88 e0       	ldi	r24, 0x08	; 8
    1b3e:	c8 2e       	mov	r12, r24
    1b40:	d1 2c       	mov	r13, r1
    1b42:	72 01       	movw	r14, r4
    1b44:	c4 01       	movw	r24, r8
    1b46:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__cvt_u>
    1b4a:	29 81       	ldd	r18, Y+1	; 0x01
    1b4c:	24 ff       	sbrs	r18, 4
    1b4e:	06 c0       	rjmp	.+12     	; 0x1b5c <__fmt_o+0x76>
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f3 01       	movw	r30, r6
    1b54:	e8 0f       	add	r30, r24
    1b56:	f9 1f       	adc	r31, r25
    1b58:	20 e3       	ldi	r18, 0x30	; 48
    1b5a:	20 83       	st	Z, r18
    1b5c:	29 81       	ldd	r18, Y+1	; 0x01
    1b5e:	23 ff       	sbrs	r18, 3
    1b60:	06 c0       	rjmp	.+12     	; 0x1b6e <__fmt_o+0x88>
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f3 01       	movw	r30, r6
    1b66:	e8 0f       	add	r30, r24
    1b68:	f9 1f       	adc	r31, r25
    1b6a:	20 e2       	ldi	r18, 0x20	; 32
    1b6c:	20 83       	st	Z, r18
    1b6e:	e9 80       	ldd	r14, Y+1	; 0x01
    1b70:	fa 80       	ldd	r15, Y+2	; 0x02
    1b72:	d4 01       	movw	r26, r8
    1b74:	18 96       	adiw	r26, 0x08	; 8
    1b76:	2d 91       	ld	r18, X+
    1b78:	3c 91       	ld	r19, X
    1b7a:	19 97       	sbiw	r26, 0x09	; 9
    1b7c:	21 50       	subi	r18, 0x01	; 1
    1b7e:	31 09       	sbc	r19, r1
    1b80:	28 1b       	sub	r18, r24
    1b82:	39 0b       	sbc	r19, r25
    1b84:	86 0d       	add	r24, r6
    1b86:	97 1d       	adc	r25, r7
    1b88:	ac 01       	movw	r20, r24
    1b8a:	60 e8       	ldi	r22, 0x80	; 128
    1b8c:	82 01       	movw	r16, r4
    1b8e:	c1 01       	movw	r24, r2
    1b90:	0e 94 80 0c 	call	0x1900	; 0x1900 <__pad>
    1b94:	9c 01       	movw	r18, r24
    1b96:	f1 01       	movw	r30, r2
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 81       	ldd	r25, Z+1	; 0x01
    1b9c:	90 ff       	sbrs	r25, 0
    1b9e:	08 c0       	rjmp	.+16     	; 0x1bb0 <__fmt_o+0xca>
    1ba0:	d4 01       	movw	r26, r8
    1ba2:	12 96       	adiw	r26, 0x02	; 2
    1ba4:	8d 91       	ld	r24, X+
    1ba6:	9c 91       	ld	r25, X
    1ba8:	13 97       	sbiw	r26, 0x03	; 3
    1baa:	82 17       	cp	r24, r18
    1bac:	93 07       	cpc	r25, r19
    1bae:	0c f4       	brge	.+2      	; 0x1bb2 <__fmt_o+0xcc>
    1bb0:	c9 01       	movw	r24, r18
    1bb2:	22 96       	adiw	r28, 0x02	; 2
    1bb4:	e2 e1       	ldi	r30, 0x12	; 18
    1bb6:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__epilogue_restores__>

Disassembly of section .text.__cvt_u:

000017b6 <__cvt_u>:
    17b6:	a2 e1       	ldi	r26, 0x12	; 18
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e1 ee       	ldi	r30, 0xE1	; 225
    17bc:	fb e0       	ldi	r31, 0x0B	; 11
    17be:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__prologue_saves__>
    17c2:	fc 01       	movw	r30, r24
    17c4:	0a 8b       	std	Y+18, r16	; 0x12
    17c6:	1b 83       	std	Y+3, r17	; 0x03
    17c8:	2c 83       	std	Y+4, r18	; 0x04
    17ca:	73 2e       	mov	r7, r19
    17cc:	64 2e       	mov	r6, r20
    17ce:	55 2e       	mov	r5, r21
    17d0:	46 2e       	mov	r4, r22
    17d2:	7d 83       	std	Y+5, r23	; 0x05
    17d4:	cc 86       	std	Y+12, r12	; 0x0c
    17d6:	d8 86       	std	Y+8, r13	; 0x08
    17d8:	bf 82       	std	Y+7, r11	; 0x07
    17da:	ae 82       	std	Y+6, r10	; 0x06
    17dc:	86 81       	ldd	r24, Z+6	; 0x06
    17de:	97 81       	ldd	r25, Z+7	; 0x07
    17e0:	9b 87       	std	Y+11, r25	; 0x0b
    17e2:	8a 87       	std	Y+10, r24	; 0x0a
    17e4:	d5 01       	movw	r26, r10
    17e6:	4d 91       	ld	r20, X+
    17e8:	5c 91       	ld	r21, X
    17ea:	22 81       	ldd	r18, Z+2	; 0x02
    17ec:	33 81       	ldd	r19, Z+3	; 0x03
    17ee:	80 85       	ldd	r24, Z+8	; 0x08
    17f0:	91 85       	ldd	r25, Z+9	; 0x09
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	1c 01       	movw	r2, r24
    17f6:	37 ff       	sbrs	r19, 7
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <__cvt_u+0x48>
    17fa:	21 e0       	ldi	r18, 0x01	; 1
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	ea 85       	ldd	r30, Y+10	; 0x0a
    1800:	fb 85       	ldd	r31, Y+11	; 0x0b
    1802:	e8 0f       	add	r30, r24
    1804:	f9 1f       	adc	r31, r25
    1806:	10 82       	st	Z, r1
    1808:	47 01       	movw	r8, r14
    180a:	e1 e0       	ldi	r30, 0x01	; 1
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	fa 83       	std	Y+2, r31	; 0x02
    1810:	e9 83       	std	Y+1, r30	; 0x01
    1812:	c9 01       	movw	r24, r18
    1814:	8e 19       	sub	r24, r14
    1816:	9f 09       	sbc	r25, r15
    1818:	9e 87       	std	Y+14, r25	; 0x0e
    181a:	8d 87       	std	Y+13, r24	; 0x0d
    181c:	da 01       	movw	r26, r20
    181e:	a2 70       	andi	r26, 0x02	; 2
    1820:	bb 27       	eor	r27, r27
    1822:	b8 8b       	std	Y+16, r27	; 0x10
    1824:	af 87       	std	Y+15, r26	; 0x0f
    1826:	b8 85       	ldd	r27, Y+8	; 0x08
    1828:	bb 0f       	add	r27, r27
    182a:	bb 0b       	sbc	r27, r27
    182c:	b9 8b       	std	Y+17, r27	; 0x11
    182e:	12 14       	cp	r1, r2
    1830:	13 04       	cpc	r1, r3
    1832:	74 f0       	brlt	.+28     	; 0x1850 <__cvt_u+0x9a>
    1834:	a9 81       	ldd	r26, Y+1	; 0x01
    1836:	ba 81       	ldd	r27, Y+2	; 0x02
    1838:	ab 2b       	or	r26, r27
    183a:	09 f0       	breq	.+2      	; 0x183e <__cvt_u+0x88>
    183c:	5c c0       	rjmp	.+184    	; 0x18f6 <__cvt_u+0x140>
    183e:	ae 81       	ldd	r26, Y+6	; 0x06
    1840:	bf 81       	ldd	r27, Y+7	; 0x07
    1842:	8d 91       	ld	r24, X+
    1844:	9c 91       	ld	r25, X
    1846:	11 97       	sbiw	r26, 0x01	; 1
    1848:	8f 7e       	andi	r24, 0xEF	; 239
    184a:	8d 93       	st	X+, r24
    184c:	9c 93       	st	X, r25
    184e:	53 c0       	rjmp	.+166    	; 0x18f6 <__cvt_u+0x140>
    1850:	2a 89       	ldd	r18, Y+18	; 0x12
    1852:	3b 81       	ldd	r19, Y+3	; 0x03
    1854:	4c 81       	ldd	r20, Y+4	; 0x04
    1856:	57 2d       	mov	r21, r7
    1858:	66 2d       	mov	r22, r6
    185a:	75 2d       	mov	r23, r5
    185c:	84 2d       	mov	r24, r4
    185e:	9d 81       	ldd	r25, Y+5	; 0x05
    1860:	a0 e0       	ldi	r26, 0x00	; 0
    1862:	0e 94 a9 13 	call	0x2752	; 0x2752 <__cmpdi2_s8>
    1866:	b1 f1       	breq	.+108    	; 0x18d4 <__cvt_u+0x11e>
    1868:	e1 e0       	ldi	r30, 0x01	; 1
    186a:	2e 1a       	sub	r2, r30
    186c:	31 08       	sbc	r3, r1
    186e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1870:	f9 87       	std	Y+9, r31	; 0x09
    1872:	af 2e       	mov	r10, r31
    1874:	b8 84       	ldd	r11, Y+8	; 0x08
    1876:	c9 88       	ldd	r12, Y+17	; 0x11
    1878:	dc 2c       	mov	r13, r12
    187a:	ec 2c       	mov	r14, r12
    187c:	fc 2c       	mov	r15, r12
    187e:	0c 2d       	mov	r16, r12
    1880:	1c 2d       	mov	r17, r12
    1882:	2a 89       	ldd	r18, Y+18	; 0x12
    1884:	3b 81       	ldd	r19, Y+3	; 0x03
    1886:	4c 81       	ldd	r20, Y+4	; 0x04
    1888:	57 2d       	mov	r21, r7
    188a:	66 2d       	mov	r22, r6
    188c:	75 2d       	mov	r23, r5
    188e:	84 2d       	mov	r24, r4
    1890:	9d 81       	ldd	r25, Y+5	; 0x05
    1892:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__umoddi3>
    1896:	c9 01       	movw	r24, r18
    1898:	29 83       	std	Y+1, r18	; 0x01
    189a:	9a 83       	std	Y+2, r25	; 0x02
    189c:	ea 85       	ldd	r30, Y+10	; 0x0a
    189e:	fb 85       	ldd	r31, Y+11	; 0x0b
    18a0:	e2 0d       	add	r30, r2
    18a2:	f3 1d       	adc	r31, r3
    18a4:	80 5d       	subi	r24, 0xD0	; 208
    18a6:	80 83       	st	Z, r24
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	88 1a       	sub	r8, r24
    18ac:	91 08       	sbc	r9, r1
    18ae:	2a 89       	ldd	r18, Y+18	; 0x12
    18b0:	3b 81       	ldd	r19, Y+3	; 0x03
    18b2:	4c 81       	ldd	r20, Y+4	; 0x04
    18b4:	57 2d       	mov	r21, r7
    18b6:	66 2d       	mov	r22, r6
    18b8:	75 2d       	mov	r23, r5
    18ba:	84 2d       	mov	r24, r4
    18bc:	9d 81       	ldd	r25, Y+5	; 0x05
    18be:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__udivdi3>
    18c2:	2a 8b       	std	Y+18, r18	; 0x12
    18c4:	3b 83       	std	Y+3, r19	; 0x03
    18c6:	4c 83       	std	Y+4, r20	; 0x04
    18c8:	75 2e       	mov	r7, r21
    18ca:	66 2e       	mov	r6, r22
    18cc:	57 2e       	mov	r5, r23
    18ce:	48 2e       	mov	r4, r24
    18d0:	9d 83       	std	Y+5, r25	; 0x05
    18d2:	ad cf       	rjmp	.-166    	; 0x182e <__cvt_u+0x78>
    18d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d8:	88 0d       	add	r24, r8
    18da:	99 1d       	adc	r25, r9
    18dc:	18 16       	cp	r1, r24
    18de:	19 06       	cpc	r1, r25
    18e0:	1c f2       	brlt	.-122    	; 0x1868 <__cvt_u+0xb2>
    18e2:	18 14       	cp	r1, r8
    18e4:	19 04       	cpc	r1, r9
    18e6:	0c f0       	brlt	.+2      	; 0x18ea <__cvt_u+0x134>
    18e8:	a5 cf       	rjmp	.-182    	; 0x1834 <__cvt_u+0x7e>
    18ea:	ef 85       	ldd	r30, Y+15	; 0x0f
    18ec:	f8 89       	ldd	r31, Y+16	; 0x10
    18ee:	ef 2b       	or	r30, r31
    18f0:	09 f0       	breq	.+2      	; 0x18f4 <__cvt_u+0x13e>
    18f2:	ba cf       	rjmp	.-140    	; 0x1868 <__cvt_u+0xb2>
    18f4:	9f cf       	rjmp	.-194    	; 0x1834 <__cvt_u+0x7e>
    18f6:	c1 01       	movw	r24, r2
    18f8:	62 96       	adiw	r28, 0x12	; 18
    18fa:	e2 e1       	ldi	r30, 0x12	; 18
    18fc:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__epilogue_restores__>

Disassembly of section .text.__fmt_u:

00001c84 <__fmt_u>:
    1c84:	a2 e0       	ldi	r26, 0x02	; 2
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e8 e4       	ldi	r30, 0x48	; 72
    1c8a:	fe e0       	ldi	r31, 0x0E	; 14
    1c8c:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__prologue_saves__>
    1c90:	3c 01       	movw	r6, r24
    1c92:	4b 01       	movw	r8, r22
    1c94:	fa 01       	movw	r30, r20
    1c96:	db 01       	movw	r26, r22
    1c98:	12 96       	adiw	r26, 0x02	; 2
    1c9a:	2d 91       	ld	r18, X+
    1c9c:	3c 91       	ld	r19, X
    1c9e:	13 97       	sbiw	r26, 0x03	; 3
    1ca0:	14 96       	adiw	r26, 0x04	; 4
    1ca2:	4d 90       	ld	r4, X+
    1ca4:	5c 90       	ld	r5, X
    1ca6:	15 97       	sbiw	r26, 0x05	; 5
    1ca8:	8d 91       	ld	r24, X+
    1caa:	9c 91       	ld	r25, X
    1cac:	11 97       	sbiw	r26, 0x01	; 1
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	16 96       	adiw	r26, 0x06	; 6
    1cb4:	2d 90       	ld	r2, X+
    1cb6:	3c 90       	ld	r3, X
    1cb8:	17 97       	sbiw	r26, 0x07	; 7
    1cba:	37 fd       	sbrc	r19, 7
    1cbc:	03 c0       	rjmp	.+6      	; 0x1cc4 <__fmt_u+0x40>
    1cbe:	8d 7f       	andi	r24, 0xFD	; 253
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	00 81       	ld	r16, Z
    1cc6:	11 81       	ldd	r17, Z+1	; 0x01
    1cc8:	22 81       	ldd	r18, Z+2	; 0x02
    1cca:	33 81       	ldd	r19, Z+3	; 0x03
    1ccc:	44 81       	ldd	r20, Z+4	; 0x04
    1cce:	55 81       	ldd	r21, Z+5	; 0x05
    1cd0:	66 81       	ldd	r22, Z+6	; 0x06
    1cd2:	77 81       	ldd	r23, Z+7	; 0x07
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	31 96       	adiw	r30, 0x01	; 1
    1cd8:	5f 01       	movw	r10, r30
    1cda:	8a e0       	ldi	r24, 0x0A	; 10
    1cdc:	c8 2e       	mov	r12, r24
    1cde:	d1 2c       	mov	r13, r1
    1ce0:	72 01       	movw	r14, r4
    1ce2:	c4 01       	movw	r24, r8
    1ce4:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__cvt_u>
    1ce8:	e9 80       	ldd	r14, Y+1	; 0x01
    1cea:	fa 80       	ldd	r15, Y+2	; 0x02
    1cec:	d4 01       	movw	r26, r8
    1cee:	18 96       	adiw	r26, 0x08	; 8
    1cf0:	2d 91       	ld	r18, X+
    1cf2:	3c 91       	ld	r19, X
    1cf4:	19 97       	sbiw	r26, 0x09	; 9
    1cf6:	21 50       	subi	r18, 0x01	; 1
    1cf8:	31 09       	sbc	r19, r1
    1cfa:	28 1b       	sub	r18, r24
    1cfc:	39 0b       	sbc	r19, r25
    1cfe:	82 0d       	add	r24, r2
    1d00:	93 1d       	adc	r25, r3
    1d02:	ac 01       	movw	r20, r24
    1d04:	60 e8       	ldi	r22, 0x80	; 128
    1d06:	82 01       	movw	r16, r4
    1d08:	c3 01       	movw	r24, r6
    1d0a:	0e 94 80 0c 	call	0x1900	; 0x1900 <__pad>
    1d0e:	9c 01       	movw	r18, r24
    1d10:	f3 01       	movw	r30, r6
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	90 ff       	sbrs	r25, 0
    1d18:	08 c0       	rjmp	.+16     	; 0x1d2a <__fmt_u+0xa6>
    1d1a:	d4 01       	movw	r26, r8
    1d1c:	12 96       	adiw	r26, 0x02	; 2
    1d1e:	8d 91       	ld	r24, X+
    1d20:	9c 91       	ld	r25, X
    1d22:	13 97       	sbiw	r26, 0x03	; 3
    1d24:	82 17       	cp	r24, r18
    1d26:	93 07       	cpc	r25, r19
    1d28:	0c f4       	brge	.+2      	; 0x1d2c <__fmt_u+0xa8>
    1d2a:	c9 01       	movw	r24, r18
    1d2c:	22 96       	adiw	r28, 0x02	; 2
    1d2e:	e2 e1       	ldi	r30, 0x12	; 18
    1d30:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__epilogue_restores__>

Disassembly of section .text.__fmt_x:

00000e3e <__fmt_x>:
     e3e:	a4 e1       	ldi	r26, 0x14	; 20
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e5 e2       	ldi	r30, 0x25	; 37
     e44:	f7 e0       	ldi	r31, 0x07	; 7
     e46:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__prologue_saves__>
     e4a:	98 87       	std	Y+8, r25	; 0x08
     e4c:	8f 83       	std	Y+7, r24	; 0x07
     e4e:	7a 83       	std	Y+2, r23	; 0x02
     e50:	69 83       	std	Y+1, r22	; 0x01
     e52:	5c 8b       	std	Y+20, r21	; 0x14
     e54:	4b 8b       	std	Y+19, r20	; 0x13
     e56:	12 2f       	mov	r17, r18
     e58:	db 01       	movw	r26, r22
     e5a:	12 96       	adiw	r26, 0x02	; 2
     e5c:	ed 91       	ld	r30, X+
     e5e:	fc 91       	ld	r31, X
     e60:	13 97       	sbiw	r26, 0x03	; 3
     e62:	14 96       	adiw	r26, 0x04	; 4
     e64:	2d 91       	ld	r18, X+
     e66:	3c 91       	ld	r19, X
     e68:	15 97       	sbiw	r26, 0x05	; 5
     e6a:	3e 83       	std	Y+6, r19	; 0x06
     e6c:	2d 83       	std	Y+5, r18	; 0x05
     e6e:	ed 90       	ld	r14, X+
     e70:	fc 90       	ld	r15, X
     e72:	11 97       	sbiw	r26, 0x01	; 1
     e74:	16 96       	adiw	r26, 0x06	; 6
     e76:	2d 90       	ld	r2, X+
     e78:	3c 90       	ld	r3, X
     e7a:	17 97       	sbiw	r26, 0x07	; 7
     e7c:	f7 fd       	sbrc	r31, 7
     e7e:	03 c0       	rjmp	.+6      	; 0xe86 <__fmt_x+0x48>
     e80:	e8 94       	clt
     e82:	e1 f8       	bld	r14, 1
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <__fmt_x+0x4c>
     e86:	e1 e0       	ldi	r30, 0x01	; 1
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	c7 01       	movw	r24, r14
     e8c:	80 71       	andi	r24, 0x10	; 16
     e8e:	99 27       	eor	r25, r25
     e90:	9a 87       	std	Y+10, r25	; 0x0a
     e92:	89 87       	std	Y+9, r24	; 0x09
     e94:	e4 fe       	sbrs	r14, 4
     e96:	1f c0       	rjmp	.+62     	; 0xed6 <__fmt_x+0x98>
     e98:	ab 89       	ldd	r26, Y+19	; 0x13
     e9a:	bc 89       	ldd	r27, Y+20	; 0x14
     e9c:	2c 91       	ld	r18, X
     e9e:	11 96       	adiw	r26, 0x01	; 1
     ea0:	3c 91       	ld	r19, X
     ea2:	11 97       	sbiw	r26, 0x01	; 1
     ea4:	12 96       	adiw	r26, 0x02	; 2
     ea6:	4c 91       	ld	r20, X
     ea8:	12 97       	sbiw	r26, 0x02	; 2
     eaa:	13 96       	adiw	r26, 0x03	; 3
     eac:	5c 91       	ld	r21, X
     eae:	13 97       	sbiw	r26, 0x03	; 3
     eb0:	14 96       	adiw	r26, 0x04	; 4
     eb2:	6c 91       	ld	r22, X
     eb4:	14 97       	sbiw	r26, 0x04	; 4
     eb6:	15 96       	adiw	r26, 0x05	; 5
     eb8:	7c 91       	ld	r23, X
     eba:	15 97       	sbiw	r26, 0x05	; 5
     ebc:	16 96       	adiw	r26, 0x06	; 6
     ebe:	8c 91       	ld	r24, X
     ec0:	16 97       	sbiw	r26, 0x06	; 6
     ec2:	17 96       	adiw	r26, 0x07	; 7
     ec4:	9c 91       	ld	r25, X
     ec6:	a0 e0       	ldi	r26, 0x00	; 0
     ec8:	0e 94 a9 13 	call	0x2752	; 0x2752 <__cmpdi2_s8>
     ecc:	21 f0       	breq	.+8      	; 0xed6 <__fmt_x+0x98>
     ece:	8d 81       	ldd	r24, Y+5	; 0x05
     ed0:	9e 81       	ldd	r25, Y+6	; 0x06
     ed2:	02 97       	sbiw	r24, 0x02	; 2
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <__fmt_x+0x9c>
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	97 01       	movw	r18, r14
     edc:	28 70       	andi	r18, 0x08	; 8
     ede:	33 27       	eor	r19, r19
     ee0:	3c 87       	std	Y+12, r19	; 0x0c
     ee2:	2b 87       	std	Y+11, r18	; 0x0b
     ee4:	e3 fc       	sbrc	r14, 3
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	ab 89       	ldd	r26, Y+19	; 0x13
     eea:	bc 89       	ldd	r27, Y+20	; 0x14
     eec:	4c 90       	ld	r4, X
     eee:	11 96       	adiw	r26, 0x01	; 1
     ef0:	5c 90       	ld	r5, X
     ef2:	11 97       	sbiw	r26, 0x01	; 1
     ef4:	12 96       	adiw	r26, 0x02	; 2
     ef6:	6c 90       	ld	r6, X
     ef8:	12 97       	sbiw	r26, 0x02	; 2
     efa:	13 96       	adiw	r26, 0x03	; 3
     efc:	7c 90       	ld	r7, X
     efe:	13 97       	sbiw	r26, 0x03	; 3
     f00:	14 96       	adiw	r26, 0x04	; 4
     f02:	8c 90       	ld	r8, X
     f04:	14 97       	sbiw	r26, 0x04	; 4
     f06:	15 96       	adiw	r26, 0x05	; 5
     f08:	9c 90       	ld	r9, X
     f0a:	15 97       	sbiw	r26, 0x05	; 5
     f0c:	16 96       	adiw	r26, 0x06	; 6
     f0e:	ac 90       	ld	r10, X
     f10:	16 97       	sbiw	r26, 0x06	; 6
     f12:	17 96       	adiw	r26, 0x07	; 7
     f14:	bc 90       	ld	r11, X
     f16:	a9 81       	ldd	r26, Y+1	; 0x01
     f18:	ba 81       	ldd	r27, Y+2	; 0x02
     f1a:	18 96       	adiw	r26, 0x08	; 8
     f1c:	cd 90       	ld	r12, X+
     f1e:	dc 90       	ld	r13, X
     f20:	19 97       	sbiw	r26, 0x09	; 9
     f22:	b1 e0       	ldi	r27, 0x01	; 1
     f24:	cb 1a       	sub	r12, r27
     f26:	d1 08       	sbc	r13, r1
     f28:	d1 01       	movw	r26, r2
     f2a:	ac 0d       	add	r26, r12
     f2c:	bd 1d       	adc	r27, r13
     f2e:	1c 92       	st	X, r1
     f30:	9c 83       	std	Y+4, r25	; 0x04
     f32:	8b 83       	std	Y+3, r24	; 0x03
     f34:	9f 01       	movw	r18, r30
     f36:	28 1b       	sub	r18, r24
     f38:	39 0b       	sbc	r19, r25
     f3a:	3e 87       	std	Y+14, r19	; 0x0e
     f3c:	2d 87       	std	Y+13, r18	; 0x0d
     f3e:	c7 01       	movw	r24, r14
     f40:	82 70       	andi	r24, 0x02	; 2
     f42:	99 27       	eor	r25, r25
     f44:	98 8b       	std	Y+16, r25	; 0x10
     f46:	8f 87       	std	Y+15, r24	; 0x0f
     f48:	81 2f       	mov	r24, r17
     f4a:	01 2e       	mov	r0, r17
     f4c:	00 0c       	add	r0, r0
     f4e:	99 0b       	sbc	r25, r25
     f50:	dc 01       	movw	r26, r24
     f52:	a1 54       	subi	r26, 0x41	; 65
     f54:	b1 09       	sbc	r27, r1
     f56:	ba 8b       	std	Y+18, r27	; 0x12
     f58:	a9 8b       	std	Y+17, r26	; 0x11
     f5a:	32 e0       	ldi	r19, 0x02	; 2
     f5c:	c3 16       	cp	r12, r19
     f5e:	d1 04       	cpc	r13, r1
     f60:	34 f4       	brge	.+12     	; 0xf6e <__fmt_x+0x130>
     f62:	89 85       	ldd	r24, Y+9	; 0x09
     f64:	9a 85       	ldd	r25, Y+10	; 0x0a
     f66:	89 2b       	or	r24, r25
     f68:	09 f0       	breq	.+2      	; 0xf6c <__fmt_x+0x12e>
     f6a:	4c c0       	rjmp	.+152    	; 0x1004 <__fmt_x+0x1c6>
     f6c:	73 c0       	rjmp	.+230    	; 0x1054 <__fmt_x+0x216>
     f6e:	92 01       	movw	r18, r4
     f70:	a3 01       	movw	r20, r6
     f72:	b4 01       	movw	r22, r8
     f74:	c5 01       	movw	r24, r10
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	0e 94 a9 13 	call	0x2752	; 0x2752 <__cmpdi2_s8>
     f7c:	81 f1       	breq	.+96     	; 0xfde <__fmt_x+0x1a0>
     f7e:	b1 e0       	ldi	r27, 0x01	; 1
     f80:	cb 1a       	sub	r12, r27
     f82:	d1 08       	sbc	r13, r1
     f84:	c2 01       	movw	r24, r4
     f86:	8f 70       	andi	r24, 0x0F	; 15
     f88:	99 27       	eor	r25, r25
     f8a:	8a 30       	cpi	r24, 0x0A	; 10
     f8c:	91 05       	cpc	r25, r1
     f8e:	14 f4       	brge	.+4      	; 0xf94 <__fmt_x+0x156>
     f90:	c0 96       	adiw	r24, 0x30	; 48
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <__fmt_x+0x15a>
     f94:	89 5a       	subi	r24, 0xA9	; 169
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	e9 89       	ldd	r30, Y+17	; 0x11
     f9a:	fa 89       	ldd	r31, Y+18	; 0x12
     f9c:	7a 97       	sbiw	r30, 0x1a	; 26
     f9e:	48 f4       	brcc	.+18     	; 0xfb2 <__fmt_x+0x174>
     fa0:	9c 01       	movw	r18, r24
     fa2:	20 62       	ori	r18, 0x20	; 32
     fa4:	21 56       	subi	r18, 0x61	; 97
     fa6:	31 09       	sbc	r19, r1
     fa8:	2a 31       	cpi	r18, 0x1A	; 26
     faa:	31 05       	cpc	r19, r1
     fac:	10 f4       	brcc	.+4      	; 0xfb2 <__fmt_x+0x174>
     fae:	0e 94 e7 13 	call	0x27ce	; 0x27ce <toupper>
     fb2:	f1 01       	movw	r30, r2
     fb4:	ec 0d       	add	r30, r12
     fb6:	fd 1d       	adc	r31, r13
     fb8:	80 83       	st	Z, r24
     fba:	2b 81       	ldd	r18, Y+3	; 0x03
     fbc:	3c 81       	ldd	r19, Y+4	; 0x04
     fbe:	21 50       	subi	r18, 0x01	; 1
     fc0:	31 09       	sbc	r19, r1
     fc2:	3c 83       	std	Y+4, r19	; 0x04
     fc4:	2b 83       	std	Y+3, r18	; 0x03
     fc6:	92 01       	movw	r18, r4
     fc8:	a3 01       	movw	r20, r6
     fca:	b4 01       	movw	r22, r8
     fcc:	c5 01       	movw	r24, r10
     fce:	04 e0       	ldi	r16, 0x04	; 4
     fd0:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__lshrdi3>
     fd4:	29 01       	movw	r4, r18
     fd6:	3a 01       	movw	r6, r20
     fd8:	4b 01       	movw	r8, r22
     fda:	5c 01       	movw	r10, r24
     fdc:	be cf       	rjmp	.-132    	; 0xf5a <__fmt_x+0x11c>
     fde:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe2:	ab 81       	ldd	r26, Y+3	; 0x03
     fe4:	bc 81       	ldd	r27, Y+4	; 0x04
     fe6:	8a 0f       	add	r24, r26
     fe8:	9b 1f       	adc	r25, r27
     fea:	18 16       	cp	r1, r24
     fec:	19 06       	cpc	r1, r25
     fee:	3c f2       	brlt	.-114    	; 0xf7e <__fmt_x+0x140>
     ff0:	1a 16       	cp	r1, r26
     ff2:	1b 06       	cpc	r1, r27
     ff4:	0c f0       	brlt	.+2      	; 0xff8 <__fmt_x+0x1ba>
     ff6:	b5 cf       	rjmp	.-150    	; 0xf62 <__fmt_x+0x124>
     ff8:	ef 85       	ldd	r30, Y+15	; 0x0f
     ffa:	f8 89       	ldd	r31, Y+16	; 0x10
     ffc:	ef 2b       	or	r30, r31
     ffe:	09 f0       	breq	.+2      	; 0x1002 <__fmt_x+0x1c4>
    1000:	be cf       	rjmp	.-132    	; 0xf7e <__fmt_x+0x140>
    1002:	af cf       	rjmp	.-162    	; 0xf62 <__fmt_x+0x124>
    1004:	ab 89       	ldd	r26, Y+19	; 0x13
    1006:	bc 89       	ldd	r27, Y+20	; 0x14
    1008:	2c 91       	ld	r18, X
    100a:	11 96       	adiw	r26, 0x01	; 1
    100c:	3c 91       	ld	r19, X
    100e:	11 97       	sbiw	r26, 0x01	; 1
    1010:	12 96       	adiw	r26, 0x02	; 2
    1012:	4c 91       	ld	r20, X
    1014:	12 97       	sbiw	r26, 0x02	; 2
    1016:	13 96       	adiw	r26, 0x03	; 3
    1018:	5c 91       	ld	r21, X
    101a:	13 97       	sbiw	r26, 0x03	; 3
    101c:	14 96       	adiw	r26, 0x04	; 4
    101e:	6c 91       	ld	r22, X
    1020:	14 97       	sbiw	r26, 0x04	; 4
    1022:	15 96       	adiw	r26, 0x05	; 5
    1024:	7c 91       	ld	r23, X
    1026:	15 97       	sbiw	r26, 0x05	; 5
    1028:	16 96       	adiw	r26, 0x06	; 6
    102a:	8c 91       	ld	r24, X
    102c:	16 97       	sbiw	r26, 0x06	; 6
    102e:	17 96       	adiw	r26, 0x07	; 7
    1030:	9c 91       	ld	r25, X
    1032:	a0 e0       	ldi	r26, 0x00	; 0
    1034:	0e 94 a9 13 	call	0x2752	; 0x2752 <__cmpdi2_s8>
    1038:	69 f0       	breq	.+26     	; 0x1054 <__fmt_x+0x216>
    103a:	f1 01       	movw	r30, r2
    103c:	ec 0d       	add	r30, r12
    103e:	fd 1d       	adc	r31, r13
    1040:	31 97       	sbiw	r30, 0x01	; 1
    1042:	10 83       	st	Z, r17
    1044:	b2 e0       	ldi	r27, 0x02	; 2
    1046:	cb 1a       	sub	r12, r27
    1048:	d1 08       	sbc	r13, r1
    104a:	f1 01       	movw	r30, r2
    104c:	ec 0d       	add	r30, r12
    104e:	fd 1d       	adc	r31, r13
    1050:	80 e3       	ldi	r24, 0x30	; 48
    1052:	80 83       	st	Z, r24
    1054:	eb 85       	ldd	r30, Y+11	; 0x0b
    1056:	fc 85       	ldd	r31, Y+12	; 0x0c
    1058:	ef 2b       	or	r30, r31
    105a:	41 f0       	breq	.+16     	; 0x106c <__fmt_x+0x22e>
    105c:	f1 e0       	ldi	r31, 0x01	; 1
    105e:	cf 1a       	sub	r12, r31
    1060:	d1 08       	sbc	r13, r1
    1062:	f1 01       	movw	r30, r2
    1064:	ec 0d       	add	r30, r12
    1066:	fd 1d       	adc	r31, r13
    1068:	80 e2       	ldi	r24, 0x20	; 32
    106a:	80 83       	st	Z, r24
    106c:	a9 81       	ldd	r26, Y+1	; 0x01
    106e:	ba 81       	ldd	r27, Y+2	; 0x02
    1070:	18 96       	adiw	r26, 0x08	; 8
    1072:	2d 91       	ld	r18, X+
    1074:	3c 91       	ld	r19, X
    1076:	19 97       	sbiw	r26, 0x09	; 9
    1078:	21 50       	subi	r18, 0x01	; 1
    107a:	31 09       	sbc	r19, r1
    107c:	2c 19       	sub	r18, r12
    107e:	3d 09       	sbc	r19, r13
    1080:	c2 0c       	add	r12, r2
    1082:	d3 1c       	adc	r13, r3
    1084:	a6 01       	movw	r20, r12
    1086:	60 e8       	ldi	r22, 0x80	; 128
    1088:	0d 81       	ldd	r16, Y+5	; 0x05
    108a:	1e 81       	ldd	r17, Y+6	; 0x06
    108c:	8f 81       	ldd	r24, Y+7	; 0x07
    108e:	98 85       	ldd	r25, Y+8	; 0x08
    1090:	0e 94 80 0c 	call	0x1900	; 0x1900 <__pad>
    1094:	9c 01       	movw	r18, r24
    1096:	ef 81       	ldd	r30, Y+7	; 0x07
    1098:	f8 85       	ldd	r31, Y+8	; 0x08
    109a:	80 81       	ld	r24, Z
    109c:	91 81       	ldd	r25, Z+1	; 0x01
    109e:	90 ff       	sbrs	r25, 0
    10a0:	09 c0       	rjmp	.+18     	; 0x10b4 <__fmt_x+0x276>
    10a2:	a9 81       	ldd	r26, Y+1	; 0x01
    10a4:	ba 81       	ldd	r27, Y+2	; 0x02
    10a6:	12 96       	adiw	r26, 0x02	; 2
    10a8:	8d 91       	ld	r24, X+
    10aa:	9c 91       	ld	r25, X
    10ac:	13 97       	sbiw	r26, 0x03	; 3
    10ae:	82 17       	cp	r24, r18
    10b0:	93 07       	cpc	r25, r19
    10b2:	0c f4       	brge	.+2      	; 0x10b6 <__fmt_x+0x278>
    10b4:	c9 01       	movw	r24, r18
    10b6:	64 96       	adiw	r28, 0x14	; 20
    10b8:	e2 e1       	ldi	r30, 0x12	; 18
    10ba:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__epilogue_restores__>

Disassembly of section .text.__pop_float:

00002474 <__pop_float>:
    2474:	fa 01       	movw	r30, r20
    2476:	60 38       	cpi	r22, 0x80	; 128
    2478:	71 05       	cpc	r23, r1
    247a:	cc f0       	brlt	.+50     	; 0x24ae <__pop_float+0x3a>
    247c:	62 38       	cpi	r22, 0x82	; 130
    247e:	71 05       	cpc	r23, r1
    2480:	1c f0       	brlt	.+6      	; 0x2488 <__pop_float+0x14>
    2482:	63 38       	cpi	r22, 0x83	; 131
    2484:	71 05       	cpc	r23, r1
    2486:	99 f4       	brne	.+38     	; 0x24ae <__pop_float+0x3a>
    2488:	a0 81       	ld	r26, Z
    248a:	b1 81       	ldd	r27, Z+1	; 0x01
    248c:	9d 01       	movw	r18, r26
    248e:	2c 5f       	subi	r18, 0xFC	; 252
    2490:	3f 4f       	sbci	r19, 0xFF	; 255
    2492:	31 83       	std	Z+1, r19	; 0x01
    2494:	20 83       	st	Z, r18
    2496:	4d 91       	ld	r20, X+
    2498:	5d 91       	ld	r21, X+
    249a:	6d 91       	ld	r22, X+
    249c:	7c 91       	ld	r23, X
    249e:	fc 01       	movw	r30, r24
    24a0:	40 83       	st	Z, r20
    24a2:	51 83       	std	Z+1, r21	; 0x01
    24a4:	62 83       	std	Z+2, r22	; 0x02
    24a6:	73 83       	std	Z+3, r23	; 0x03
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	08 95       	ret
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	08 95       	ret

Disassembly of section .text.__pop_int:

00001644 <__pop_int>:
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	fc 01       	movw	r30, r24
    164e:	d9 01       	movw	r26, r18
    1650:	68 38       	cpi	r22, 0x88	; 136
    1652:	71 05       	cpc	r23, r1
    1654:	31 f1       	breq	.+76     	; 0x16a2 <__pop_int+0x5e>
    1656:	94 f4       	brge	.+36     	; 0x167c <__pop_int+0x38>
    1658:	61 38       	cpi	r22, 0x81	; 129
    165a:	71 05       	cpc	r23, r1
    165c:	b1 f1       	breq	.+108    	; 0x16ca <__pop_int+0x86>
    165e:	2c f4       	brge	.+10     	; 0x166a <__pop_int+0x26>
    1660:	60 38       	cpi	r22, 0x80	; 128
    1662:	71 05       	cpc	r23, r1
    1664:	09 f4       	brne	.+2      	; 0x1668 <__pop_int+0x24>
    1666:	78 c0       	rjmp	.+240    	; 0x1758 <__pop_int+0x114>
    1668:	9f c0       	rjmp	.+318    	; 0x17a8 <__pop_int+0x164>
    166a:	62 38       	cpi	r22, 0x82	; 130
    166c:	71 05       	cpc	r23, r1
    166e:	09 f4       	brne	.+2      	; 0x1672 <__pop_int+0x2e>
    1670:	59 c0       	rjmp	.+178    	; 0x1724 <__pop_int+0xe0>
    1672:	64 38       	cpi	r22, 0x84	; 132
    1674:	71 05       	cpc	r23, r1
    1676:	09 f4       	brne	.+2      	; 0x167a <__pop_int+0x36>
    1678:	6f c0       	rjmp	.+222    	; 0x1758 <__pop_int+0x114>
    167a:	96 c0       	rjmp	.+300    	; 0x17a8 <__pop_int+0x164>
    167c:	60 3a       	cpi	r22, 0xA0	; 160
    167e:	71 05       	cpc	r23, r1
    1680:	09 f4       	brne	.+2      	; 0x1684 <__pop_int+0x40>
    1682:	48 c0       	rjmp	.+144    	; 0x1714 <__pop_int+0xd0>
    1684:	2c f4       	brge	.+10     	; 0x1690 <__pop_int+0x4c>
    1686:	60 39       	cpi	r22, 0x90	; 144
    1688:	71 05       	cpc	r23, r1
    168a:	09 f4       	brne	.+2      	; 0x168e <__pop_int+0x4a>
    168c:	4b c0       	rjmp	.+150    	; 0x1724 <__pop_int+0xe0>
    168e:	8c c0       	rjmp	.+280    	; 0x17a8 <__pop_int+0x164>
    1690:	60 3c       	cpi	r22, 0xC0	; 192
    1692:	71 05       	cpc	r23, r1
    1694:	09 f4       	brne	.+2      	; 0x1698 <__pop_int+0x54>
    1696:	76 c0       	rjmp	.+236    	; 0x1784 <__pop_int+0x140>
    1698:	60 3f       	cpi	r22, 0xF0	; 240
    169a:	71 05       	cpc	r23, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <__pop_int+0x5c>
    169e:	72 c0       	rjmp	.+228    	; 0x1784 <__pop_int+0x140>
    16a0:	83 c0       	rjmp	.+262    	; 0x17a8 <__pop_int+0x164>
    16a2:	cd 91       	ld	r28, X+
    16a4:	dc 91       	ld	r29, X
    16a6:	11 97       	sbiw	r26, 0x01	; 1
    16a8:	ce 01       	movw	r24, r28
    16aa:	02 96       	adiw	r24, 0x02	; 2
    16ac:	8d 93       	st	X+, r24
    16ae:	9c 93       	st	X, r25
    16b0:	45 2b       	or	r20, r21
    16b2:	39 f0       	breq	.+14     	; 0x16c2 <__pop_int+0x7e>
    16b4:	98 81       	ld	r25, Y
    16b6:	89 2f       	mov	r24, r25
    16b8:	88 0f       	add	r24, r24
    16ba:	88 0b       	sbc	r24, r24
    16bc:	90 83       	st	Z, r25
    16be:	81 83       	std	Z+1, r24	; 0x01
    16c0:	5b c0       	rjmp	.+182    	; 0x1778 <__pop_int+0x134>
    16c2:	88 81       	ld	r24, Y
    16c4:	80 83       	st	Z, r24
    16c6:	11 82       	std	Z+1, r1	; 0x01
    16c8:	68 c0       	rjmp	.+208    	; 0x179a <__pop_int+0x156>
    16ca:	cd 91       	ld	r28, X+
    16cc:	dc 91       	ld	r29, X
    16ce:	11 97       	sbiw	r26, 0x01	; 1
    16d0:	ce 01       	movw	r24, r28
    16d2:	04 96       	adiw	r24, 0x04	; 4
    16d4:	8d 93       	st	X+, r24
    16d6:	9c 93       	st	X, r25
    16d8:	45 2b       	or	r20, r21
    16da:	99 f0       	breq	.+38     	; 0x1702 <__pop_int+0xbe>
    16dc:	88 81       	ld	r24, Y
    16de:	99 81       	ldd	r25, Y+1	; 0x01
    16e0:	aa 81       	ldd	r26, Y+2	; 0x02
    16e2:	bb 81       	ldd	r27, Y+3	; 0x03
    16e4:	ac 01       	movw	r20, r24
    16e6:	bd 01       	movw	r22, r26
    16e8:	77 0f       	add	r23, r23
    16ea:	44 0b       	sbc	r20, r20
    16ec:	54 2f       	mov	r21, r20
    16ee:	ba 01       	movw	r22, r20
    16f0:	80 83       	st	Z, r24
    16f2:	91 83       	std	Z+1, r25	; 0x01
    16f4:	a2 83       	std	Z+2, r26	; 0x02
    16f6:	b3 83       	std	Z+3, r27	; 0x03
    16f8:	44 83       	std	Z+4, r20	; 0x04
    16fa:	45 83       	std	Z+5, r20	; 0x05
    16fc:	46 83       	std	Z+6, r20	; 0x06
    16fe:	47 83       	std	Z+7, r20	; 0x07
    1700:	28 c0       	rjmp	.+80     	; 0x1752 <__pop_int+0x10e>
    1702:	08 81       	ld	r16, Y
    1704:	19 81       	ldd	r17, Y+1	; 0x01
    1706:	2a 81       	ldd	r18, Y+2	; 0x02
    1708:	3b 81       	ldd	r19, Y+3	; 0x03
    170a:	00 83       	st	Z, r16
    170c:	11 83       	std	Z+1, r17	; 0x01
    170e:	22 83       	std	Z+2, r18	; 0x02
    1710:	33 83       	std	Z+3, r19	; 0x03
    1712:	45 c0       	rjmp	.+138    	; 0x179e <__pop_int+0x15a>
    1714:	cd 91       	ld	r28, X+
    1716:	dc 91       	ld	r29, X
    1718:	11 97       	sbiw	r26, 0x01	; 1
    171a:	ce 01       	movw	r24, r28
    171c:	02 96       	adiw	r24, 0x02	; 2
    171e:	8d 93       	st	X+, r24
    1720:	9c 93       	st	X, r25
    1722:	23 c0       	rjmp	.+70     	; 0x176a <__pop_int+0x126>
    1724:	cd 91       	ld	r28, X+
    1726:	dc 91       	ld	r29, X
    1728:	11 97       	sbiw	r26, 0x01	; 1
    172a:	ce 01       	movw	r24, r28
    172c:	08 96       	adiw	r24, 0x08	; 8
    172e:	8d 93       	st	X+, r24
    1730:	9c 93       	st	X, r25
    1732:	78 81       	ld	r23, Y
    1734:	69 81       	ldd	r22, Y+1	; 0x01
    1736:	5a 81       	ldd	r21, Y+2	; 0x02
    1738:	4b 81       	ldd	r20, Y+3	; 0x03
    173a:	3c 81       	ldd	r19, Y+4	; 0x04
    173c:	2d 81       	ldd	r18, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	8f 81       	ldd	r24, Y+7	; 0x07
    1742:	70 83       	st	Z, r23
    1744:	61 83       	std	Z+1, r22	; 0x01
    1746:	52 83       	std	Z+2, r21	; 0x02
    1748:	43 83       	std	Z+3, r20	; 0x03
    174a:	34 83       	std	Z+4, r19	; 0x04
    174c:	25 83       	std	Z+5, r18	; 0x05
    174e:	96 83       	std	Z+6, r25	; 0x06
    1750:	87 83       	std	Z+7, r24	; 0x07
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	2a c0       	rjmp	.+84     	; 0x17ac <__pop_int+0x168>
    1758:	cd 91       	ld	r28, X+
    175a:	dc 91       	ld	r29, X
    175c:	11 97       	sbiw	r26, 0x01	; 1
    175e:	ce 01       	movw	r24, r28
    1760:	02 96       	adiw	r24, 0x02	; 2
    1762:	8d 93       	st	X+, r24
    1764:	9c 93       	st	X, r25
    1766:	45 2b       	or	r20, r21
    1768:	a1 f0       	breq	.+40     	; 0x1792 <__pop_int+0x14e>
    176a:	99 81       	ldd	r25, Y+1	; 0x01
    176c:	28 81       	ld	r18, Y
    176e:	89 2f       	mov	r24, r25
    1770:	88 0f       	add	r24, r24
    1772:	88 0b       	sbc	r24, r24
    1774:	20 83       	st	Z, r18
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	82 83       	std	Z+2, r24	; 0x02
    177a:	83 83       	std	Z+3, r24	; 0x03
    177c:	84 83       	std	Z+4, r24	; 0x04
    177e:	85 83       	std	Z+5, r24	; 0x05
    1780:	86 83       	std	Z+6, r24	; 0x06
    1782:	e6 cf       	rjmp	.-52     	; 0x1750 <__pop_int+0x10c>
    1784:	cd 91       	ld	r28, X+
    1786:	dc 91       	ld	r29, X
    1788:	11 97       	sbiw	r26, 0x01	; 1
    178a:	ce 01       	movw	r24, r28
    178c:	02 96       	adiw	r24, 0x02	; 2
    178e:	8d 93       	st	X+, r24
    1790:	9c 93       	st	X, r25
    1792:	08 81       	ld	r16, Y
    1794:	19 81       	ldd	r17, Y+1	; 0x01
    1796:	00 83       	st	Z, r16
    1798:	11 83       	std	Z+1, r17	; 0x01
    179a:	12 82       	std	Z+2, r1	; 0x02
    179c:	13 82       	std	Z+3, r1	; 0x03
    179e:	14 82       	std	Z+4, r1	; 0x04
    17a0:	15 82       	std	Z+5, r1	; 0x05
    17a2:	16 82       	std	Z+6, r1	; 0x06
    17a4:	17 82       	std	Z+7, r1	; 0x07
    17a6:	d5 cf       	rjmp	.-86     	; 0x1752 <__pop_int+0x10e>
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	08 95       	ret

Disassembly of section .text.__pop_ptr:

00001a0e <__pop_ptr>:
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	dc 01       	movw	r26, r24
    1a14:	f9 01       	movw	r30, r18
    1a16:	64 38       	cpi	r22, 0x84	; 132
    1a18:	71 05       	cpc	r23, r1
    1a1a:	d9 f1       	breq	.+118    	; 0x1a92 <__pop_ptr+0x84>
    1a1c:	64 f4       	brge	.+24     	; 0x1a36 <__pop_ptr+0x28>
    1a1e:	61 38       	cpi	r22, 0x81	; 129
    1a20:	71 05       	cpc	r23, r1
    1a22:	21 f1       	breq	.+72     	; 0x1a6c <__pop_ptr+0x5e>
    1a24:	62 38       	cpi	r22, 0x82	; 130
    1a26:	71 05       	cpc	r23, r1
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <__pop_ptr+0x1e>
    1a2a:	40 c0       	rjmp	.+128    	; 0x1aac <__pop_ptr+0x9e>
    1a2c:	60 38       	cpi	r22, 0x80	; 128
    1a2e:	71 05       	cpc	r23, r1
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <__pop_ptr+0x26>
    1a32:	54 c0       	rjmp	.+168    	; 0x1adc <__pop_ptr+0xce>
    1a34:	2e c0       	rjmp	.+92     	; 0x1a92 <__pop_ptr+0x84>
    1a36:	60 39       	cpi	r22, 0x90	; 144
    1a38:	71 05       	cpc	r23, r1
    1a3a:	c1 f1       	breq	.+112    	; 0x1aac <__pop_ptr+0x9e>
    1a3c:	84 f4       	brge	.+32     	; 0x1a5e <__pop_ptr+0x50>
    1a3e:	68 38       	cpi	r22, 0x88	; 136
    1a40:	71 05       	cpc	r23, r1
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <__pop_ptr+0x38>
    1a44:	4b c0       	rjmp	.+150    	; 0x1adc <__pop_ptr+0xce>
    1a46:	c0 81       	ld	r28, Z
    1a48:	d1 81       	ldd	r29, Z+1	; 0x01
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	02 96       	adiw	r24, 0x02	; 2
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	80 83       	st	Z, r24
    1a52:	e8 81       	ld	r30, Y
    1a54:	f9 81       	ldd	r31, Y+1	; 0x01
    1a56:	ed 93       	st	X+, r30
    1a58:	fc 93       	st	X, r31
    1a5a:	40 83       	st	Z, r20
    1a5c:	3c c0       	rjmp	.+120    	; 0x1ad6 <__pop_ptr+0xc8>
    1a5e:	60 3a       	cpi	r22, 0xA0	; 160
    1a60:	71 05       	cpc	r23, r1
    1a62:	b9 f0       	breq	.+46     	; 0x1a92 <__pop_ptr+0x84>
    1a64:	60 3c       	cpi	r22, 0xC0	; 192
    1a66:	71 05       	cpc	r23, r1
    1a68:	a1 f0       	breq	.+40     	; 0x1a92 <__pop_ptr+0x84>
    1a6a:	38 c0       	rjmp	.+112    	; 0x1adc <__pop_ptr+0xce>
    1a6c:	c0 81       	ld	r28, Z
    1a6e:	d1 81       	ldd	r29, Z+1	; 0x01
    1a70:	ce 01       	movw	r24, r28
    1a72:	02 96       	adiw	r24, 0x02	; 2
    1a74:	91 83       	std	Z+1, r25	; 0x01
    1a76:	80 83       	st	Z, r24
    1a78:	e8 81       	ld	r30, Y
    1a7a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a7c:	ed 93       	st	X+, r30
    1a7e:	fc 93       	st	X, r31
    1a80:	05 2e       	mov	r0, r21
    1a82:	00 0c       	add	r0, r0
    1a84:	66 0b       	sbc	r22, r22
    1a86:	77 0b       	sbc	r23, r23
    1a88:	40 83       	st	Z, r20
    1a8a:	51 83       	std	Z+1, r21	; 0x01
    1a8c:	62 83       	std	Z+2, r22	; 0x02
    1a8e:	73 83       	std	Z+3, r23	; 0x03
    1a90:	22 c0       	rjmp	.+68     	; 0x1ad6 <__pop_ptr+0xc8>
    1a92:	c0 81       	ld	r28, Z
    1a94:	d1 81       	ldd	r29, Z+1	; 0x01
    1a96:	ce 01       	movw	r24, r28
    1a98:	02 96       	adiw	r24, 0x02	; 2
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	80 83       	st	Z, r24
    1a9e:	e8 81       	ld	r30, Y
    1aa0:	f9 81       	ldd	r31, Y+1	; 0x01
    1aa2:	ed 93       	st	X+, r30
    1aa4:	fc 93       	st	X, r31
    1aa6:	51 83       	std	Z+1, r21	; 0x01
    1aa8:	40 83       	st	Z, r20
    1aaa:	15 c0       	rjmp	.+42     	; 0x1ad6 <__pop_ptr+0xc8>
    1aac:	c0 81       	ld	r28, Z
    1aae:	d1 81       	ldd	r29, Z+1	; 0x01
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	02 96       	adiw	r24, 0x02	; 2
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
    1ab8:	e8 81       	ld	r30, Y
    1aba:	f9 81       	ldd	r31, Y+1	; 0x01
    1abc:	ed 93       	st	X+, r30
    1abe:	fc 93       	st	X, r31
    1ac0:	51 83       	std	Z+1, r21	; 0x01
    1ac2:	40 83       	st	Z, r20
    1ac4:	85 2f       	mov	r24, r21
    1ac6:	88 0f       	add	r24, r24
    1ac8:	88 0b       	sbc	r24, r24
    1aca:	82 83       	std	Z+2, r24	; 0x02
    1acc:	83 83       	std	Z+3, r24	; 0x03
    1ace:	84 83       	std	Z+4, r24	; 0x04
    1ad0:	85 83       	std	Z+5, r24	; 0x05
    1ad2:	86 83       	std	Z+6, r24	; 0x06
    1ad4:	87 83       	std	Z+7, r24	; 0x07
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <__pop_ptr+0xd2>
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
    1ae4:	08 95       	ret

Disassembly of section .text.atoi:

00002058 <atoi>:
    2058:	cf 93       	push	r28
    205a:	9b 01       	movw	r18, r22
    205c:	48 2f       	mov	r20, r24
    205e:	f9 01       	movw	r30, r18
    2060:	84 91       	lpm	r24, Z
    2062:	47 fd       	sbrc	r20, 7
    2064:	80 81       	ld	r24, Z
    2066:	80 32       	cpi	r24, 0x20	; 32
    2068:	c9 f1       	breq	.+114    	; 0x20dc <atoi+0x84>
    206a:	68 2f       	mov	r22, r24
    206c:	08 2e       	mov	r0, r24
    206e:	00 0c       	add	r0, r0
    2070:	77 0b       	sbc	r23, r23
    2072:	69 50       	subi	r22, 0x09	; 9
    2074:	71 09       	sbc	r23, r1
    2076:	65 30       	cpi	r22, 0x05	; 5
    2078:	71 05       	cpc	r23, r1
    207a:	80 f1       	brcs	.+96     	; 0x20dc <atoi+0x84>
    207c:	8b 32       	cpi	r24, 0x2B	; 43
    207e:	49 f5       	brne	.+82     	; 0x20d2 <atoi+0x7a>
    2080:	a0 e0       	ldi	r26, 0x00	; 0
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	2f 5f       	subi	r18, 0xFF	; 255
    2086:	3f 4f       	sbci	r19, 0xFF	; 255
    2088:	4f 4f       	sbci	r20, 0xFF	; 255
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <atoi+0x38>
    208c:	a0 e0       	ldi	r26, 0x00	; 0
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	ca e0       	ldi	r28, 0x0A	; 10
    2096:	f9 01       	movw	r30, r18
    2098:	64 91       	lpm	r22, Z
    209a:	47 fd       	sbrc	r20, 7
    209c:	60 81       	ld	r22, Z
    209e:	06 2e       	mov	r0, r22
    20a0:	00 0c       	add	r0, r0
    20a2:	77 0b       	sbc	r23, r23
    20a4:	60 53       	subi	r22, 0x30	; 48
    20a6:	71 09       	sbc	r23, r1
    20a8:	6a 30       	cpi	r22, 0x0A	; 10
    20aa:	71 05       	cpc	r23, r1
    20ac:	60 f4       	brcc	.+24     	; 0x20c6 <atoi+0x6e>
    20ae:	c8 9f       	mul	r28, r24
    20b0:	f0 01       	movw	r30, r0
    20b2:	c9 9f       	mul	r28, r25
    20b4:	f0 0d       	add	r31, r0
    20b6:	11 24       	eor	r1, r1
    20b8:	2f 5f       	subi	r18, 0xFF	; 255
    20ba:	3f 4f       	sbci	r19, 0xFF	; 255
    20bc:	4f 4f       	sbci	r20, 0xFF	; 255
    20be:	cf 01       	movw	r24, r30
    20c0:	86 1b       	sub	r24, r22
    20c2:	97 0b       	sbc	r25, r23
    20c4:	e8 cf       	rjmp	.-48     	; 0x2096 <atoi+0x3e>
    20c6:	ab 2b       	or	r26, r27
    20c8:	69 f4       	brne	.+26     	; 0x20e4 <atoi+0x8c>
    20ca:	91 95       	neg	r25
    20cc:	81 95       	neg	r24
    20ce:	91 09       	sbc	r25, r1
    20d0:	09 c0       	rjmp	.+18     	; 0x20e4 <atoi+0x8c>
    20d2:	8d 32       	cpi	r24, 0x2D	; 45
    20d4:	d9 f6       	brne	.-74     	; 0x208c <atoi+0x34>
    20d6:	a1 e0       	ldi	r26, 0x01	; 1
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	d4 cf       	rjmp	.-88     	; 0x2084 <atoi+0x2c>
    20dc:	2f 5f       	subi	r18, 0xFF	; 255
    20de:	3f 4f       	sbci	r19, 0xFF	; 255
    20e0:	4f 4f       	sbci	r20, 0xFF	; 255
    20e2:	bd cf       	rjmp	.-134    	; 0x205e <atoi+0x6>
    20e4:	cf 91       	pop	r28
    20e6:	08 95       	ret

Disassembly of section .text.memset:

000027bc <memset>:
    27bc:	fc 01       	movw	r30, r24
    27be:	48 0f       	add	r20, r24
    27c0:	59 1f       	adc	r21, r25
    27c2:	e4 17       	cp	r30, r20
    27c4:	f5 07       	cpc	r31, r21
    27c6:	11 f0       	breq	.+4      	; 0x27cc <memset+0x10>
    27c8:	61 93       	st	Z+, r22
    27ca:	fb cf       	rjmp	.-10     	; 0x27c2 <memset+0x6>
    27cc:	08 95       	ret

Disassembly of section .text.strcmp:

00002432 <strcmp>:
    2432:	cf 92       	push	r12
    2434:	df 92       	push	r13
    2436:	ef 92       	push	r14
    2438:	6b 01       	movw	r12, r22
    243a:	e8 2e       	mov	r14, r24
    243c:	f6 01       	movw	r30, r12
    243e:	84 91       	lpm	r24, Z
    2440:	e7 fc       	sbrc	r14, 7
    2442:	80 81       	ld	r24, Z
    2444:	f9 01       	movw	r30, r18
    2446:	54 91       	lpm	r21, Z
    2448:	47 fd       	sbrc	r20, 7
    244a:	50 81       	ld	r21, Z
    244c:	85 13       	cpse	r24, r21
    244e:	0b c0       	rjmp	.+22     	; 0x2466 <strcmp+0x34>
    2450:	88 23       	and	r24, r24
    2452:	41 f0       	breq	.+16     	; 0x2464 <strcmp+0x32>
    2454:	8f ef       	ldi	r24, 0xFF	; 255
    2456:	c8 1a       	sub	r12, r24
    2458:	d8 0a       	sbc	r13, r24
    245a:	e8 0a       	sbc	r14, r24
    245c:	2f 5f       	subi	r18, 0xFF	; 255
    245e:	3f 4f       	sbci	r19, 0xFF	; 255
    2460:	4f 4f       	sbci	r20, 0xFF	; 255
    2462:	ec cf       	rjmp	.-40     	; 0x243c <strcmp+0xa>
    2464:	58 2f       	mov	r21, r24
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	85 1b       	sub	r24, r21
    246a:	91 09       	sbc	r25, r1
    246c:	ef 90       	pop	r14
    246e:	df 90       	pop	r13
    2470:	cf 90       	pop	r12
    2472:	08 95       	ret

Disassembly of section .text.strlen:

000025ba <strlen>:
    25ba:	cf 92       	push	r12
    25bc:	df 92       	push	r13
    25be:	ef 92       	push	r14
    25c0:	6b 01       	movw	r12, r22
    25c2:	e8 2e       	mov	r14, r24
    25c4:	a8 2f       	mov	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	fc 01       	movw	r30, r24
    25ca:	24 91       	lpm	r18, Z
    25cc:	a7 fd       	sbrc	r26, 7
    25ce:	20 81       	ld	r18, Z
    25d0:	22 23       	and	r18, r18
    25d2:	19 f0       	breq	.+6      	; 0x25da <strlen+0x20>
    25d4:	01 96       	adiw	r24, 0x01	; 1
    25d6:	a1 1d       	adc	r26, r1
    25d8:	f7 cf       	rjmp	.-18     	; 0x25c8 <strlen+0xe>
    25da:	8c 19       	sub	r24, r12
    25dc:	9d 09       	sbc	r25, r13
    25de:	ef 90       	pop	r14
    25e0:	df 90       	pop	r13
    25e2:	cf 90       	pop	r12
    25e4:	08 95       	ret

Disassembly of section .text.tolower:

000027f0 <tolower>:
    27f0:	9c 01       	movw	r18, r24
    27f2:	21 54       	subi	r18, 0x41	; 65
    27f4:	31 09       	sbc	r19, r1
    27f6:	2a 31       	cpi	r18, 0x1A	; 26
    27f8:	31 05       	cpc	r19, r1
    27fa:	08 f4       	brcc	.+2      	; 0x27fe <tolower+0xe>
    27fc:	80 62       	ori	r24, 0x20	; 32
    27fe:	08 95       	ret

Disassembly of section .text.toupper:

000027ce <toupper>:
    27ce:	9c 01       	movw	r18, r24
    27d0:	21 56       	subi	r18, 0x61	; 97
    27d2:	31 09       	sbc	r19, r1
    27d4:	2a 31       	cpi	r18, 0x1A	; 26
    27d6:	31 05       	cpc	r19, r1
    27d8:	10 f4       	brcc	.+4      	; 0x27de <toupper+0x10>
    27da:	8f 75       	andi	r24, 0x5F	; 95
    27dc:	99 27       	eor	r25, r25
    27de:	08 95       	ret

Disassembly of section .text._Exit:

00002818 <_Exit>:
    2818:	0e 94 65 00 	call	0xca	; 0xca <_exit>

Disassembly of section .text.__vsprintf:

0000273a <__vsprintf>:
    273a:	0f 93       	push	r16
    273c:	1f 93       	push	r17
    273e:	89 01       	movw	r16, r18
    2740:	9a 01       	movw	r18, r20
    2742:	46 2f       	mov	r20, r22
    2744:	6f ef       	ldi	r22, 0xFF	; 255
    2746:	7f e7       	ldi	r23, 0x7F	; 127
    2748:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__vsnprintf>
    274c:	1f 91       	pop	r17
    274e:	0f 91       	pop	r16
    2750:	08 95       	ret

Disassembly of section .text.__vsnprintf:

00001de2 <__vsnprintf>:
    1de2:	6f 92       	push	r6
    1de4:	7f 92       	push	r7
    1de6:	8f 92       	push	r8
    1de8:	ef 92       	push	r14
    1dea:	ff 92       	push	r15
    1dec:	0f 93       	push	r16
    1dee:	1f 93       	push	r17
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	61 97       	sbiw	r28, 0x11	; 17
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	fe 01       	movw	r30, r28
    1e06:	31 96       	adiw	r30, 0x01	; 1
    1e08:	51 e1       	ldi	r21, 0x11	; 17
    1e0a:	df 01       	movw	r26, r30
    1e0c:	1d 92       	st	X+, r1
    1e0e:	5a 95       	dec	r21
    1e10:	e9 f7       	brne	.-6      	; 0x1e0c <__vsnprintf+0x2a>
    1e12:	a2 e0       	ldi	r26, 0x02	; 2
    1e14:	b1 e0       	ldi	r27, 0x01	; 1
    1e16:	ba 83       	std	Y+2, r27	; 0x02
    1e18:	a9 83       	std	Y+1, r26	; 0x01
    1e1a:	9c 83       	std	Y+4, r25	; 0x04
    1e1c:	8b 83       	std	Y+3, r24	; 0x03
    1e1e:	77 ff       	sbrs	r23, 7
    1e20:	09 c0       	rjmp	.+18     	; 0x1e34 <__vsnprintf+0x52>
    1e22:	8f e4       	ldi	r24, 0x4F	; 79
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <__errno_val+0x1>
    1e2a:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <__errno_val>
    1e2e:	8f ef       	ldi	r24, 0xFF	; 255
    1e30:	9f ef       	ldi	r25, 0xFF	; 255
    1e32:	19 c0       	rjmp	.+50     	; 0x1e66 <__vsnprintf+0x84>
    1e34:	39 01       	movw	r6, r18
    1e36:	84 2e       	mov	r8, r20
    1e38:	7c 01       	movw	r14, r24
    1e3a:	61 50       	subi	r22, 0x01	; 1
    1e3c:	71 09       	sbc	r23, r1
    1e3e:	7f 83       	std	Y+7, r23	; 0x07
    1e40:	6e 83       	std	Y+6, r22	; 0x06
    1e42:	98 01       	movw	r18, r16
    1e44:	68 2d       	mov	r22, r8
    1e46:	a3 01       	movw	r20, r6
    1e48:	cf 01       	movw	r24, r30
    1e4a:	0e 94 af 12 	call	0x255e	; 0x255e <__vfprintf>
    1e4e:	48 85       	ldd	r20, Y+8	; 0x08
    1e50:	59 85       	ldd	r21, Y+9	; 0x09
    1e52:	2e 81       	ldd	r18, Y+6	; 0x06
    1e54:	3f 81       	ldd	r19, Y+7	; 0x07
    1e56:	42 17       	cp	r20, r18
    1e58:	53 07       	cpc	r21, r19
    1e5a:	08 f4       	brcc	.+2      	; 0x1e5e <__vsnprintf+0x7c>
    1e5c:	9a 01       	movw	r18, r20
    1e5e:	f7 01       	movw	r30, r14
    1e60:	e2 0f       	add	r30, r18
    1e62:	f3 1f       	adc	r31, r19
    1e64:	10 82       	st	Z, r1
    1e66:	61 96       	adiw	r28, 0x11	; 17
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	8f 90       	pop	r8
    1e80:	7f 90       	pop	r7
    1e82:	6f 90       	pop	r6
    1e84:	08 95       	ret

Disassembly of section .text.__vfprintf:

0000255e <__vfprintf>:
    255e:	a2 e0       	ldi	r26, 0x02	; 2
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e5 eb       	ldi	r30, 0xB5	; 181
    2564:	f2 e1       	ldi	r31, 0x12	; 18
    2566:	0c 94 86 12 	jmp	0x250c	; 0x250c <__prologue_saves__+0x1c>
    256a:	8c 01       	movw	r16, r24
    256c:	3a 83       	std	Y+2, r19	; 0x02
    256e:	29 83       	std	Y+1, r18	; 0x01
    2570:	9e 01       	movw	r18, r28
    2572:	2f 5f       	subi	r18, 0xFF	; 255
    2574:	3f 4f       	sbci	r19, 0xFF	; 255
    2576:	0e 94 95 01 	call	0x32a	; 0x32a <__printf_core>
    257a:	f8 01       	movw	r30, r16
    257c:	20 81       	ld	r18, Z
    257e:	24 ff       	sbrs	r18, 4
    2580:	02 c0       	rjmp	.+4      	; 0x2586 <__vfprintf+0x28>
    2582:	8f ef       	ldi	r24, 0xFF	; 255
    2584:	9f ef       	ldi	r25, 0xFF	; 255
    2586:	22 96       	adiw	r28, 0x02	; 2
    2588:	e4 e0       	ldi	r30, 0x04	; 4
    258a:	0c 94 a2 12 	jmp	0x2544	; 0x2544 <__epilogue_restores__+0x1c>

Disassembly of section .text.libgcc.div:

000026d4 <__umoddi3>:
    26d4:	68 94       	set
    26d6:	01 c0       	rjmp	.+2      	; 0x26da <__udivdi3_umoddi3>

000026d8 <__udivdi3>:
    26d8:	e8 94       	clt

000026da <__udivdi3_umoddi3>:
    26da:	8f 92       	push	r8
    26dc:	9f 92       	push	r9
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__udivmod64>
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	9f 90       	pop	r9
    26ec:	8f 90       	pop	r8
    26ee:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001e86 <__udivmod64>:
    1e86:	88 24       	eor	r8, r8
    1e88:	99 24       	eor	r9, r9
    1e8a:	f4 01       	movw	r30, r8
    1e8c:	e4 01       	movw	r28, r8
    1e8e:	b0 e4       	ldi	r27, 0x40	; 64
    1e90:	9f 93       	push	r25
    1e92:	aa 27       	eor	r26, r26
    1e94:	9a 15       	cp	r25, r10
    1e96:	8b 04       	cpc	r8, r11
    1e98:	9c 04       	cpc	r9, r12
    1e9a:	ed 05       	cpc	r30, r13
    1e9c:	fe 05       	cpc	r31, r14
    1e9e:	cf 05       	cpc	r28, r15
    1ea0:	d0 07       	cpc	r29, r16
    1ea2:	a1 07       	cpc	r26, r17
    1ea4:	98 f4       	brcc	.+38     	; 0x1ecc <__udivmod64+0x46>
    1ea6:	ad 2f       	mov	r26, r29
    1ea8:	dc 2f       	mov	r29, r28
    1eaa:	cf 2f       	mov	r28, r31
    1eac:	fe 2f       	mov	r31, r30
    1eae:	e9 2d       	mov	r30, r9
    1eb0:	98 2c       	mov	r9, r8
    1eb2:	89 2e       	mov	r8, r25
    1eb4:	98 2f       	mov	r25, r24
    1eb6:	87 2f       	mov	r24, r23
    1eb8:	76 2f       	mov	r23, r22
    1eba:	65 2f       	mov	r22, r21
    1ebc:	54 2f       	mov	r21, r20
    1ebe:	43 2f       	mov	r20, r19
    1ec0:	32 2f       	mov	r19, r18
    1ec2:	22 27       	eor	r18, r18
    1ec4:	b8 50       	subi	r27, 0x08	; 8
    1ec6:	31 f7       	brne	.-52     	; 0x1e94 <__udivmod64+0xe>
    1ec8:	bf 91       	pop	r27
    1eca:	27 c0       	rjmp	.+78     	; 0x1f1a <__udivmod64+0x94>
    1ecc:	1b 2e       	mov	r1, r27
    1ece:	bf 91       	pop	r27
    1ed0:	bb 27       	eor	r27, r27
    1ed2:	22 0f       	add	r18, r18
    1ed4:	33 1f       	adc	r19, r19
    1ed6:	44 1f       	adc	r20, r20
    1ed8:	55 1f       	adc	r21, r21
    1eda:	66 1f       	adc	r22, r22
    1edc:	77 1f       	adc	r23, r23
    1ede:	88 1f       	adc	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	88 1c       	adc	r8, r8
    1ee4:	99 1c       	adc	r9, r9
    1ee6:	ee 1f       	adc	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	cc 1f       	adc	r28, r28
    1eec:	dd 1f       	adc	r29, r29
    1eee:	aa 1f       	adc	r26, r26
    1ef0:	bb 1f       	adc	r27, r27
    1ef2:	8a 14       	cp	r8, r10
    1ef4:	9b 04       	cpc	r9, r11
    1ef6:	ec 05       	cpc	r30, r12
    1ef8:	fd 05       	cpc	r31, r13
    1efa:	ce 05       	cpc	r28, r14
    1efc:	df 05       	cpc	r29, r15
    1efe:	a0 07       	cpc	r26, r16
    1f00:	b1 07       	cpc	r27, r17
    1f02:	48 f0       	brcs	.+18     	; 0x1f16 <__udivmod64+0x90>
    1f04:	8a 18       	sub	r8, r10
    1f06:	9b 08       	sbc	r9, r11
    1f08:	ec 09       	sbc	r30, r12
    1f0a:	fd 09       	sbc	r31, r13
    1f0c:	ce 09       	sbc	r28, r14
    1f0e:	df 09       	sbc	r29, r15
    1f10:	a0 0b       	sbc	r26, r16
    1f12:	b1 0b       	sbc	r27, r17
    1f14:	21 60       	ori	r18, 0x01	; 1
    1f16:	1a 94       	dec	r1
    1f18:	e1 f6       	brne	.-72     	; 0x1ed2 <__udivmod64+0x4c>
    1f1a:	2e f4       	brtc	.+10     	; 0x1f26 <__udivmod64+0xa0>
    1f1c:	94 01       	movw	r18, r8
    1f1e:	af 01       	movw	r20, r30
    1f20:	be 01       	movw	r22, r28
    1f22:	cd 01       	movw	r24, r26
    1f24:	00 0c       	add	r0, r0
    1f26:	08 95       	ret

Disassembly of section .text.libgcc:

0000267a <__negdi2>:
    267a:	60 95       	com	r22
    267c:	70 95       	com	r23
    267e:	80 95       	com	r24
    2680:	90 95       	com	r25
    2682:	30 95       	com	r19
    2684:	40 95       	com	r20
    2686:	50 95       	com	r21
    2688:	21 95       	neg	r18
    268a:	3f 4f       	sbci	r19, 0xFF	; 255
    268c:	4f 4f       	sbci	r20, 0xFF	; 255
    268e:	5f 4f       	sbci	r21, 0xFF	; 255
    2690:	6f 4f       	sbci	r22, 0xFF	; 255
    2692:	7f 4f       	sbci	r23, 0xFF	; 255
    2694:	8f 4f       	sbci	r24, 0xFF	; 255
    2696:	9f 4f       	sbci	r25, 0xFF	; 255
    2698:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000024f0 <__prologue_saves__>:
    24f0:	2f 92       	push	r2
    24f2:	3f 92       	push	r3
    24f4:	4f 92       	push	r4
    24f6:	5f 92       	push	r5
    24f8:	6f 92       	push	r6
    24fa:	7f 92       	push	r7
    24fc:	8f 92       	push	r8
    24fe:	9f 92       	push	r9
    2500:	af 92       	push	r10
    2502:	bf 92       	push	r11
    2504:	cf 92       	push	r12
    2506:	df 92       	push	r13
    2508:	ef 92       	push	r14
    250a:	ff 92       	push	r15
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	ca 1b       	sub	r28, r26
    251a:	db 0b       	sbc	r29, r27
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00002528 <__epilogue_restores__>:
    2528:	2a 88       	ldd	r2, Y+18	; 0x12
    252a:	39 88       	ldd	r3, Y+17	; 0x11
    252c:	48 88       	ldd	r4, Y+16	; 0x10
    252e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2530:	6e 84       	ldd	r6, Y+14	; 0x0e
    2532:	7d 84       	ldd	r7, Y+13	; 0x0d
    2534:	8c 84       	ldd	r8, Y+12	; 0x0c
    2536:	9b 84       	ldd	r9, Y+11	; 0x0b
    2538:	aa 84       	ldd	r10, Y+10	; 0x0a
    253a:	b9 84       	ldd	r11, Y+9	; 0x09
    253c:	c8 84       	ldd	r12, Y+8	; 0x08
    253e:	df 80       	ldd	r13, Y+7	; 0x07
    2540:	ee 80       	ldd	r14, Y+6	; 0x06
    2542:	fd 80       	ldd	r15, Y+5	; 0x05
    2544:	0c 81       	ldd	r16, Y+4	; 0x04
    2546:	1b 81       	ldd	r17, Y+3	; 0x03
    2548:	aa 81       	ldd	r26, Y+2	; 0x02
    254a:	b9 81       	ldd	r27, Y+1	; 0x01
    254c:	ce 0f       	add	r28, r30
    254e:	d1 1d       	adc	r29, r1
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	ed 01       	movw	r28, r26
    255c:	08 95       	ret

Disassembly of section .text.libgcc.builtins:

000024b4 <__ashrdi3>:
    24b4:	97 fb       	bst	r25, 7
    24b6:	10 f8       	bld	r1, 0

000024b8 <__lshrdi3>:
    24b8:	16 94       	lsr	r1
    24ba:	00 08       	sbc	r0, r0
    24bc:	0f 93       	push	r16
    24be:	08 30       	cpi	r16, 0x08	; 8
    24c0:	98 f0       	brcs	.+38     	; 0x24e8 <__lshrdi3+0x30>
    24c2:	08 50       	subi	r16, 0x08	; 8
    24c4:	23 2f       	mov	r18, r19
    24c6:	34 2f       	mov	r19, r20
    24c8:	45 2f       	mov	r20, r21
    24ca:	56 2f       	mov	r21, r22
    24cc:	67 2f       	mov	r22, r23
    24ce:	78 2f       	mov	r23, r24
    24d0:	89 2f       	mov	r24, r25
    24d2:	90 2d       	mov	r25, r0
    24d4:	f4 cf       	rjmp	.-24     	; 0x24be <__lshrdi3+0x6>
    24d6:	05 94       	asr	r0
    24d8:	97 95       	ror	r25
    24da:	87 95       	ror	r24
    24dc:	77 95       	ror	r23
    24de:	67 95       	ror	r22
    24e0:	57 95       	ror	r21
    24e2:	47 95       	ror	r20
    24e4:	37 95       	ror	r19
    24e6:	27 95       	ror	r18
    24e8:	0a 95       	dec	r16
    24ea:	aa f7       	brpl	.-22     	; 0x24d6 <__lshrdi3+0x1e>
    24ec:	0f 91       	pop	r16
    24ee:	08 95       	ret

Disassembly of section .text.libgcc:

00002752 <__cmpdi2_s8>:
    2752:	00 24       	eor	r0, r0
    2754:	a7 fd       	sbrc	r26, 7
    2756:	00 94       	com	r0
    2758:	2a 17       	cp	r18, r26
    275a:	30 05       	cpc	r19, r0
    275c:	40 05       	cpc	r20, r0
    275e:	50 05       	cpc	r21, r0
    2760:	60 05       	cpc	r22, r0
    2762:	70 05       	cpc	r23, r0
    2764:	80 05       	cpc	r24, r0
    2766:	90 05       	cpc	r25, r0
    2768:	08 95       	ret
