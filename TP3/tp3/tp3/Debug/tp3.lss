
tp3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005b4  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018f  00800100  00800100  000005b4  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000001c  00000000  00000000  000005e3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000005ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a8c  00000000  00000000  000007e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d3a  00000000  00000000  00003273  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de9  00000000  00000000  00003fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000490  00000000  00000000  00004d98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000306  00000000  00000000  00005228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a86  00000000  00000000  0000552e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00005fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000004f2  000004f2  000005a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000615c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.i2c_init 00000012  00000482  00000482  00000536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_start 00000010  00000494  00000494  00000548  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2c_write 00000014  0000045a  0000045a  0000050e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.i2c_stop 00000008  000004e4  000004e4  00000598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 00000079  000000c2  000000c2  00000176  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.print_welcome_msg 00000046  00000330  00000330  000003e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    00000056  0000028a  0000028a  0000033e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.int_to_bcd 00000026  00000376  00000376  0000042a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.rtc_disable_alarm 0000001c  000003c2  000003c2  00000476  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.rtc_init 00000006  000004ec  000004ec  000005a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.rtc_set_time 00000062  00000228  00000228  000002dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.SerialPort_Init 00000010  000004a4  000004a4  00000558  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.SerialPort_TX_Enable 0000000c  000004b4  000004b4  00000568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.SerialPort_TX_Interrupt_Enable 0000000c  000004c0  000004c0  00000574  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.SerialPort_RX_Enable 0000000c  000004cc  000004cc  00000580  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.SerialPort_RX_Interrupt_Enable 0000000c  000004d8  000004d8  0000058c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.timer1_init 00000026  0000039c  0000039c  00000450  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.UART_init 0000001a  000003de  000003de  00000492  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__vector_18 00000080  0000013c  0000013c  000001f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.SerialPort_Buffered_Send_Char 00000050  000002e0  000002e0  00000394  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__vector_20 00000014  0000046e  0000046e  00000522  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_19 0000006c  000001bc  000001bc  00000270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.uart_send_string 0000001a  000003f8  000003f8  000004ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .bss.tx_busy  00000001  0080028f  0080028f  000005b4  2**0
                  ALLOC
 39 .bss.tx_tail  00000001  00800290  00800290  000005b4  2**0
                  ALLOC
 40 .bss.tx_head  00000001  00800291  00800291  000005b4  2**0
                  ALLOC
 41 .text.get_initial_date 00000018  0000042c  0000042c  000004e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.libgcc  0000001a  00000412  00000412  000004c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__dummy_fini 00000002  000004fa  000004fa  000005ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.__dummy_funcs_on_exit 00000002  000004fc  000004fc  000005b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.__dummy_simulator_exit 00000002  000004fe  000004fe  000005b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.exit    00000016  00000444  00000444  000004f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text._Exit   00000004  000004f6  000004f6  000005aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
   8:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
   c:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  10:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  14:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  18:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  1c:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  20:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  24:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  28:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  2c:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  30:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  34:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  38:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  3c:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  40:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  44:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  48:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_18>
  4c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_19>
  50:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_20>
  54:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  58:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  5c:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  60:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>
  64:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	02 92       	st	-Z, r0
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 45 01 	call	0x28a	; 0x28a <main>
  ba:	0c 94 22 02 	jmp	0x444	; 0x444 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000004f2 <__bad_interrupt>:
 4f2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.i2c_init:

00000482 <i2c_init>:
    else
        TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Enviar Ack

    while ((TWCR & (1 << TWINT)) == 0);
    return TWDR; 
}
 482:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 486:	88 e4       	ldi	r24, 0x48	; 72
 488:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 48c:	84 e0       	ldi	r24, 0x04	; 4
 48e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 492:	08 95       	ret

Disassembly of section .text.i2c_start:

00000494 <i2c_start>:
 494:	84 ea       	ldi	r24, 0xA4	; 164
 496:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 49a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 49e:	88 23       	and	r24, r24
 4a0:	e4 f7       	brge	.-8      	; 0x49a <i2c_start+0x6>
 4a2:	08 95       	ret

Disassembly of section .text.i2c_write:

0000045a <i2c_write>:
 45a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 45e:	84 e8       	ldi	r24, 0x84	; 132
 460:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 464:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 468:	88 23       	and	r24, r24
 46a:	e4 f7       	brge	.-8      	; 0x464 <i2c_write+0xa>
 46c:	08 95       	ret

Disassembly of section .text.i2c_stop:

000004e4 <i2c_stop>:

void i2c_stop(void){
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 4e4:	84 e9       	ldi	r24, 0x94	; 148
 4e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 4ea:	08 95       	ret

Disassembly of section .text.print_welcome_msg:

00000330 <print_welcome_msg>:
#include "rtc.h"
#include "timer.h"

#define BAUD_RATE 103

void print_welcome_msg(){
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	c2 54       	subi	r28, 0x42	; 66
 33a:	d1 09       	sbc	r29, r1
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
    char message[] = "Bienvenido\r\nCOMANDOS:\r\n - ON\r\n - OFF\r\n - SET TIME\r\n - SET ALARM\r\n";
 346:	22 ec       	ldi	r18, 0xC2	; 194
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	82 e4       	ldi	r24, 0x42	; 66
 34e:	f9 01       	movw	r30, r18
 350:	de 01       	movw	r26, r28
 352:	11 96       	adiw	r26, 0x01	; 1
 354:	74 2f       	mov	r23, r20
 356:	0e 94 09 02 	call	0x412	; 0x412 <__movmemx_qi>
    // char message[] = "Holaa\r\n";
    uart_send_string(message);
 35a:	ce 01       	movw	r24, r28
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <uart_send_string>
}
 362:	ce 5b       	subi	r28, 0xBE	; 190
 364:	df 4f       	sbci	r29, 0xFF	; 255
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	de bf       	out	0x3e, r29	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	cd bf       	out	0x3d, r28	; 61
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

Disassembly of section .text.main:

0000028a <main>:
int main(void){
    // UART_init();
    // print_welcome_msg(); // Imprime mensaje de bienvenida
    // _delay_ms(50);
    // sei();
    UART_init();
 28a:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_init>
    print_welcome_msg(); // Imprime mensaje de bienvenida
 28e:	0e 94 98 01 	call	0x330	; 0x330 <print_welcome_msg>
    i2c_init(); // Inicializa I2C
 292:	0e 94 41 02 	call	0x482	; 0x482 <i2c_init>
    rtc_init(); // Inicializa el RTC
 296:	0e 94 76 02 	call	0x4ec	; 0x4ec <rtc_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	80 e7       	ldi	r24, 0x70	; 112
 29e:	92 e0       	ldi	r25, 0x02	; 2
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <main+0x16>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <main+0x20>
 2aa:	00 00       	nop
    _delay_ms(50);
    get_initial_date(&current_date);
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 16 02 	call	0x42c	; 0x42c <get_initial_date>
    rtc_set_time(&current_date); // Configura el RTC con la fecha inicial
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	0e 94 14 01 	call	0x228	; 0x228 <rtc_set_time>
    timer1_init();
 2bc:	0e 94 ce 01 	call	0x39c	; 0x39c <timer1_init>
    sei();
 2c0:	78 94       	sei
 2c2:	2f ef       	ldi	r18, 0xFF	; 255
 2c4:	83 ed       	ldi	r24, 0xD3	; 211
 2c6:	90 e3       	ldi	r25, 0x30	; 48
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <main+0x3e>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0x48>
 2d2:	00 00       	nop
    while (1){
        _delay_ms(1000);
        uart_send_string("Tick\r\n");
 2d4:	64 e3       	ldi	r22, 0x34	; 52
 2d6:	71 e0       	ldi	r23, 0x01	; 1
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <uart_send_string>
 2de:	f1 cf       	rjmp	.-30     	; 0x2c2 <main+0x38>

Disassembly of section .text.int_to_bcd:

00000376 <int_to_bcd>:
uint8_t bcd_to_int(uint8_t bcd) {
    return (((bcd >> 4) & 0x0F) * 10) + (bcd & 0x0F);
}

uint8_t int_to_bcd(uint8_t value) {
    return (((value / 10) << 4) & 0xF0) | (value % 10);
 376:	9d ec       	ldi	r25, 0xCD	; 205
 378:	89 9f       	mul	r24, r25
 37a:	91 2d       	mov	r25, r1
 37c:	11 24       	eor	r1, r1
 37e:	96 95       	lsr	r25
 380:	96 95       	lsr	r25
 382:	96 95       	lsr	r25
 384:	20 e1       	ldi	r18, 0x10	; 16
 386:	92 9f       	mul	r25, r18
 388:	a0 01       	movw	r20, r0
 38a:	11 24       	eor	r1, r1
 38c:	99 0f       	add	r25, r25
 38e:	29 2f       	mov	r18, r25
 390:	22 0f       	add	r18, r18
 392:	22 0f       	add	r18, r18
 394:	92 0f       	add	r25, r18
 396:	89 1b       	sub	r24, r25
}
 398:	84 2b       	or	r24, r20
 39a:	08 95       	ret

Disassembly of section .text.rtc_disable_alarm:

000003c2 <rtc_disable_alarm>:
void rtc_init(void) {
    rtc_disable_alarm(); // Desactivar alarma al iniciar
}

void rtc_disable_alarm(void) {
    i2c_start();
 3c2:	0e 94 4a 02 	call	0x494	; 0x494 <i2c_start>
    i2c_write(DS3231_WRITE_MODE);
 3c6:	80 ed       	ldi	r24, 0xD0	; 208
 3c8:	0e 94 2d 02 	call	0x45a	; 0x45a <i2c_write>
    i2c_write(DS3231_CONTROL_REG); // Apuntar al registro de control
 3cc:	8e e0       	ldi	r24, 0x0E	; 14
 3ce:	0e 94 2d 02 	call	0x45a	; 0x45a <i2c_write>

    i2c_write(0x00); // Desactivar alarma 1 y 2
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0e 94 2d 02 	call	0x45a	; 0x45a <i2c_write>
    i2c_stop();
 3d8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <i2c_stop>
 3dc:	08 95       	ret

Disassembly of section .text.rtc_init:

000004ec <rtc_init>:
uint8_t int_to_bcd(uint8_t value) {
    return (((value / 10) << 4) & 0xF0) | (value % 10);
}

void rtc_init(void) {
    rtc_disable_alarm(); // Desactivar alarma al iniciar
 4ec:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <rtc_disable_alarm>
 4f0:	08 95       	ret

Disassembly of section .text.rtc_set_time:

00000228 <rtc_set_time>:
#include "rtc.h"

uint8_t bcd_to_int(uint8_t bcd) {
    return (((bcd >> 4) & 0x0F) * 10) + (bcd & 0x0F);
}
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
 22e:	0e 94 4a 02 	call	0x494	; 0x494 <i2c_start>
 232:	80 ed       	ldi	r24, 0xD0	; 208
 234:	0e 94 2d 02 	call	0x45a	; 0x45a <i2c_write>
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 2d 02 	call	0x45a	; 0x45a <i2c_write>
 23e:	8d 81       	ldd	r24, Y+5	; 0x05
 240:	0e 94 bb 01 	call	0x376	; 0x376 <int_to_bcd>
 244:	0e 94 2d 02 	call	0x45a	; 0x45a <i2c_write>
 248:	8c 81       	ldd	r24, Y+4	; 0x04
 24a:	0e 94 bb 01 	call	0x376	; 0x376 <int_to_bcd>
 24e:	0e 94 2d 02 	call	0x45a	; 0x45a <i2c_write>
 252:	8b 81       	ldd	r24, Y+3	; 0x03
 254:	0e 94 bb 01 	call	0x376	; 0x376 <int_to_bcd>
 258:	0e 94 2d 02 	call	0x45a	; 0x45a <i2c_write>
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 2d 02 	call	0x45a	; 0x45a <i2c_write>
 262:	8a 81       	ldd	r24, Y+2	; 0x02
 264:	0e 94 bb 01 	call	0x376	; 0x376 <int_to_bcd>
 268:	0e 94 2d 02 	call	0x45a	; 0x45a <i2c_write>
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	0e 94 bb 01 	call	0x376	; 0x376 <int_to_bcd>
 272:	0e 94 2d 02 	call	0x45a	; 0x45a <i2c_write>
 276:	88 81       	ld	r24, Y
 278:	0e 94 bb 01 	call	0x376	; 0x376 <int_to_bcd>
 27c:	0e 94 2d 02 	call	0x45a	; 0x45a <i2c_write>
 280:	0e 94 72 02 	call	0x4e4	; 0x4e4 <i2c_stop>
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

Disassembly of section .text.SerialPort_Init:

000004a4 <SerialPort_Init>:
   //UCSR0B |=(1<<TXCIE0); //interrupcion TXC
 }
 
 void SerialPort_TX_Interrupt_Disable(void)
 {
   UCSR0B &=~(1<<UDRIE0);
 4a4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 4a8:	96 e0       	ldi	r25, 0x06	; 6
 4aa:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 4ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 4b2:	08 95       	ret

Disassembly of section .text.SerialPort_TX_Enable:

000004b4 <SerialPort_TX_Enable>:
 4b4:	e1 ec       	ldi	r30, 0xC1	; 193
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	88 60       	ori	r24, 0x08	; 8
 4bc:	80 83       	st	Z, r24
 4be:	08 95       	ret

Disassembly of section .text.SerialPort_TX_Interrupt_Enable:

000004c0 <SerialPort_TX_Interrupt_Enable>:
 4c0:	e1 ec       	ldi	r30, 0xC1	; 193
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	80 62       	ori	r24, 0x20	; 32
 4c8:	80 83       	st	Z, r24
 4ca:	08 95       	ret

Disassembly of section .text.SerialPort_RX_Enable:

000004cc <SerialPort_RX_Enable>:
 
 
 // Inicialización de Receptor
 
 void SerialPort_RX_Enable(void){
   UCSR0B |= (1<<RXEN0);
 4cc:	e1 ec       	ldi	r30, 0xC1	; 193
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	80 61       	ori	r24, 0x10	; 16
 4d4:	80 83       	st	Z, r24
 4d6:	08 95       	ret

Disassembly of section .text.SerialPort_RX_Interrupt_Enable:

000004d8 <SerialPort_RX_Interrupt_Enable>:
 }
 
 void SerialPort_RX_Interrupt_Enable(void){
   UCSR0B |= (1<<RXCIE0);
 4d8:	e1 ec       	ldi	r30, 0xC1	; 193
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	80 68       	ori	r24, 0x80	; 128
 4e0:	80 83       	st	Z, r24
 4e2:	08 95       	ret

Disassembly of section .text.timer1_init:

0000039c <timer1_init>:
#include "timer.h"

void timer1_init(void) {
    // Timer1 en modo CTC 
    // TCCR1A = 0;
    TCCR1B = (1 << WGM12); // Modo CTC, TOP = OCR1A
 39c:	e1 e8       	ldi	r30, 0x81	; 129
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	88 e0       	ldi	r24, 0x08	; 8
 3a2:	80 83       	st	Z, r24

    // 16MHz / 1024 = 15.625kHz -> 1s = 15,625 ciclos
    OCR1A = 15624;
 3a4:	88 e0       	ldi	r24, 0x08	; 8
 3a6:	9d e3       	ldi	r25, 0x3D	; 61
 3a8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3ac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    // Prescaler = 1024
    TCCR1B |= (1 << CS12) | (1 << CS10);
 3b0:	80 81       	ld	r24, Z
 3b2:	85 60       	ori	r24, 0x05	; 5
 3b4:	80 83       	st	Z, r24

    // Habilita interrupción por comparación en OCR1A
    TIMSK1 |= (1 << OCIE1A);
 3b6:	ef e6       	ldi	r30, 0x6F	; 111
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	82 60       	ori	r24, 0x02	; 2
 3be:	80 83       	st	Z, r24
 3c0:	08 95       	ret

Disassembly of section .text.UART_init:

000003de <UART_init>:
volatile uint8_t tx_tail = 0;
volatile uint8_t tx_busy = 0;

void UART_init()
{
  SerialPort_Init(BAUD_RATE_CONFIG); // Configura UART a 9600bps, 8N1 @ F_CPU = 16MHz
 3de:	87 e6       	ldi	r24, 0x67	; 103
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <SerialPort_Init>
  SerialPort_TX_Enable();            // habilita el transmisor
 3e6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <SerialPort_TX_Enable>
  SerialPort_TX_Interrupt_Enable();  // habilita el transmisor
 3ea:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SerialPort_TX_Interrupt_Enable>
  SerialPort_RX_Enable();            // habilita el receptor
 3ee:	0e 94 66 02 	call	0x4cc	; 0x4cc <SerialPort_RX_Enable>
  SerialPort_RX_Interrupt_Enable();  // habilita la interrupción de recepción
 3f2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <SerialPort_RX_Interrupt_Enable>
 3f6:	08 95       	ret

Disassembly of section .text.__vector_18:

0000013c <__vector_18>:
}

ISR(USART_RX_vect) // ESTA BIEN
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
  uint8_t received = UDR0;
 14e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  if ((received == '\b' || received == 0x7F) && cmd_index > 0)
 152:	88 30       	cpi	r24, 0x08	; 8
 154:	11 f0       	breq	.+4      	; 0x15a <__vector_18+0x1e>
 156:	8f 37       	cpi	r24, 0x7F	; 127
 158:	51 f4       	brne	.+20     	; 0x16e <__vector_18+0x32>
 15a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	99 23       	and	r25, r25
 160:	31 f0       	breq	.+12     	; 0x16e <__vector_18+0x32>
  {
    cmd_index--;
 162:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 166:	81 50       	subi	r24, 0x01	; 1
 168:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 16c:	1e c0       	rjmp	.+60     	; 0x1aa <__vector_18+0x6e>
  }
  else if (received == '\r' || received == '\n')
 16e:	8d 30       	cpi	r24, 0x0D	; 13
 170:	11 f0       	breq	.+4      	; 0x176 <__vector_18+0x3a>
 172:	8a 30       	cpi	r24, 0x0A	; 10
 174:	61 f4       	brne	.+24     	; 0x18e <__vector_18+0x52>
  {
    command_buffer[cmd_index] = '\0'; // Terminás el string
 176:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	e2 57       	subi	r30, 0x72	; 114
 17e:	fe 4f       	sbci	r31, 0xFE	; 254
 180:	10 82       	st	Z, r1
    cmd_index = 0;
 182:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
    command_ready = 1; // Señalás que hay un comando listo
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <command_ready>
 18c:	0e c0       	rjmp	.+28     	; 0x1aa <__vector_18+0x6e>
  }
  else if (cmd_index < CMD_BUFFER_SIZE - 1)
 18e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 192:	9f 37       	cpi	r25, 0x7F	; 127
 194:	50 f4       	brcc	.+20     	; 0x1aa <__vector_18+0x6e>
  {
    command_buffer[cmd_index++] = received;
 196:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	9e 0f       	add	r25, r30
 19e:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	e2 57       	subi	r30, 0x72	; 114
 1a6:	fe 4f       	sbci	r31, 0xFE	; 254
 1a8:	80 83       	st	Z, r24
  }
}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

Disassembly of section .text.SerialPort_Buffered_Send_Char:

000002e0 <SerialPort_Buffered_Send_Char>:

// A partir de aca esta todo mal

void SerialPort_Buffered_Send_Char(uint8_t data)
{
  uint8_t next_head = (tx_head + 1) % CMD_BUFFER_SIZE;
 2e0:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <tx_head>
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	2f 5f       	subi	r18, 0xFF	; 255
 2e8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ea:	2f 77       	andi	r18, 0x7F	; 127
 2ec:	30 78       	andi	r19, 0x80	; 128
 2ee:	33 23       	and	r19, r19
 2f0:	34 f4       	brge	.+12     	; 0x2fe <SerialPort_Buffered_Send_Char+0x1e>
 2f2:	21 50       	subi	r18, 0x01	; 1
 2f4:	31 09       	sbc	r19, r1
 2f6:	20 68       	ori	r18, 0x80	; 128
 2f8:	3f 6f       	ori	r19, 0xFF	; 255
 2fa:	2f 5f       	subi	r18, 0xFF	; 255
 2fc:	3f 4f       	sbci	r19, 0xFF	; 255

  // Esperar si el buffer está lleno
  while (next_head == tx_tail)
 2fe:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <tx_tail>
 302:	29 17       	cp	r18, r25
 304:	e1 f3       	breq	.-8      	; 0x2fe <SerialPort_Buffered_Send_Char+0x1e>
    ; // bloqueante, o podés implementar timeout

  tx_buffer[tx_head] = data;
 306:	e0 91 91 02 	lds	r30, 0x0291	; 0x800291 <tx_head>
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	e1 5f       	subi	r30, 0xF1	; 241
 30e:	fd 4f       	sbci	r31, 0xFD	; 253
 310:	80 83       	st	Z, r24
  tx_head = next_head;
 312:	20 93 91 02 	sts	0x0291, r18	; 0x800291 <tx_head>

  // Habilitar interrupción de transmisión si no está activa
  if (!tx_busy)
 316:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <tx_busy>
 31a:	81 11       	cpse	r24, r1
 31c:	08 c0       	rjmp	.+16     	; 0x32e <SerialPort_Buffered_Send_Char+0x4e>
  {
    tx_busy = 1;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <tx_busy>
    UCSR0B |= (1 << UDRIE0); // Habilita interrupción de buffer vacío
 324:	e1 ec       	ldi	r30, 0xC1	; 193
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	80 62       	ori	r24, 0x20	; 32
 32c:	80 83       	st	Z, r24
 32e:	08 95       	ret

Disassembly of section .text.__vector_20:

0000046e <__vector_20>:
  }
}

ISR(USART_TX_vect)
{
 46e:	1f 92       	push	r1
 470:	0f 92       	push	r0
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	0f 92       	push	r0
 476:	11 24       	eor	r1, r1
  // Esta ISR se puede usar si necesitas manejar la transmisión de datos
  // Actualmente no se usa, pero es buena práctica tenerla si se va a enviar datos
}
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

Disassembly of section .text.__vector_19:

000001bc <__vector_19>:

ISR(USART_UDRE_vect)
{
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
  // Si el buffer está vacío, desactivar interrupción
  if (tx_tail == tx_head)
 1ce:	90 91 90 02 	lds	r25, 0x0290	; 0x800290 <tx_tail>
 1d2:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <tx_head>
 1d6:	98 13       	cpse	r25, r24
 1d8:	08 c0       	rjmp	.+16     	; 0x1ea <__vector_19+0x2e>
  {
    tx_busy = 0;
 1da:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <tx_busy>
    UCSR0B &= ~(1 << UDRIE0); // Deshabilita interrupción de transmisión
 1de:	e1 ec       	ldi	r30, 0xC1	; 193
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8f 7d       	andi	r24, 0xDF	; 223
 1e6:	80 83       	st	Z, r24
    return;
 1e8:	16 c0       	rjmp	.+44     	; 0x216 <__vector_19+0x5a>
  }

  // Enviar siguiente carácter del buffer
  UDR0 = tx_buffer[tx_tail];
 1ea:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <tx_tail>
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	e1 5f       	subi	r30, 0xF1	; 241
 1f2:	fd 4f       	sbci	r31, 0xFD	; 253
 1f4:	80 81       	ld	r24, Z
 1f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  tx_tail = (tx_tail + 1) % CMD_BUFFER_SIZE;
 1fa:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <tx_tail>
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	8f 77       	andi	r24, 0x7F	; 127
 204:	90 78       	andi	r25, 0x80	; 128
 206:	99 23       	and	r25, r25
 208:	24 f4       	brge	.+8      	; 0x212 <__vector_19+0x56>
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	80 68       	ori	r24, 0x80	; 128
 20e:	9f 6f       	ori	r25, 0xFF	; 255
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <tx_tail>
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

Disassembly of section .text.uart_send_string:

000003f8 <uart_send_string>:

void uart_send_string(char *str)
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	ec 01       	movw	r28, r24
  while (*str)
 3fe:	03 c0       	rjmp	.+6      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
  {
    SerialPort_Buffered_Send_Char(*str++);
 400:	21 96       	adiw	r28, 0x01	; 1
 402:	0e 94 70 01 	call	0x2e0	; 0x2e0 <SerialPort_Buffered_Send_Char>
  tx_tail = (tx_tail + 1) % CMD_BUFFER_SIZE;
}

void uart_send_string(char *str)
{
  while (*str)
 406:	88 81       	ld	r24, Y
 408:	81 11       	cpse	r24, r1
 40a:	fa cf       	rjmp	.-12     	; 0x400 <__EEPROM_REGION_LENGTH__>
  {
    SerialPort_Buffered_Send_Char(*str++);
  }
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

Disassembly of section .text.get_initial_date:

0000042c <get_initial_date>:
#include "utils.h"

// Función para hardcodear una fecha inicial
void get_initial_date(date_t *date) {
 42c:	fc 01       	movw	r30, r24
    date->year = 25;
 42e:	89 e1       	ldi	r24, 0x19	; 25
 430:	80 83       	st	Z, r24
    date->month = 6;
 432:	86 e0       	ldi	r24, 0x06	; 6
 434:	81 83       	std	Z+1, r24	; 0x01
    date->day = 23;
 436:	87 e1       	ldi	r24, 0x17	; 23
 438:	82 83       	std	Z+2, r24	; 0x02
    date->hours = 16;
 43a:	80 e1       	ldi	r24, 0x10	; 16
 43c:	83 83       	std	Z+3, r24	; 0x03
    date->minutes = 0; // Minuto 0
 43e:	14 82       	std	Z+4, r1	; 0x04
    date->seconds = 0; // Segundo 0
 440:	15 82       	std	Z+5, r1	; 0x05
 442:	08 95       	ret

Disassembly of section .text.libgcc:

00000412 <__movmemx_qi>:
 412:	99 27       	eor	r25, r25

00000414 <__movmemx_hi>:
 414:	77 fd       	sbrc	r23, 7
 416:	05 c0       	rjmp	.+10     	; 0x422 <__movmemx_hi+0xe>
 418:	05 90       	lpm	r0, Z+
 41a:	0d 92       	st	X+, r0
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	e1 f7       	brne	.-8      	; 0x418 <__movmemx_hi+0x4>
 420:	08 95       	ret
 422:	01 90       	ld	r0, Z+
 424:	0d 92       	st	X+, r0
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	e1 f7       	brne	.-8      	; 0x422 <__movmemx_hi+0xe>
 42a:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000004fa <_fini>:
 4fa:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000004fc <__funcs_on_exit>:
 4fc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000004fe <__simulator_exit>:
 4fe:	08 95       	ret

Disassembly of section .text.exit:

00000444 <exit>:
 444:	ec 01       	movw	r28, r24
 446:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__funcs_on_exit>
 44a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_fini>
 44e:	ce 01       	movw	r24, r28
 450:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__simulator_exit>
 454:	ce 01       	movw	r24, r28
 456:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Exit>

Disassembly of section .text._Exit:

000004f6 <_Exit>:
 4f6:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
