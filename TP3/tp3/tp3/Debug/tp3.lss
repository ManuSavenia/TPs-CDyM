
tp3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000028e0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000195  00800100  00800100  000028e0  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000028e0  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000062  00000000  00000000  0000290f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00002971  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002313  00000000  00000000  00002ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb6  00000000  00000000  00004ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d59  00000000  00000000  00005992  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  000066ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000024c  00000000  00000000  00006a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab3  00000000  00000000  00006c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00007747  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000027e6  000027e6  000028ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007870  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.i2c_init 00000012  0000277c  0000277c  00002850  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_start 00000010  000027b2  000027b2  00002886  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2c_write 00000014  00002768  00002768  0000283c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.i2c_read 00000020  0000262c  0000262c  00002700  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.i2c_stop 00000008  000027d2  000027d2  000028a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .progmemx.data 00000235  000000ce  000000ce  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 21 .text.print_welcome_msg 00000060  00002354  00002354  00002428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.parse_command 00000080  000020ba  000020ba  0000218e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    00000266  000010ba  000010ba  0000118e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.ok       00000001  008002ad  008002ad  000028e0  2**0
                  ALLOC
 25 .bss.WAITING_SET_ALARM 00000001  008002ae  008002ae  000028e0  2**0
                  ALLOC
 26 .bss.WAITING_SET_TIME 00000001  008002af  008002af  000028e0  2**0
                  ALLOC
 27 .bss.timer_flag 00000001  008002b0  008002b0  000028e0  2**0
                  ALLOC
 28 .bss.alarm_counter 00000001  008002b1  008002b1  000028e0  2**0
                  ALLOC
 29 .bss.flag_alarm 00000001  008002b2  008002b2  000028e0  2**0
                  ALLOC
 30 .bss.flag_on  00000001  008002b3  008002b3  000028e0  2**0
                  ALLOC
 31 .bss.rx_flag  00000001  008002b4  008002b4  000028e0  2**0
                  ALLOC
 32 .bss.cmd_index 00000001  008002b5  008002b5  000028e0  2**0
                  ALLOC
 33 .text.bcd_to_int 00000016  0000273c  0000273c  00002810  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.int_to_bcd 00000026  000025e0  000025e0  000026b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.rtc_disable_alarm 0000001c  0000268a  0000268a  0000275e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.rtc_init 00000006  000027da  000027da  000028ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.rtc_read_time 00000086  00002034  00002034  00002108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.rtc_set_time 00000062  000022f2  000022f2  000023c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.timer_init 00000028  000025b8  000025b8  0000268c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__vector_11 0000001e  0000266c  0000266c  00002740  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.UART_init 00000018  000026dc  000026dc  000027b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__vector_18 00000080  0000213a  0000213a  0000220e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.uart_send_char 00000050  000023b4  000023b4  00002488  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.uart_send_string 0000002c  00002560  00002560  00002634  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.__vector_19 0000006c  000021ba  000021ba  0000228e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .bss.tx_busy  00000001  008002b6  008002b6  000028e0  2**0
                  ALLOC
 47 .bss.tx_tail  00000001  008002b7  008002b7  000028e0  2**0
                  ALLOC
 48 .bss.tx_head  00000001  008002b8  008002b8  000028e0  2**0
                  ALLOC
 49 .text.get_initial_date 00000018  000026f4  000026f4  000027c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.check_alarm 00000064  0000228e  0000228e  00002362  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .rodata       00000018  00800295  000027f4  000028c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 52 .text.is_valid_date 000002f2  00000b48  00000b48  00000c1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.is_valid_time 000001a0  00001320  00001320  000013f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.libgcc  0000001a  000026c2  000026c2  00002796  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.__dummy_fini 00000002  000027ee  000027ee  000028c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.__dummy_funcs_on_exit 00000002  000027f0  000027f0  000028c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.__dummy_simulator_exit 00000002  000027f2  000027f2  000028c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.exit    00000016  00002752  00002752  00002826  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.__wrap_sprintf 00000026  00002606  00002606  000026da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .progmemx.data 00000007  00000319  00000319  000003ed  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 61 .text.__fmt_s 000000ca  00001bb4  00001bb4  00001c88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.__out   00000068  00002226  00002226  000022fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.__pad   0000010e  000018fa  000018fa  000019ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.__dummy_fmt4 00000006  000027e0  000027e0  000028b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.__fmt_state 0000009e  00001e74  00001e74  00001f48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .progmemx.data 00000006  00000320  00000320  000003f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 67 .text.__printf_core 00000822  00000326  00000326  000003fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .progmemx.data.state_table 00000016  00000303  00000303  000003d7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 69 .text.fputc   00000092  00001f12  00001f12  00001fe6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.__fmt_d 0000017e  000014c0  000014c0  00001594  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__fmt_o 000000d4  00001ae0  00001ae0  00001bb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__cvt_u 0000014a  000017b0  000017b0  00001884  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__fmt_u 000000b0  00001c7e  00001c7e  00001d52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__fmt_x 00000280  00000e3a  00000e3a  00000f0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.__pop_float 00000040  00002446  00002446  0000251a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__pop_int 00000172  0000163e  0000163e  00001712  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__pop_ptr 000000d8  00001a08  00001a08  00001adc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.atoi    00000090  00001fa4  00001fa4  00002078  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.memset  00000012  0000278e  0000278e  00002862  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.strcmp  00000042  00002404  00002404  000024d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.strlen  0000002c  0000258c  0000258c  00002660  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.tolower 00000010  000027c2  000027c2  00002896  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.toupper 00000012  000027a0  000027a0  00002874  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text._Exit   00000004  000027ea  000027ea  000028be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vsprintf 00000018  0000270c  0000270c  000027e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__vsnprintf 000000a4  00001d2e  00001d2e  00001e02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__vfprintf 00000030  00002530  00002530  00002604  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.libgcc.div 0000001c  000026a6  000026a6  0000277a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.libgcc.div 000000a2  00001dd2  00001dd2  00001ea6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.libgcc  00000020  0000264c  0000264c  00002720  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.libgcc.prologue 00000038  000024c2  000024c2  00002596  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.libgcc.prologue 00000036  000024fa  000024fa  000025ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.libgcc.builtins 0000003c  00002486  00002486  0000255a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.libgcc  00000018  00002724  00002724  000027f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
   8:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
   c:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  10:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  14:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  18:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  1c:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  20:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  24:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  28:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  2c:	0c 94 36 13 	jmp	0x266c	; 0x266c <__vector_11>
  30:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  34:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  38:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  3c:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  40:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  44:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  48:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__vector_18>
  4c:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__vector_19>
  50:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  54:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  58:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  5c:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  60:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>
  64:	0c 94 f3 13 	jmp	0x27e6	; 0x27e6 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	02 95       	swap	r16
  6c:	80 02       	muls	r24, r16
  6e:	95 02       	muls	r25, r21
  70:	ad 00       	.word	0x00ad	; ????
  72:	27 f4       	brid	.+8      	; 0x7c <__ctors_end+0x2>
  74:	02 ad       	ldd	r16, Z+58	; 0x3a
  76:	02 b9       	out	0x02, r16	; 2
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <main>
  c6:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

000027e6 <__bad_interrupt>:
    27e6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.i2c_init:

0000277c <i2c_init>:
#include "i2c.h"

void i2c_init(void){
   TWSR = 0x00;
    277c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
   TWBR = 72;           //frecuencia de 100KHz del SCL
    2780:	88 e4       	ldi	r24, 0x48	; 72
    2782:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
   TWCR = (1 << TWEN);  //Habilitamos el I2C
    2786:	84 e0       	ldi	r24, 0x04	; 4
    2788:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    278c:	08 95       	ret

Disassembly of section .text.i2c_start:

000027b2 <i2c_start>:
}

void i2c_start(void){
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    27b2:	84 ea       	ldi	r24, 0xA4	; 164
    27b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & (1 << TWINT)) == 0);
    27b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    27bc:	88 23       	and	r24, r24
    27be:	e4 f7       	brge	.-8      	; 0x27b8 <i2c_start+0x6>
}
    27c0:	08 95       	ret

Disassembly of section .text.i2c_write:

00002768 <i2c_write>:

void i2c_write(uint8_t data){
    TWDR = data;                        //Cargamos el dato a enviar
    2768:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1 << TWINT) | (1 << TWEN);  //Iniciamos la transmision
    276c:	84 e8       	ldi	r24, 0x84	; 132
    276e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & (1 << TWINT)) == 0); //Esperamos a que se complete
    2772:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2776:	88 23       	and	r24, r24
    2778:	e4 f7       	brge	.-8      	; 0x2772 <i2c_write+0xa>
}
    277a:	08 95       	ret

Disassembly of section .text.i2c_read:

0000262c <i2c_read>:

uint8_t i2c_read(uint8_t isLast){
    if (isLast)
    262c:	88 23       	and	r24, r24
    262e:	21 f0       	breq	.+8      	; 0x2638 <i2c_read+0xc>
        TWCR = (1 << TWINT) | (1 << TWEN); // Enviar Nack
    2630:	84 e8       	ldi	r24, 0x84	; 132
    2632:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2636:	03 c0       	rjmp	.+6      	; 0x263e <i2c_read+0x12>
    else
        TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA); // Enviar Ack
    2638:	84 ec       	ldi	r24, 0xC4	; 196
    263a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & (1 << TWINT)) == 0);
    263e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2642:	88 23       	and	r24, r24
    2644:	e4 f7       	brge	.-8      	; 0x263e <i2c_read+0x12>
    return TWDR; 
    2646:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
    264a:	08 95       	ret

Disassembly of section .text.i2c_stop:

000027d2 <i2c_stop>:

void i2c_stop(void){
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    27d2:	84 e9       	ldi	r24, 0x94	; 148
    27d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    27d8:	08 95       	ret

Disassembly of section .text.print_welcome_msg:

00002354 <print_welcome_msg>:
#include "rtc.h"
#include "timer.h"

#define BAUD_RATE 103

void print_welcome_msg(){
    2354:	cf 92       	push	r12
    2356:	df 92       	push	r13
    2358:	ef 92       	push	r14
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	c3 54       	subi	r28, 0x43	; 67
    2364:	d1 09       	sbc	r29, r1
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    char message[] = "Bienvenido\r\nCOMANDOS:\r\n - ON\r\n - OFF\r\n - SET TIME\r\n - SET ALARM\r\n\0";
    2370:	0f 2e       	mov	r0, r31
    2372:	fe ec       	ldi	r31, 0xCE	; 206
    2374:	cf 2e       	mov	r12, r31
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	df 2e       	mov	r13, r31
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	ef 2e       	mov	r14, r31
    237e:	f0 2d       	mov	r31, r0
    2380:	83 e4       	ldi	r24, 0x43	; 67
    2382:	f6 01       	movw	r30, r12
    2384:	9e 01       	movw	r18, r28
    2386:	2f 5f       	subi	r18, 0xFF	; 255
    2388:	3f 4f       	sbci	r19, 0xFF	; 255
    238a:	d9 01       	movw	r26, r18
    238c:	7e 2d       	mov	r23, r14
    238e:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__movmemx_qi>
    uart_send_string(message);
    2392:	b9 01       	movw	r22, r18
    2394:	80 e8       	ldi	r24, 0x80	; 128
    2396:	0e 94 b0 12 	call	0x2560	; 0x2560 <uart_send_string>
}
    239a:	cd 5b       	subi	r28, 0xBD	; 189
    239c:	df 4f       	sbci	r29, 0xFF	; 255
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	ef 90       	pop	r14
    23ae:	df 90       	pop	r13
    23b0:	cf 90       	pop	r12
    23b2:	08 95       	ret

Disassembly of section .text.parse_command:

000020ba <parse_command>:
    INVALID
} command_t;

command_t command_type;

void parse_command(char *cmd){
    20ba:	cf 92       	push	r12
    20bc:	df 92       	push	r13
    20be:	ef 92       	push	r14
    if (strcmp(cmd, "ON") == 0)
    20c0:	6c 01       	movw	r12, r24
    20c2:	20 e8       	ldi	r18, 0x80	; 128
    20c4:	e2 2e       	mov	r14, r18
    20c6:	21 e1       	ldi	r18, 0x11	; 17
    20c8:	31 e0       	ldi	r19, 0x01	; 1
    20ca:	40 e0       	ldi	r20, 0x00	; 0
    20cc:	8e 2d       	mov	r24, r14
    20ce:	b6 01       	movw	r22, r12
    20d0:	0e 94 02 12 	call	0x2404	; 0x2404 <strcmp>
    20d4:	89 2b       	or	r24, r25
    20d6:	21 f4       	brne	.+8      	; 0x20e0 <parse_command+0x26>
        command_type = COMMAND_ON;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <command_type>
    20de:	29 c0       	rjmp	.+82     	; 0x2132 <parse_command+0x78>
    else if (strcmp(cmd, "OFF") == 0)
    20e0:	24 e1       	ldi	r18, 0x14	; 20
    20e2:	31 e0       	ldi	r19, 0x01	; 1
    20e4:	40 e0       	ldi	r20, 0x00	; 0
    20e6:	8e 2d       	mov	r24, r14
    20e8:	b6 01       	movw	r22, r12
    20ea:	0e 94 02 12 	call	0x2404	; 0x2404 <strcmp>
    20ee:	89 2b       	or	r24, r25
    20f0:	19 f4       	brne	.+6      	; 0x20f8 <parse_command+0x3e>
        command_type = COMMAND_OFF;
    20f2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <command_type>
    20f6:	1d c0       	rjmp	.+58     	; 0x2132 <parse_command+0x78>
    else if (strcmp(cmd, "SET TIME") == 0)
    20f8:	28 e1       	ldi	r18, 0x18	; 24
    20fa:	31 e0       	ldi	r19, 0x01	; 1
    20fc:	40 e0       	ldi	r20, 0x00	; 0
    20fe:	8e 2d       	mov	r24, r14
    2100:	b6 01       	movw	r22, r12
    2102:	0e 94 02 12 	call	0x2404	; 0x2404 <strcmp>
    2106:	89 2b       	or	r24, r25
    2108:	21 f4       	brne	.+8      	; 0x2112 <parse_command+0x58>
        command_type = COMMAND_SET_TIME;
    210a:	82 e0       	ldi	r24, 0x02	; 2
    210c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <command_type>
    2110:	10 c0       	rjmp	.+32     	; 0x2132 <parse_command+0x78>
    else if (strcmp(cmd, "SET ALARM") == 0)
    2112:	21 e2       	ldi	r18, 0x21	; 33
    2114:	31 e0       	ldi	r19, 0x01	; 1
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	8e 2d       	mov	r24, r14
    211a:	b6 01       	movw	r22, r12
    211c:	0e 94 02 12 	call	0x2404	; 0x2404 <strcmp>
    2120:	89 2b       	or	r24, r25
    2122:	21 f4       	brne	.+8      	; 0x212c <parse_command+0x72>
        command_type = COMMAND_SET_ALARM;
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <command_type>
    212a:	03 c0       	rjmp	.+6      	; 0x2132 <parse_command+0x78>
    else{
        command_type = INVALID; 
    212c:	84 e0       	ldi	r24, 0x04	; 4
    212e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <command_type>
    }
}
    2132:	ef 90       	pop	r14
    2134:	df 90       	pop	r13
    2136:	cf 90       	pop	r12
    2138:	08 95       	ret

Disassembly of section .text.main:

000010ba <main>:

int main(void){
    UART_init(BAUD_RATE);               // Inicializa UART con la velocidad de baudios definida
    10ba:	87 e6       	ldi	r24, 0x67	; 103
    10bc:	0e 94 6e 13 	call	0x26dc	; 0x26dc <UART_init>
    print_welcome_msg();                // Imprime mensaje de bienvenida
    10c0:	0e 94 aa 11 	call	0x2354	; 0x2354 <print_welcome_msg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10c4:	2f ef       	ldi	r18, 0xFF	; 255
    10c6:	80 e7       	ldi	r24, 0x70	; 112
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	21 50       	subi	r18, 0x01	; 1
    10cc:	80 40       	sbci	r24, 0x00	; 0
    10ce:	90 40       	sbci	r25, 0x00	; 0
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <main+0x10>
    10d2:	00 c0       	rjmp	.+0      	; 0x10d4 <main+0x1a>
    10d4:	00 00       	nop
    _delay_ms(50);

    timer_init();                       // Inicializa el timer1 para interrupciones cada segundo
    10d6:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <timer_init>

    i2c_init();                         // Inicializa I2C
    10da:	0e 94 be 13 	call	0x277c	; 0x277c <i2c_init>
    rtc_init();                         // Inicializa el RTC
    10de:	0e 94 ed 13 	call	0x27da	; 0x27da <rtc_init>
    10e2:	2f ef       	ldi	r18, 0xFF	; 255
    10e4:	80 e7       	ldi	r24, 0x70	; 112
    10e6:	92 e0       	ldi	r25, 0x02	; 2
    10e8:	21 50       	subi	r18, 0x01	; 1
    10ea:	80 40       	sbci	r24, 0x00	; 0
    10ec:	90 40       	sbci	r25, 0x00	; 0
    10ee:	e1 f7       	brne	.-8      	; 0x10e8 <main+0x2e>
    10f0:	00 c0       	rjmp	.+0      	; 0x10f2 <main+0x38>
    10f2:	00 00       	nop
    _delay_ms(50);

    get_initial_date(&current_date);    // Hora inicial hardcodeada
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <get_initial_date>
    rtc_set_time(&current_date);        // Configura el RTC con la fecha inicial
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	0e 94 79 11 	call	0x22f2	; 0x22f2 <rtc_set_time>
    1104:	2f ef       	ldi	r18, 0xFF	; 255
    1106:	80 e7       	ldi	r24, 0x70	; 112
    1108:	92 e0       	ldi	r25, 0x02	; 2
    110a:	21 50       	subi	r18, 0x01	; 1
    110c:	80 40       	sbci	r24, 0x00	; 0
    110e:	90 40       	sbci	r25, 0x00	; 0
    1110:	e1 f7       	brne	.-8      	; 0x110a <main+0x50>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <main+0x5a>
    1114:	00 00       	nop

    _delay_ms(50);
    sei();
    1116:	78 94       	sei

    while (1){
        // se ejecuta cada 1 segundo
        if (timer_flag){
    1118:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <timer_flag>
    111c:	88 23       	and	r24, r24
    111e:	09 f4       	brne	.+2      	; 0x1122 <main+0x68>
    1120:	5e c0       	rjmp	.+188    	; 0x11de <main+0x124>
            timer_flag = 0;
    1122:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <timer_flag>
            rtc_read_time(&current_date);  // leer el tiempo del DS3231
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	0e 94 1a 10 	call	0x2034	; 0x2034 <rtc_read_time>
            if (alarm_counter != 0) {
    112e:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <alarm_counter>
    1132:	88 23       	and	r24, r24
    1134:	59 f0       	breq	.+22     	; 0x114c <main+0x92>
                alarm_counter--;
    1136:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <alarm_counter>
    113a:	81 50       	subi	r24, 0x01	; 1
    113c:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <alarm_counter>
                uart_send_string("ALARMA\r\n");
    1140:	6b e2       	ldi	r22, 0x2B	; 43
    1142:	71 e0       	ldi	r23, 0x01	; 1
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	0e 94 b0 12 	call	0x2560	; 0x2560 <uart_send_string>
    114a:	49 c0       	rjmp	.+146    	; 0x11de <main+0x124>
            }
            else{
                // si esta el modo ON, enviar la hora actual
                if (flag_on && !WAITING_SET_TIME && !WAITING_SET_ALARM) {
    114c:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <flag_on>
    1150:	88 23       	and	r24, r24
    1152:	a1 f1       	breq	.+104    	; 0x11bc <main+0x102>
    1154:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <WAITING_SET_TIME>
    1158:	81 11       	cpse	r24, r1
    115a:	30 c0       	rjmp	.+96     	; 0x11bc <main+0x102>
    115c:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <WAITING_SET_ALARM>
    1160:	81 11       	cpse	r24, r1
    1162:	2c c0       	rjmp	.+88     	; 0x11bc <main+0x102>
                    sprintf(buffer, "FECHA: %02d/%02d/%02d HORA:%02d:%02d:%02d\r\n",
                            current_date.day, current_date.month, current_date.year,
                            current_date.hours, current_date.minutes, current_date.seconds);
    1164:	e0 e0       	ldi	r30, 0x00	; 0
    1166:	f1 e0       	ldi	r31, 0x01	; 1
    1168:	55 81       	ldd	r21, Z+5	; 0x05
    116a:	44 81       	ldd	r20, Z+4	; 0x04
    116c:	33 81       	ldd	r19, Z+3	; 0x03
            }
            else{
                // si esta el modo ON, enviar la hora actual
                if (flag_on && !WAITING_SET_TIME && !WAITING_SET_ALARM) {
                    sprintf(buffer, "FECHA: %02d/%02d/%02d HORA:%02d:%02d:%02d\r\n",
                            current_date.day, current_date.month, current_date.year,
    116e:	20 81       	ld	r18, Z
    1170:	91 81       	ldd	r25, Z+1	; 0x01
    1172:	82 81       	ldd	r24, Z+2	; 0x02
                uart_send_string("ALARMA\r\n");
            }
            else{
                // si esta el modo ON, enviar la hora actual
                if (flag_on && !WAITING_SET_TIME && !WAITING_SET_ALARM) {
                    sprintf(buffer, "FECHA: %02d/%02d/%02d HORA:%02d:%02d:%02d\r\n",
    1174:	1f 92       	push	r1
    1176:	5f 93       	push	r21
    1178:	1f 92       	push	r1
    117a:	4f 93       	push	r20
    117c:	1f 92       	push	r1
    117e:	3f 93       	push	r19
    1180:	1f 92       	push	r1
    1182:	2f 93       	push	r18
    1184:	1f 92       	push	r1
    1186:	9f 93       	push	r25
    1188:	1f 92       	push	r1
    118a:	8f 93       	push	r24
    118c:	84 e3       	ldi	r24, 0x34	; 52
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	a0 e0       	ldi	r26, 0x00	; 0
    1192:	af 93       	push	r26
    1194:	9f 93       	push	r25
    1196:	8f 93       	push	r24
    1198:	07 e8       	ldi	r16, 0x87	; 135
    119a:	11 e0       	ldi	r17, 0x01	; 1
    119c:	1f 93       	push	r17
    119e:	0f 93       	push	r16
    11a0:	0e 94 03 13 	call	0x2606	; 0x2606 <_sprintf_cdnopuxX>
                            current_date.day, current_date.month, current_date.year,
                            current_date.hours, current_date.minutes, current_date.seconds);
                    uart_send_string(buffer);
    11a4:	b8 01       	movw	r22, r16
    11a6:	80 e8       	ldi	r24, 0x80	; 128
    11a8:	0e 94 b0 12 	call	0x2560	; 0x2560 <uart_send_string>
    11ac:	8d b7       	in	r24, 0x3d	; 61
    11ae:	9e b7       	in	r25, 0x3e	; 62
    11b0:	41 96       	adiw	r24, 0x11	; 17
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	9e bf       	out	0x3e, r25	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	8d bf       	out	0x3d, r24	; 61
                }
                // si la alarma esta activa, verificar si se debe activar
                if (flag_alarm) {
    11bc:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <flag_alarm>
    11c0:	88 23       	and	r24, r24
    11c2:	69 f0       	breq	.+26     	; 0x11de <main+0x124>
                    if (check_alarm(&current_date, &alarm_date)) {
    11c4:	67 e0       	ldi	r22, 0x07	; 7
    11c6:	72 e0       	ldi	r23, 0x02	; 2
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	0e 94 47 11 	call	0x228e	; 0x228e <check_alarm>
    11d0:	88 23       	and	r24, r24
    11d2:	29 f0       	breq	.+10     	; 0x11de <main+0x124>
                        flag_alarm = 0; // Desactiva la alarma
    11d4:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <flag_alarm>
                        alarm_counter = 5;
    11d8:	85 e0       	ldi	r24, 0x05	; 5
    11da:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <alarm_counter>
                }
            }
        }

        // se ejecuta cada vez que se recibe un comando por UART
        if (rx_flag){
    11de:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <rx_flag>
    11e2:	88 23       	and	r24, r24
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <main+0x12e>
    11e6:	98 cf       	rjmp	.-208    	; 0x1118 <main+0x5e>
            rx_flag = 0;
    11e8:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <rx_flag>

            if (WAITING_SET_TIME){
    11ec:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <WAITING_SET_TIME>
    11f0:	88 23       	and	r24, r24
    11f2:	f9 f0       	breq	.+62     	; 0x1232 <main+0x178>
                //validar fecha, hora y actualizar RTC                
                ok = is_valid_date((char *)rx_buffer, &current_date);
    11f4:	67 e0       	ldi	r22, 0x07	; 7
    11f6:	71 e0       	ldi	r23, 0x01	; 1
    11f8:	80 e8       	ldi	r24, 0x80	; 128
    11fa:	40 e0       	ldi	r20, 0x00	; 0
    11fc:	51 e0       	ldi	r21, 0x01	; 1
    11fe:	0e 94 a4 05 	call	0xb48	; 0xb48 <is_valid_date>
    1202:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <ok>
                if (ok == 1){
    1206:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <ok>
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	61 f4       	brne	.+24     	; 0x1226 <main+0x16c>
                    rtc_set_time(&current_date); // Actualiza el RTC con la nueva fecha y hora
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	0e 94 79 11 	call	0x22f2	; 0x22f2 <rtc_set_time>
                    uart_send_string("Fecha y hora actualizadas correctamente.\r\n");
    1216:	60 e6       	ldi	r22, 0x60	; 96
    1218:	71 e0       	ldi	r23, 0x01	; 1
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	0e 94 b0 12 	call	0x2560	; 0x2560 <uart_send_string>
                    WAITING_SET_TIME = 0; // Resetea el flag de espera
    1220:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <WAITING_SET_TIME>
    1224:	79 cf       	rjmp	.-270    	; 0x1118 <main+0x5e>
                } else {
                    uart_send_string("Fecha y hora no validas. Formato esperado: DD/MM/YY HH:MM:SS\r\n");
    1226:	6b e8       	ldi	r22, 0x8B	; 139
    1228:	71 e0       	ldi	r23, 0x01	; 1
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	0e 94 b0 12 	call	0x2560	; 0x2560 <uart_send_string>
                }
                continue;
    1230:	73 cf       	rjmp	.-282    	; 0x1118 <main+0x5e>
            }

            if (WAITING_SET_ALARM){
    1232:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <WAITING_SET_ALARM>
    1236:	88 23       	and	r24, r24
    1238:	09 f1       	breq	.+66     	; 0x127c <main+0x1c2>
                //validar hora y actualizar alarma 
                ok = is_valid_time((char *)rx_buffer, &alarm_date, &current_date);
    123a:	00 e0       	ldi	r16, 0x00	; 0
    123c:	11 e0       	ldi	r17, 0x01	; 1
    123e:	20 e8       	ldi	r18, 0x80	; 128
    1240:	67 e0       	ldi	r22, 0x07	; 7
    1242:	71 e0       	ldi	r23, 0x01	; 1
    1244:	80 e8       	ldi	r24, 0x80	; 128
    1246:	47 e0       	ldi	r20, 0x07	; 7
    1248:	52 e0       	ldi	r21, 0x02	; 2
    124a:	0e 94 90 09 	call	0x1320	; 0x1320 <is_valid_time>
    124e:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <ok>
                if (ok){
    1252:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <ok>
    1256:	88 23       	and	r24, r24
    1258:	59 f0       	breq	.+22     	; 0x1270 <main+0x1b6>
                    WAITING_SET_ALARM = 0;
    125a:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <WAITING_SET_ALARM>
                    flag_alarm = 1;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <flag_alarm>
                    uart_send_string("Hora de alarma actualizada correctamente.\r\n");
    1264:	6a ec       	ldi	r22, 0xCA	; 202
    1266:	71 e0       	ldi	r23, 0x01	; 1
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	0e 94 b0 12 	call	0x2560	; 0x2560 <uart_send_string>
    126e:	54 cf       	rjmp	.-344    	; 0x1118 <main+0x5e>
                }
                else{
                    uart_send_string("Hora de alarma no valida. Formato esperado: HH:MM:SS\r\n");
    1270:	66 ef       	ldi	r22, 0xF6	; 246
    1272:	71 e0       	ldi	r23, 0x01	; 1
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	0e 94 b0 12 	call	0x2560	; 0x2560 <uart_send_string>
                }
                continue;
    127a:	4e cf       	rjmp	.-356    	; 0x1118 <main+0x5e>
           }

            parse_command((char *)rx_buffer); // Procesa el comando recibido
    127c:	87 e0       	ldi	r24, 0x07	; 7
    127e:	91 e0       	ldi	r25, 0x01	; 1
    1280:	0e 94 5d 10 	call	0x20ba	; 0x20ba <parse_command>

            // comando no reconocido
            if (command_type == INVALID) {
    1284:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <command_type>
    1288:	84 30       	cpi	r24, 0x04	; 4
    128a:	31 f4       	brne	.+12     	; 0x1298 <main+0x1de>
                uart_send_string("Comando no reconocido\r\n\0");
    128c:	6d e2       	ldi	r22, 0x2D	; 45
    128e:	72 e0       	ldi	r23, 0x02	; 2
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	0e 94 b0 12 	call	0x2560	; 0x2560 <uart_send_string>
                continue;
    1296:	40 cf       	rjmp	.-384    	; 0x1118 <main+0x5e>
            }
            // comando OFF
            else if (command_type == COMMAND_OFF){
    1298:	81 11       	cpse	r24, r1
    129a:	12 c0       	rjmp	.+36     	; 0x12c0 <main+0x206>
                if (flag_on) {
    129c:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <flag_on>
    12a0:	88 23       	and	r24, r24
    12a2:	41 f0       	breq	.+16     	; 0x12b4 <main+0x1fa>
                    flag_on = 0; // Desactiva el modo ON
    12a4:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <flag_on>
                    uart_send_string("MODO OFF activado.\r\n");
    12a8:	66 e4       	ldi	r22, 0x46	; 70
    12aa:	72 e0       	ldi	r23, 0x02	; 2
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	0e 94 b0 12 	call	0x2560	; 0x2560 <uart_send_string>
    12b2:	32 cf       	rjmp	.-412    	; 0x1118 <main+0x5e>
                } else {
                    uart_send_string("El sistema ya esta en modo OFF.\r\n");
    12b4:	6b e5       	ldi	r22, 0x5B	; 91
    12b6:	72 e0       	ldi	r23, 0x02	; 2
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	0e 94 b0 12 	call	0x2560	; 0x2560 <uart_send_string>
    12be:	2c cf       	rjmp	.-424    	; 0x1118 <main+0x5e>
                }
            }
            // comando ON
            else if (command_type == COMMAND_ON){
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	99 f4       	brne	.+38     	; 0x12ea <main+0x230>
                if (flag_on) {
    12c4:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <flag_on>
    12c8:	88 23       	and	r24, r24
    12ca:	31 f0       	breq	.+12     	; 0x12d8 <main+0x21e>
                    uart_send_string("El sistema ya esta en modo ON.\r\n");
    12cc:	6d e7       	ldi	r22, 0x7D	; 125
    12ce:	72 e0       	ldi	r23, 0x02	; 2
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	0e 94 b0 12 	call	0x2560	; 0x2560 <uart_send_string>
    12d6:	20 cf       	rjmp	.-448    	; 0x1118 <main+0x5e>
                } else {
                    flag_on = 1; // Activa el modo ON
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <flag_on>
                    uart_send_string("MODO ON activado.\r\n");
    12de:	6e e9       	ldi	r22, 0x9E	; 158
    12e0:	72 e0       	ldi	r23, 0x02	; 2
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	0e 94 b0 12 	call	0x2560	; 0x2560 <uart_send_string>
    12e8:	17 cf       	rjmp	.-466    	; 0x1118 <main+0x5e>
                }
            }
            // comando SET TIME
            else if (command_type == COMMAND_SET_TIME){
    12ea:	82 30       	cpi	r24, 0x02	; 2
    12ec:	59 f4       	brne	.+22     	; 0x1304 <main+0x24a>
                flag_on = 0;
    12ee:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <flag_on>
                WAITING_SET_TIME = 1;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <WAITING_SET_TIME>
                uart_send_string("Ingrese fecha y hora (DD/MM/YY HH:MM:SS):\r\n");
    12f8:	62 eb       	ldi	r22, 0xB2	; 178
    12fa:	72 e0       	ldi	r23, 0x02	; 2
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	0e 94 b0 12 	call	0x2560	; 0x2560 <uart_send_string>
    1302:	0a cf       	rjmp	.-492    	; 0x1118 <main+0x5e>
            }
            // comando SET ALARM
            else if (command_type == COMMAND_SET_ALARM){
    1304:	83 30       	cpi	r24, 0x03	; 3
    1306:	09 f0       	breq	.+2      	; 0x130a <main+0x250>
    1308:	07 cf       	rjmp	.-498    	; 0x1118 <main+0x5e>
                flag_on = 0;
    130a:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <flag_on>
                WAITING_SET_ALARM = 1;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <WAITING_SET_ALARM>
                uart_send_string("Ingrese hora de alarma (HH:MM:SS):\r\n");
    1314:	6e ed       	ldi	r22, 0xDE	; 222
    1316:	72 e0       	ldi	r23, 0x02	; 2
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	0e 94 b0 12 	call	0x2560	; 0x2560 <uart_send_string>
    131e:	fc ce       	rjmp	.-520    	; 0x1118 <main+0x5e>

Disassembly of section .text.bcd_to_int:

0000273c <bcd_to_int>:
#include "rtc.h"

uint8_t bcd_to_int(uint8_t bcd) {
    return (((bcd >> 4) & 0x0F) * 10) + (bcd & 0x0F);
    273c:	98 2f       	mov	r25, r24
    273e:	92 95       	swap	r25
    2740:	9f 70       	andi	r25, 0x0F	; 15
    2742:	99 0f       	add	r25, r25
    2744:	29 2f       	mov	r18, r25
    2746:	22 0f       	add	r18, r18
    2748:	22 0f       	add	r18, r18
    274a:	92 0f       	add	r25, r18
    274c:	8f 70       	andi	r24, 0x0F	; 15
}
    274e:	89 0f       	add	r24, r25
    2750:	08 95       	ret

Disassembly of section .text.int_to_bcd:

000025e0 <int_to_bcd>:

uint8_t int_to_bcd(uint8_t value) {
    return (((value / 10) << 4) & 0xF0) | (value % 10);
    25e0:	9d ec       	ldi	r25, 0xCD	; 205
    25e2:	89 9f       	mul	r24, r25
    25e4:	91 2d       	mov	r25, r1
    25e6:	11 24       	eor	r1, r1
    25e8:	96 95       	lsr	r25
    25ea:	96 95       	lsr	r25
    25ec:	96 95       	lsr	r25
    25ee:	20 e1       	ldi	r18, 0x10	; 16
    25f0:	92 9f       	mul	r25, r18
    25f2:	a0 01       	movw	r20, r0
    25f4:	11 24       	eor	r1, r1
    25f6:	99 0f       	add	r25, r25
    25f8:	29 2f       	mov	r18, r25
    25fa:	22 0f       	add	r18, r18
    25fc:	22 0f       	add	r18, r18
    25fe:	92 0f       	add	r25, r18
    2600:	89 1b       	sub	r24, r25
}
    2602:	84 2b       	or	r24, r20
    2604:	08 95       	ret

Disassembly of section .text.rtc_disable_alarm:

0000268a <rtc_disable_alarm>:
void rtc_init(void) {
    rtc_disable_alarm(); // Desactivar alarma al iniciar
}

void rtc_disable_alarm(void) {
    i2c_start();
    268a:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <i2c_start>
    i2c_write(DS3231_WRITE_MODE);
    268e:	80 ed       	ldi	r24, 0xD0	; 208
    2690:	0e 94 b4 13 	call	0x2768	; 0x2768 <i2c_write>
    i2c_write(DS3231_CONTROL_REG); // Apuntar al registro de control
    2694:	8e e0       	ldi	r24, 0x0E	; 14
    2696:	0e 94 b4 13 	call	0x2768	; 0x2768 <i2c_write>

    i2c_write(0x00); // Desactivar alarma 1 y 2
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	0e 94 b4 13 	call	0x2768	; 0x2768 <i2c_write>
    i2c_stop();
    26a0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <i2c_stop>
    26a4:	08 95       	ret

Disassembly of section .text.rtc_init:

000027da <rtc_init>:
uint8_t int_to_bcd(uint8_t value) {
    return (((value / 10) << 4) & 0xF0) | (value % 10);
}

void rtc_init(void) {
    rtc_disable_alarm(); // Desactivar alarma al iniciar
    27da:	0e 94 45 13 	call	0x268a	; 0x268a <rtc_disable_alarm>
    27de:	08 95       	ret

Disassembly of section .text.rtc_read_time:

00002034 <rtc_read_time>:

    i2c_write(0x00); // Desactivar alarma 1 y 2
    i2c_stop();
}

void rtc_read_time(date_t *date) {
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	ec 01       	movw	r28, r24
    i2c_start();
    203a:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <i2c_start>
    i2c_write(DS3231_WRITE_MODE);
    203e:	80 ed       	ldi	r24, 0xD0	; 208
    2040:	0e 94 b4 13 	call	0x2768	; 0x2768 <i2c_write>
    i2c_write(DS3231_SECONDS_REG);      // Setear el registro de inicio en segundos
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	0e 94 b4 13 	call	0x2768	; 0x2768 <i2c_write>

    i2c_stop();
    204a:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <i2c_stop>
    
    i2c_start();
    204e:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <i2c_start>
    i2c_write(DS3231_READ_MODE);
    2052:	81 ed       	ldi	r24, 0xD1	; 209
    2054:	0e 94 b4 13 	call	0x2768	; 0x2768 <i2c_write>

    date->seconds = bcd_to_int(i2c_read(0) & SECONDS_MASK);
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	0e 94 16 13 	call	0x262c	; 0x262c <i2c_read>
    205e:	8f 77       	andi	r24, 0x7F	; 127
    2060:	0e 94 9e 13 	call	0x273c	; 0x273c <bcd_to_int>
    2064:	8d 83       	std	Y+5, r24	; 0x05
    date->minutes = bcd_to_int(i2c_read(0) & MINUTES_MASK);
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	0e 94 16 13 	call	0x262c	; 0x262c <i2c_read>
    206c:	8f 77       	andi	r24, 0x7F	; 127
    206e:	0e 94 9e 13 	call	0x273c	; 0x273c <bcd_to_int>
    2072:	8c 83       	std	Y+4, r24	; 0x04
    date->hours = bcd_to_int(i2c_read(0) & HOURS_MASK);
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	0e 94 16 13 	call	0x262c	; 0x262c <i2c_read>
    207a:	8f 73       	andi	r24, 0x3F	; 63
    207c:	0e 94 9e 13 	call	0x273c	; 0x273c <bcd_to_int>
    2080:	8b 83       	std	Y+3, r24	; 0x03

    i2c_read(0);
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	0e 94 16 13 	call	0x262c	; 0x262c <i2c_read>

    date->day = bcd_to_int(i2c_read(0) & DAYS_MASK);
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	0e 94 16 13 	call	0x262c	; 0x262c <i2c_read>
    208e:	8f 73       	andi	r24, 0x3F	; 63
    2090:	0e 94 9e 13 	call	0x273c	; 0x273c <bcd_to_int>
    2094:	8a 83       	std	Y+2, r24	; 0x02
    date->month = bcd_to_int(i2c_read(0) & MONTHS_MASK); // Es necesario para ignorar el bit de century
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	0e 94 16 13 	call	0x262c	; 0x262c <i2c_read>
    209c:	8f 71       	andi	r24, 0x1F	; 31
    209e:	0e 94 9e 13 	call	0x273c	; 0x273c <bcd_to_int>
    20a2:	89 83       	std	Y+1, r24	; 0x01
    date->year = bcd_to_int(i2c_read(1) & YEARS_MASK);
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	0e 94 16 13 	call	0x262c	; 0x262c <i2c_read>
    20aa:	0e 94 9e 13 	call	0x273c	; 0x273c <bcd_to_int>
    20ae:	88 83       	st	Y, r24

    i2c_stop();
    20b0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <i2c_stop>
}
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	08 95       	ret

Disassembly of section .text.rtc_set_time:

000022f2 <rtc_set_time>:

void rtc_set_time(date_t *date)
{
    22f2:	cf 93       	push	r28
    22f4:	df 93       	push	r29
    22f6:	ec 01       	movw	r28, r24
    i2c_start();
    22f8:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <i2c_start>
    i2c_write(DS3231_WRITE_MODE);
    22fc:	80 ed       	ldi	r24, 0xD0	; 208
    22fe:	0e 94 b4 13 	call	0x2768	; 0x2768 <i2c_write>
    i2c_write(DS3231_SECONDS_REG); // Apuntar al primer registro (segundos)
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	0e 94 b4 13 	call	0x2768	; 0x2768 <i2c_write>

    i2c_write(int_to_bcd(date->seconds));
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <int_to_bcd>
    230e:	0e 94 b4 13 	call	0x2768	; 0x2768 <i2c_write>
    i2c_write(int_to_bcd(date->minutes));
    2312:	8c 81       	ldd	r24, Y+4	; 0x04
    2314:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <int_to_bcd>
    2318:	0e 94 b4 13 	call	0x2768	; 0x2768 <i2c_write>
    i2c_write(int_to_bcd(date->hours));
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <int_to_bcd>
    2322:	0e 94 b4 13 	call	0x2768	; 0x2768 <i2c_write>
    i2c_write(0); // Día de la semana (lo ignoramos o seteamos a 1)
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	0e 94 b4 13 	call	0x2768	; 0x2768 <i2c_write>

    i2c_write(int_to_bcd(date->day));
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <int_to_bcd>
    2332:	0e 94 b4 13 	call	0x2768	; 0x2768 <i2c_write>
    i2c_write(int_to_bcd(date->month));
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <int_to_bcd>
    233c:	0e 94 b4 13 	call	0x2768	; 0x2768 <i2c_write>
    i2c_write(int_to_bcd(date->year));
    2340:	88 81       	ld	r24, Y
    2342:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <int_to_bcd>
    2346:	0e 94 b4 13 	call	0x2768	; 0x2768 <i2c_write>

    i2c_stop();
    234a:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <i2c_stop>
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	08 95       	ret

Disassembly of section .text.timer_init:

000025b8 <timer_init>:
#include "timer.h"

void timer_init(void) {
    // Timer1 en modo CTC 
    // TCCR1A = 0;
    TCCR1B |= (1 << WGM12); // Modo CTC, TOP = OCR1A
    25b8:	e1 e8       	ldi	r30, 0x81	; 129
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	88 60       	ori	r24, 0x08	; 8
    25c0:	80 83       	st	Z, r24

    // 16MHz / 1024 = 15.625kHz -> 1s = 15,625 ciclos
    OCR1A = 15624;
    25c2:	88 e0       	ldi	r24, 0x08	; 8
    25c4:	9d e3       	ldi	r25, 0x3D	; 61
    25c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    25ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    // Prescaler = 1024
    TCCR1B |= (1 << CS12) | (1 << CS10);
    25ce:	80 81       	ld	r24, Z
    25d0:	85 60       	ori	r24, 0x05	; 5
    25d2:	80 83       	st	Z, r24

    // Habilita interrupción por comparación en OCR1A
    TIMSK1 |= (1 << OCIE1A);
    25d4:	ef e6       	ldi	r30, 0x6F	; 111
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	82 60       	ori	r24, 0x02	; 2
    25dc:	80 83       	st	Z, r24
    25de:	08 95       	ret

Disassembly of section .text.__vector_11:

0000266c <__vector_11>:
}

// ISR de Timer1 – ejecutado cada 1 segundo
ISR(TIMER1_COMPA_vect) {
    266c:	1f 92       	push	r1
    266e:	0f 92       	push	r0
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	0f 92       	push	r0
    2674:	11 24       	eor	r1, r1
    2676:	8f 93       	push	r24
    timer_flag = 1;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <timer_flag>
    // uart_send_string("Timer interrupt triggered\r\n");
    267e:	8f 91       	pop	r24
    2680:	0f 90       	pop	r0
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	0f 90       	pop	r0
    2686:	1f 90       	pop	r1
    2688:	18 95       	reti

Disassembly of section .text.UART_init:

000026dc <UART_init>:
volatile uint8_t tx_tail = 0;
volatile uint8_t tx_busy = 0;
char buffer[BUFFER_SIZE];

void UART_init(uint8_t baud_rate){
    UCSR0B = 0; // Deshabilita RX, TX y RXC interrupt
    26dc:	e1 ec       	ldi	r30, 0xC1	; 193
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	10 82       	st	Z, r1
    UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);              // Configura el formato de datos: 8 bits, sin paridad, 1 bit de stop
    26e2:	96 e0       	ldi	r25, 0x06	; 6
    26e4:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    UBRR0L = (unsigned char)baud_rate;                // Configura el baud rate
    26e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); // Habilita RX, TX y RXC interrupt
    26ec:	80 81       	ld	r24, Z
    26ee:	88 69       	ori	r24, 0x98	; 152
    26f0:	80 83       	st	Z, r24
    26f2:	08 95       	ret

Disassembly of section .text.__vector_18:

0000213a <__vector_18>:
}

ISR(USART_RX_vect){
    213a:	1f 92       	push	r1
    213c:	0f 92       	push	r0
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	0f 92       	push	r0
    2142:	11 24       	eor	r1, r1
    2144:	8f 93       	push	r24
    2146:	9f 93       	push	r25
    2148:	ef 93       	push	r30
    214a:	ff 93       	push	r31
    uint8_t received_byte = UDR0;
    214c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    if ((received_byte == '\b' || received_byte == 0x7F) && cmd_index > 0){ // Manejo de retroceso
    2150:	88 30       	cpi	r24, 0x08	; 8
    2152:	11 f0       	breq	.+4      	; 0x2158 <__vector_18+0x1e>
    2154:	8f 37       	cpi	r24, 0x7F	; 127
    2156:	51 f4       	brne	.+20     	; 0x216c <__vector_18+0x32>
    2158:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <cmd_index>
    215c:	99 23       	and	r25, r25
    215e:	31 f0       	breq	.+12     	; 0x216c <__vector_18+0x32>
        cmd_index--;
    2160:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <cmd_index>
    2164:	81 50       	subi	r24, 0x01	; 1
    2166:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <cmd_index>
    216a:	1e c0       	rjmp	.+60     	; 0x21a8 <__vector_18+0x6e>
    }
    else if (received_byte == '\r' || received_byte == '\n'){
    216c:	8d 30       	cpi	r24, 0x0D	; 13
    216e:	11 f0       	breq	.+4      	; 0x2174 <__vector_18+0x3a>
    2170:	8a 30       	cpi	r24, 0x0A	; 10
    2172:	61 f4       	brne	.+24     	; 0x218c <__vector_18+0x52>
        rx_buffer[cmd_index] = '\0';
    2174:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <cmd_index>
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	e9 5f       	subi	r30, 0xF9	; 249
    217c:	fe 4f       	sbci	r31, 0xFE	; 254
    217e:	10 82       	st	Z, r1
        cmd_index = 0;
    2180:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <cmd_index>
        rx_flag = 1;                  //flag de comando listo para el main loop
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <rx_flag>
    218a:	0e c0       	rjmp	.+28     	; 0x21a8 <__vector_18+0x6e>
        // char *aux;
        // sprintf(aux, "Comando recibido: %s\r\n", rx_buffer);
        // uart_send_string(aux); // Enviar el comando recibido
        // uart_send_string("\r\n");
    }
    else if (cmd_index < BUFFER_SIZE - 1){
    218c:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <cmd_index>
    2190:	9f 37       	cpi	r25, 0x7F	; 127
    2192:	50 f4       	brcc	.+20     	; 0x21a8 <__vector_18+0x6e>
        rx_buffer[cmd_index++] = received_byte;
    2194:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <cmd_index>
    2198:	91 e0       	ldi	r25, 0x01	; 1
    219a:	9e 0f       	add	r25, r30
    219c:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <cmd_index>
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	e9 5f       	subi	r30, 0xF9	; 249
    21a4:	fe 4f       	sbci	r31, 0xFE	; 254
    21a6:	80 83       	st	Z, r24
        // uart_send_char(received_byte);
    }
}
    21a8:	ff 91       	pop	r31
    21aa:	ef 91       	pop	r30
    21ac:	9f 91       	pop	r25
    21ae:	8f 91       	pop	r24
    21b0:	0f 90       	pop	r0
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	0f 90       	pop	r0
    21b6:	1f 90       	pop	r1
    21b8:	18 95       	reti

Disassembly of section .text.uart_send_char:

000023b4 <uart_send_char>:

void uart_send_char(uint8_t ch){
    uint8_t next_head = (tx_head + 1) % BUFFER_SIZE;
    23b4:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <tx_head>
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	2f 5f       	subi	r18, 0xFF	; 255
    23bc:	3f 4f       	sbci	r19, 0xFF	; 255
    23be:	2f 77       	andi	r18, 0x7F	; 127
    23c0:	30 78       	andi	r19, 0x80	; 128
    23c2:	33 23       	and	r19, r19
    23c4:	34 f4       	brge	.+12     	; 0x23d2 <uart_send_char+0x1e>
    23c6:	21 50       	subi	r18, 0x01	; 1
    23c8:	31 09       	sbc	r19, r1
    23ca:	20 68       	ori	r18, 0x80	; 128
    23cc:	3f 6f       	ori	r19, 0xFF	; 255
    23ce:	2f 5f       	subi	r18, 0xFF	; 255
    23d0:	3f 4f       	sbci	r19, 0xFF	; 255

    while (next_head == tx_tail)
    23d2:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <tx_tail>
    23d6:	29 17       	cp	r18, r25
    23d8:	e1 f3       	breq	.-8      	; 0x23d2 <uart_send_char+0x1e>
        ;

    tx_buffer[tx_head] = ch;
    23da:	e0 91 b8 02 	lds	r30, 0x02B8	; 0x8002b8 <tx_head>
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	ed 5e       	subi	r30, 0xED	; 237
    23e2:	fd 4f       	sbci	r31, 0xFD	; 253
    23e4:	80 83       	st	Z, r24
    tx_head = next_head;
    23e6:	20 93 b8 02 	sts	0x02B8, r18	; 0x8002b8 <tx_head>

    // si no hay transmisión en curso, iniciar la transmisión
    if (!tx_busy){
    23ea:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <tx_busy>
    23ee:	81 11       	cpse	r24, r1
    23f0:	08 c0       	rjmp	.+16     	; 0x2402 <uart_send_char+0x4e>
        tx_busy = 1;
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <tx_busy>
        UCSR0B |= (1 << UDRIE0); //habilitar interrupcion de transmisión
    23f8:	e1 ec       	ldi	r30, 0xC1	; 193
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	80 62       	ori	r24, 0x20	; 32
    2400:	80 83       	st	Z, r24
    2402:	08 95       	ret

Disassembly of section .text.uart_send_string:

00002560 <uart_send_string>:
    }
}

void uart_send_string(const char *str){
    2560:	cf 92       	push	r12
    2562:	df 92       	push	r13
    2564:	ef 92       	push	r14
    2566:	6b 01       	movw	r12, r22
    2568:	e8 2e       	mov	r14, r24
    while (*str) {
    256a:	06 c0       	rjmp	.+12     	; 0x2578 <uart_send_string+0x18>
        uart_send_char(*str++);
    256c:	9f ef       	ldi	r25, 0xFF	; 255
    256e:	c9 1a       	sub	r12, r25
    2570:	d9 0a       	sbc	r13, r25
    2572:	e9 0a       	sbc	r14, r25
    2574:	0e 94 da 11 	call	0x23b4	; 0x23b4 <uart_send_char>
        UCSR0B |= (1 << UDRIE0); //habilitar interrupcion de transmisión
    }
}

void uart_send_string(const char *str){
    while (*str) {
    2578:	f6 01       	movw	r30, r12
    257a:	84 91       	lpm	r24, Z
    257c:	e7 fc       	sbrc	r14, 7
    257e:	80 81       	ld	r24, Z
    2580:	81 11       	cpse	r24, r1
    2582:	f4 cf       	rjmp	.-24     	; 0x256c <uart_send_string+0xc>
        uart_send_char(*str++);
    }
}
    2584:	ef 90       	pop	r14
    2586:	df 90       	pop	r13
    2588:	cf 90       	pop	r12
    258a:	08 95       	ret

Disassembly of section .text.__vector_19:

000021ba <__vector_19>:

ISR(USART_UDRE_vect){
    21ba:	1f 92       	push	r1
    21bc:	0f 92       	push	r0
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	0f 92       	push	r0
    21c2:	11 24       	eor	r1, r1
    21c4:	8f 93       	push	r24
    21c6:	9f 93       	push	r25
    21c8:	ef 93       	push	r30
    21ca:	ff 93       	push	r31
    if (tx_tail == tx_head){
    21cc:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <tx_tail>
    21d0:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <tx_head>
    21d4:	98 13       	cpse	r25, r24
    21d6:	08 c0       	rjmp	.+16     	; 0x21e8 <__vector_19+0x2e>
        tx_busy = 0;
    21d8:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <tx_busy>
        UCSR0B &= ~(1 << UDRIE0); // deshabilita interrupcion
    21dc:	e1 ec       	ldi	r30, 0xC1	; 193
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	8f 7d       	andi	r24, 0xDF	; 223
    21e4:	80 83       	st	Z, r24
        return;
    21e6:	16 c0       	rjmp	.+44     	; 0x2214 <__vector_19+0x5a>
    }

    UDR0 = tx_buffer[tx_tail];
    21e8:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <tx_tail>
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	ed 5e       	subi	r30, 0xED	; 237
    21f0:	fd 4f       	sbci	r31, 0xFD	; 253
    21f2:	80 81       	ld	r24, Z
    21f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    tx_tail = (tx_tail + 1) % BUFFER_SIZE;
    21f8:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <tx_tail>
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	8f 77       	andi	r24, 0x7F	; 127
    2202:	90 78       	andi	r25, 0x80	; 128
    2204:	99 23       	and	r25, r25
    2206:	24 f4       	brge	.+8      	; 0x2210 <__vector_19+0x56>
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	80 68       	ori	r24, 0x80	; 128
    220c:	9f 6f       	ori	r25, 0xFF	; 255
    220e:	01 96       	adiw	r24, 0x01	; 1
    2210:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <tx_tail>
    2214:	ff 91       	pop	r31
    2216:	ef 91       	pop	r30
    2218:	9f 91       	pop	r25
    221a:	8f 91       	pop	r24
    221c:	0f 90       	pop	r0
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	0f 90       	pop	r0
    2222:	1f 90       	pop	r1
    2224:	18 95       	reti

Disassembly of section .text.get_initial_date:

000026f4 <get_initial_date>:
#include "utils.h"

// Función para hardcodear una fecha inicial
void get_initial_date(date_t *date) {
    26f4:	fc 01       	movw	r30, r24
    date->year = 25;
    26f6:	89 e1       	ldi	r24, 0x19	; 25
    26f8:	80 83       	st	Z, r24
    date->month = 6;
    26fa:	86 e0       	ldi	r24, 0x06	; 6
    26fc:	81 83       	std	Z+1, r24	; 0x01
    date->day = 14;
    26fe:	8e e0       	ldi	r24, 0x0E	; 14
    2700:	82 83       	std	Z+2, r24	; 0x02
    date->hours = 16;
    2702:	80 e1       	ldi	r24, 0x10	; 16
    2704:	83 83       	std	Z+3, r24	; 0x03
    date->minutes = 0; // Minuto 0
    2706:	14 82       	std	Z+4, r1	; 0x04
    date->seconds = 0; // Segundo 0
    2708:	15 82       	std	Z+5, r1	; 0x05
    270a:	08 95       	ret

Disassembly of section .text.check_alarm:

0000228e <check_alarm>:
}

uint8_t check_alarm(date_t *current_date, date_t *alarm_date) {
    // Compara la fecha y hora actual con la alarma
    if (current_date->year == alarm_date->year &&
    228e:	fc 01       	movw	r30, r24
    2290:	30 81       	ld	r19, Z
    2292:	fb 01       	movw	r30, r22
    2294:	20 81       	ld	r18, Z
    2296:	32 13       	cpse	r19, r18
    2298:	20 c0       	rjmp	.+64     	; 0x22da <check_alarm+0x4c>
        current_date->month == alarm_date->month &&
    229a:	fc 01       	movw	r30, r24
    229c:	31 81       	ldd	r19, Z+1	; 0x01
    229e:	fb 01       	movw	r30, r22
    22a0:	21 81       	ldd	r18, Z+1	; 0x01
    date->seconds = 0; // Segundo 0
}

uint8_t check_alarm(date_t *current_date, date_t *alarm_date) {
    // Compara la fecha y hora actual con la alarma
    if (current_date->year == alarm_date->year &&
    22a2:	32 13       	cpse	r19, r18
    22a4:	1c c0       	rjmp	.+56     	; 0x22de <check_alarm+0x50>
        current_date->month == alarm_date->month &&
        current_date->day == alarm_date->day &&
    22a6:	fc 01       	movw	r30, r24
    22a8:	32 81       	ldd	r19, Z+2	; 0x02
    22aa:	fb 01       	movw	r30, r22
    22ac:	22 81       	ldd	r18, Z+2	; 0x02
}

uint8_t check_alarm(date_t *current_date, date_t *alarm_date) {
    // Compara la fecha y hora actual con la alarma
    if (current_date->year == alarm_date->year &&
        current_date->month == alarm_date->month &&
    22ae:	32 13       	cpse	r19, r18
    22b0:	18 c0       	rjmp	.+48     	; 0x22e2 <check_alarm+0x54>
        current_date->day == alarm_date->day &&
        current_date->hours == alarm_date->hours &&
    22b2:	fc 01       	movw	r30, r24
    22b4:	33 81       	ldd	r19, Z+3	; 0x03
    22b6:	fb 01       	movw	r30, r22
    22b8:	23 81       	ldd	r18, Z+3	; 0x03

uint8_t check_alarm(date_t *current_date, date_t *alarm_date) {
    // Compara la fecha y hora actual con la alarma
    if (current_date->year == alarm_date->year &&
        current_date->month == alarm_date->month &&
        current_date->day == alarm_date->day &&
    22ba:	32 13       	cpse	r19, r18
    22bc:	14 c0       	rjmp	.+40     	; 0x22e6 <check_alarm+0x58>
        current_date->hours == alarm_date->hours &&
        current_date->minutes == alarm_date->minutes &&
    22be:	fc 01       	movw	r30, r24
    22c0:	34 81       	ldd	r19, Z+4	; 0x04
    22c2:	fb 01       	movw	r30, r22
    22c4:	24 81       	ldd	r18, Z+4	; 0x04
uint8_t check_alarm(date_t *current_date, date_t *alarm_date) {
    // Compara la fecha y hora actual con la alarma
    if (current_date->year == alarm_date->year &&
        current_date->month == alarm_date->month &&
        current_date->day == alarm_date->day &&
        current_date->hours == alarm_date->hours &&
    22c6:	32 13       	cpse	r19, r18
    22c8:	10 c0       	rjmp	.+32     	; 0x22ea <check_alarm+0x5c>
        current_date->minutes == alarm_date->minutes &&
        current_date->seconds == alarm_date->seconds) {
    22ca:	fc 01       	movw	r30, r24
    22cc:	95 81       	ldd	r25, Z+5	; 0x05
    22ce:	fb 01       	movw	r30, r22
    22d0:	85 81       	ldd	r24, Z+5	; 0x05
    // Compara la fecha y hora actual con la alarma
    if (current_date->year == alarm_date->year &&
        current_date->month == alarm_date->month &&
        current_date->day == alarm_date->day &&
        current_date->hours == alarm_date->hours &&
        current_date->minutes == alarm_date->minutes &&
    22d2:	98 17       	cp	r25, r24
    22d4:	61 f0       	breq	.+24     	; 0x22ee <check_alarm+0x60>
        current_date->seconds == alarm_date->seconds) {
        return 1; // Alarma activada
    }
    return 0; // Alarma no activada
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	08 95       	ret
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	08 95       	ret
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	08 95       	ret
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	08 95       	ret
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	08 95       	ret
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	08 95       	ret
        current_date->month == alarm_date->month &&
        current_date->day == alarm_date->day &&
        current_date->hours == alarm_date->hours &&
        current_date->minutes == alarm_date->minutes &&
        current_date->seconds == alarm_date->seconds) {
        return 1; // Alarma activada
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    }
    return 0; // Alarma no activada
}
    22f0:	08 95       	ret

Disassembly of section .text.is_valid_date:

00000b48 <is_valid_date>:

uint8_t is_valid_date(const char *str, date_t *date) {
 b48:	6f 92       	push	r6
 b4a:	7f 92       	push	r7
 b4c:	8f 92       	push	r8
 b4e:	cf 92       	push	r12
 b50:	df 92       	push	r13
 b52:	ef 92       	push	r14
 b54:	ff 92       	push	r15
 b56:	0f 93       	push	r16
 b58:	1f 93       	push	r17
 b5a:	cf 93       	push	r28
 b5c:	df 93       	push	r29
 b5e:	cd b7       	in	r28, 0x3d	; 61
 b60:	de b7       	in	r29, 0x3e	; 62
 b62:	68 97       	sbiw	r28, 0x18	; 24
 b64:	0f b6       	in	r0, 0x3f	; 63
 b66:	f8 94       	cli
 b68:	de bf       	out	0x3e, r29	; 62
 b6a:	0f be       	out	0x3f, r0	; 63
 b6c:	cd bf       	out	0x3d, r28	; 61
 b6e:	6b 01       	movw	r12, r22
 b70:	e8 2e       	mov	r14, r24
 b72:	8a 01       	movw	r16, r20
    if (strlen(str) != 17) return 0;
 b74:	0e 94 c6 12 	call	0x258c	; 0x258c <strlen>
 b78:	41 97       	sbiw	r24, 0x11	; 17
 b7a:	09 f0       	breq	.+2      	; 0xb7e <is_valid_date+0x36>
 b7c:	31 c1       	rjmp	.+610    	; 0xde0 <is_valid_date+0x298>

    // validar formato de separadores
    if (str[2] != '/' || str[5] != '/' || str[8] != ' ' ||
 b7e:	ae 2d       	mov	r26, r14
 b80:	c6 01       	movw	r24, r12
 b82:	02 96       	adiw	r24, 0x02	; 2
 b84:	a1 1d       	adc	r26, r1
 b86:	fc 01       	movw	r30, r24
 b88:	84 91       	lpm	r24, Z
 b8a:	a7 fd       	sbrc	r26, 7
 b8c:	80 81       	ld	r24, Z
 b8e:	8f 32       	cpi	r24, 0x2F	; 47
 b90:	09 f0       	breq	.+2      	; 0xb94 <is_valid_date+0x4c>
 b92:	28 c1       	rjmp	.+592    	; 0xde4 <is_valid_date+0x29c>
 b94:	ae 2d       	mov	r26, r14
 b96:	c6 01       	movw	r24, r12
 b98:	05 96       	adiw	r24, 0x05	; 5
 b9a:	a1 1d       	adc	r26, r1
 b9c:	fc 01       	movw	r30, r24
 b9e:	84 91       	lpm	r24, Z
 ba0:	a7 fd       	sbrc	r26, 7
 ba2:	80 81       	ld	r24, Z
 ba4:	8f 32       	cpi	r24, 0x2F	; 47
 ba6:	09 f0       	breq	.+2      	; 0xbaa <is_valid_date+0x62>
 ba8:	1f c1       	rjmp	.+574    	; 0xde8 <is_valid_date+0x2a0>
 baa:	ae 2d       	mov	r26, r14
 bac:	c6 01       	movw	r24, r12
 bae:	08 96       	adiw	r24, 0x08	; 8
 bb0:	a1 1d       	adc	r26, r1
 bb2:	fc 01       	movw	r30, r24
 bb4:	84 91       	lpm	r24, Z
 bb6:	a7 fd       	sbrc	r26, 7
 bb8:	80 81       	ld	r24, Z
 bba:	80 32       	cpi	r24, 0x20	; 32
 bbc:	09 f0       	breq	.+2      	; 0xbc0 <is_valid_date+0x78>
 bbe:	16 c1       	rjmp	.+556    	; 0xdec <is_valid_date+0x2a4>
        str[11] != ':' || str[14] != ':') {
 bc0:	ae 2d       	mov	r26, r14
 bc2:	c6 01       	movw	r24, r12
 bc4:	0b 96       	adiw	r24, 0x0b	; 11
 bc6:	a1 1d       	adc	r26, r1
 bc8:	fc 01       	movw	r30, r24
 bca:	84 91       	lpm	r24, Z
 bcc:	a7 fd       	sbrc	r26, 7
 bce:	80 81       	ld	r24, Z

uint8_t is_valid_date(const char *str, date_t *date) {
    if (strlen(str) != 17) return 0;

    // validar formato de separadores
    if (str[2] != '/' || str[5] != '/' || str[8] != ' ' ||
 bd0:	8a 33       	cpi	r24, 0x3A	; 58
 bd2:	09 f0       	breq	.+2      	; 0xbd6 <is_valid_date+0x8e>
 bd4:	0d c1       	rjmp	.+538    	; 0xdf0 <is_valid_date+0x2a8>
        str[11] != ':' || str[14] != ':') {
 bd6:	ae 2d       	mov	r26, r14
 bd8:	c6 01       	movw	r24, r12
 bda:	0e 96       	adiw	r24, 0x0e	; 14
 bdc:	a1 1d       	adc	r26, r1
 bde:	fc 01       	movw	r30, r24
 be0:	84 91       	lpm	r24, Z
 be2:	a7 fd       	sbrc	r26, 7
 be4:	80 81       	ld	r24, Z
 be6:	8a 33       	cpi	r24, 0x3A	; 58
 be8:	09 f0       	breq	.+2      	; 0xbec <is_valid_date+0xa4>
 bea:	04 c1       	rjmp	.+520    	; 0xdf4 <is_valid_date+0x2ac>
 bec:	80 e0       	ldi	r24, 0x00	; 0
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	22 c0       	rjmp	.+68     	; 0xc36 <is_valid_date+0xee>
        return 0;
    }

    for (int i = 0; i < 17; i++) {
        if (i == 2 || i == 5 || i == 8 || i == 11 || i == 14)
 bf2:	82 30       	cpi	r24, 0x02	; 2
 bf4:	91 05       	cpc	r25, r1
 bf6:	f1 f0       	breq	.+60     	; 0xc34 <is_valid_date+0xec>
 bf8:	85 30       	cpi	r24, 0x05	; 5
 bfa:	91 05       	cpc	r25, r1
 bfc:	d9 f0       	breq	.+54     	; 0xc34 <is_valid_date+0xec>
 bfe:	88 30       	cpi	r24, 0x08	; 8
 c00:	91 05       	cpc	r25, r1
 c02:	c1 f0       	breq	.+48     	; 0xc34 <is_valid_date+0xec>
 c04:	8b 30       	cpi	r24, 0x0B	; 11
 c06:	91 05       	cpc	r25, r1
 c08:	a9 f0       	breq	.+42     	; 0xc34 <is_valid_date+0xec>
 c0a:	8e 30       	cpi	r24, 0x0E	; 14
 c0c:	91 05       	cpc	r25, r1
 c0e:	91 f0       	breq	.+36     	; 0xc34 <is_valid_date+0xec>
            continue;
        if (!isdigit((unsigned char)str[i]))
 c10:	4e 2d       	mov	r20, r14
 c12:	96 01       	movw	r18, r12
 c14:	28 0f       	add	r18, r24
 c16:	39 1f       	adc	r19, r25
 c18:	41 1d       	adc	r20, r1
 c1a:	97 fd       	sbrc	r25, 7
 c1c:	4a 95       	dec	r20
 c1e:	f9 01       	movw	r30, r18
 c20:	24 91       	lpm	r18, Z
 c22:	47 fd       	sbrc	r20, 7
 c24:	20 81       	ld	r18, Z
 c26:	30 e0       	ldi	r19, 0x00	; 0
 c28:	20 53       	subi	r18, 0x30	; 48
 c2a:	31 09       	sbc	r19, r1
 c2c:	2a 30       	cpi	r18, 0x0A	; 10
 c2e:	31 05       	cpc	r19, r1
 c30:	08 f0       	brcs	.+2      	; 0xc34 <is_valid_date+0xec>
 c32:	e2 c0       	rjmp	.+452    	; 0xdf8 <is_valid_date+0x2b0>
    if (str[2] != '/' || str[5] != '/' || str[8] != ' ' ||
        str[11] != ':' || str[14] != ':') {
        return 0;
    }

    for (int i = 0; i < 17; i++) {
 c34:	01 96       	adiw	r24, 0x01	; 1
 c36:	81 31       	cpi	r24, 0x11	; 17
 c38:	91 05       	cpc	r25, r1
 c3a:	dc f2       	brlt	.-74     	; 0xbf2 <is_valid_date+0xaa>
            continue;
        if (!isdigit((unsigned char)str[i]))
            return 0;
    }

    uint8_t day   = (str[0] - '0') * 10 + (str[1] - '0');
 c3c:	f6 01       	movw	r30, r12
 c3e:	84 91       	lpm	r24, Z
 c40:	e7 fc       	sbrc	r14, 7
 c42:	80 81       	ld	r24, Z
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	c0 97       	sbiw	r24, 0x30	; 48
 c48:	88 0f       	add	r24, r24
 c4a:	68 2f       	mov	r22, r24
 c4c:	66 0f       	add	r22, r22
 c4e:	66 0f       	add	r22, r22
 c50:	86 0f       	add	r24, r22
 c52:	4e 2d       	mov	r20, r14
 c54:	96 01       	movw	r18, r12
 c56:	2f 5f       	subi	r18, 0xFF	; 255
 c58:	3f 4f       	sbci	r19, 0xFF	; 255
 c5a:	4f 4f       	sbci	r20, 0xFF	; 255
 c5c:	f9 01       	movw	r30, r18
 c5e:	64 91       	lpm	r22, Z
 c60:	47 fd       	sbrc	r20, 7
 c62:	60 81       	ld	r22, Z
 c64:	68 0f       	add	r22, r24
 c66:	50 ed       	ldi	r21, 0xD0	; 208
 c68:	56 0f       	add	r21, r22
    uint8_t month = (str[3] - '0') * 10 + (str[4] - '0');
 c6a:	ae 2d       	mov	r26, r14
 c6c:	c6 01       	movw	r24, r12
 c6e:	03 96       	adiw	r24, 0x03	; 3
 c70:	a1 1d       	adc	r26, r1
 c72:	fc 01       	movw	r30, r24
 c74:	84 91       	lpm	r24, Z
 c76:	a7 fd       	sbrc	r26, 7
 c78:	80 81       	ld	r24, Z
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	c0 97       	sbiw	r24, 0x30	; 48
 c7e:	88 0f       	add	r24, r24
 c80:	28 2f       	mov	r18, r24
 c82:	22 0f       	add	r18, r18
 c84:	22 0f       	add	r18, r18
 c86:	82 0f       	add	r24, r18
 c88:	4e 2d       	mov	r20, r14
 c8a:	96 01       	movw	r18, r12
 c8c:	2c 5f       	subi	r18, 0xFC	; 252
 c8e:	3f 4f       	sbci	r19, 0xFF	; 255
 c90:	4f 4f       	sbci	r20, 0xFF	; 255
 c92:	f9 01       	movw	r30, r18
 c94:	94 91       	lpm	r25, Z
 c96:	47 fd       	sbrc	r20, 7
 c98:	90 81       	ld	r25, Z
 c9a:	28 2f       	mov	r18, r24
 c9c:	29 0f       	add	r18, r25
 c9e:	20 53       	subi	r18, 0x30	; 48
    uint8_t year  = (str[6] - '0') * 10 + (str[7] - '0');
 ca0:	ae 2d       	mov	r26, r14
 ca2:	c6 01       	movw	r24, r12
 ca4:	06 96       	adiw	r24, 0x06	; 6
 ca6:	a1 1d       	adc	r26, r1
 ca8:	fc 01       	movw	r30, r24
 caa:	84 91       	lpm	r24, Z
 cac:	a7 fd       	sbrc	r26, 7
 cae:	80 81       	ld	r24, Z
 cb0:	90 e0       	ldi	r25, 0x00	; 0
 cb2:	c0 97       	sbiw	r24, 0x30	; 48
 cb4:	88 0f       	add	r24, r24
 cb6:	48 2f       	mov	r20, r24
 cb8:	44 0f       	add	r20, r20
 cba:	44 0f       	add	r20, r20
 cbc:	84 0f       	add	r24, r20
 cbe:	36 01       	movw	r6, r12
 cc0:	8e 2c       	mov	r8, r14
 cc2:	97 e0       	ldi	r25, 0x07	; 7
 cc4:	69 0e       	add	r6, r25
 cc6:	71 1c       	adc	r7, r1
 cc8:	81 1c       	adc	r8, r1
 cca:	f3 01       	movw	r30, r6
 ccc:	94 91       	lpm	r25, Z
 cce:	87 fc       	sbrc	r8, 7
 cd0:	90 81       	ld	r25, Z
 cd2:	48 2f       	mov	r20, r24
 cd4:	49 0f       	add	r20, r25
 cd6:	40 53       	subi	r20, 0x30	; 48
    uint8_t hour  = (str[9]  - '0') * 10 + (str[10] - '0');
 cd8:	ae 2d       	mov	r26, r14
 cda:	c6 01       	movw	r24, r12
 cdc:	09 96       	adiw	r24, 0x09	; 9
 cde:	a1 1d       	adc	r26, r1
 ce0:	fc 01       	movw	r30, r24
 ce2:	84 91       	lpm	r24, Z
 ce4:	a7 fd       	sbrc	r26, 7
 ce6:	80 81       	ld	r24, Z
 ce8:	90 e0       	ldi	r25, 0x00	; 0
 cea:	c0 97       	sbiw	r24, 0x30	; 48
 cec:	88 0f       	add	r24, r24
 cee:	38 2f       	mov	r19, r24
 cf0:	33 0f       	add	r19, r19
 cf2:	33 0f       	add	r19, r19
 cf4:	83 0f       	add	r24, r19
 cf6:	36 01       	movw	r6, r12
 cf8:	8e 2c       	mov	r8, r14
 cfa:	ea e0       	ldi	r30, 0x0A	; 10
 cfc:	6e 0e       	add	r6, r30
 cfe:	71 1c       	adc	r7, r1
 d00:	81 1c       	adc	r8, r1
 d02:	f3 01       	movw	r30, r6
 d04:	94 91       	lpm	r25, Z
 d06:	87 fc       	sbrc	r8, 7
 d08:	90 81       	ld	r25, Z
 d0a:	38 2f       	mov	r19, r24
 d0c:	39 0f       	add	r19, r25
 d0e:	30 53       	subi	r19, 0x30	; 48
    uint8_t min   = (str[12] - '0') * 10 + (str[13] - '0');
 d10:	ae 2d       	mov	r26, r14
 d12:	c6 01       	movw	r24, r12
 d14:	0c 96       	adiw	r24, 0x0c	; 12
 d16:	a1 1d       	adc	r26, r1
 d18:	fc 01       	movw	r30, r24
 d1a:	84 91       	lpm	r24, Z
 d1c:	a7 fd       	sbrc	r26, 7
 d1e:	80 81       	ld	r24, Z
 d20:	90 e0       	ldi	r25, 0x00	; 0
 d22:	c0 97       	sbiw	r24, 0x30	; 48
 d24:	88 0f       	add	r24, r24
 d26:	78 2f       	mov	r23, r24
 d28:	77 0f       	add	r23, r23
 d2a:	77 0f       	add	r23, r23
 d2c:	87 0f       	add	r24, r23
 d2e:	36 01       	movw	r6, r12
 d30:	8e 2c       	mov	r8, r14
 d32:	fd e0       	ldi	r31, 0x0D	; 13
 d34:	6f 0e       	add	r6, r31
 d36:	71 1c       	adc	r7, r1
 d38:	81 1c       	adc	r8, r1
 d3a:	f3 01       	movw	r30, r6
 d3c:	94 91       	lpm	r25, Z
 d3e:	87 fc       	sbrc	r8, 7
 d40:	90 81       	ld	r25, Z
 d42:	78 2f       	mov	r23, r24
 d44:	79 0f       	add	r23, r25
 d46:	70 53       	subi	r23, 0x30	; 48
    uint8_t sec   = (str[15] - '0') * 10 + (str[16] - '0');
 d48:	ae 2d       	mov	r26, r14
 d4a:	c6 01       	movw	r24, r12
 d4c:	0f 96       	adiw	r24, 0x0f	; 15
 d4e:	a1 1d       	adc	r26, r1
 d50:	fc 01       	movw	r30, r24
 d52:	84 91       	lpm	r24, Z
 d54:	a7 fd       	sbrc	r26, 7
 d56:	80 81       	ld	r24, Z
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	c0 97       	sbiw	r24, 0x30	; 48
 d5c:	88 0f       	add	r24, r24
 d5e:	98 2f       	mov	r25, r24
 d60:	99 0f       	add	r25, r25
 d62:	99 0f       	add	r25, r25
 d64:	89 0f       	add	r24, r25
 d66:	90 e1       	ldi	r25, 0x10	; 16
 d68:	c9 0e       	add	r12, r25
 d6a:	d1 1c       	adc	r13, r1
 d6c:	e1 1c       	adc	r14, r1
 d6e:	f6 01       	movw	r30, r12
 d70:	94 91       	lpm	r25, Z
 d72:	e7 fc       	sbrc	r14, 7
 d74:	90 81       	ld	r25, Z
 d76:	89 0f       	add	r24, r25
 d78:	80 53       	subi	r24, 0x30	; 48

    // validar rangos
    if (day < 1 || day > 31 || month < 1 || month > 12 ||
 d7a:	61 53       	subi	r22, 0x31	; 49
 d7c:	6f 31       	cpi	r22, 0x1F	; 31
 d7e:	f0 f5       	brcc	.+124    	; 0xdfc <is_valid_date+0x2b4>
 d80:	22 23       	and	r18, r18
 d82:	f1 f1       	breq	.+124    	; 0xe00 <is_valid_date+0x2b8>
 d84:	2d 30       	cpi	r18, 0x0D	; 13
 d86:	f0 f5       	brcc	.+124    	; 0xe04 <is_valid_date+0x2bc>
 d88:	38 31       	cpi	r19, 0x18	; 24
 d8a:	f0 f5       	brcc	.+124    	; 0xe08 <is_valid_date+0x2c0>
        hour > 23 || min > 59 || sec > 59) {
 d8c:	7c 33       	cpi	r23, 0x3C	; 60
 d8e:	f0 f5       	brcc	.+124    	; 0xe0c <is_valid_date+0x2c4>
 d90:	8c 33       	cpi	r24, 0x3C	; 60
 d92:	f0 f5       	brcc	.+124    	; 0xe10 <is_valid_date+0x2c8>
        return 0;
    }

    // Validar días del mes
    const int days_in_month[] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
 d94:	98 e1       	ldi	r25, 0x18	; 24
 d96:	e5 e9       	ldi	r30, 0x95	; 149
 d98:	f2 e0       	ldi	r31, 0x02	; 2
 d9a:	de 01       	movw	r26, r28
 d9c:	11 96       	adiw	r26, 0x01	; 1
 d9e:	01 90       	ld	r0, Z+
 da0:	0d 92       	st	X+, r0
 da2:	9a 95       	dec	r25
 da4:	e1 f7       	brne	.-8      	; 0xd9e <is_valid_date+0x256>
    if (day > days_in_month[month - 1]) {
 da6:	a5 2f       	mov	r26, r21
 da8:	b0 e0       	ldi	r27, 0x00	; 0
 daa:	e2 2f       	mov	r30, r18
 dac:	f0 e0       	ldi	r31, 0x00	; 0
 dae:	31 97       	sbiw	r30, 0x01	; 1
 db0:	ee 0f       	add	r30, r30
 db2:	ff 1f       	adc	r31, r31
 db4:	ee 24       	eor	r14, r14
 db6:	e3 94       	inc	r14
 db8:	f1 2c       	mov	r15, r1
 dba:	ec 0e       	add	r14, r28
 dbc:	fd 1e       	adc	r15, r29
 dbe:	ee 0d       	add	r30, r14
 dc0:	ff 1d       	adc	r31, r15
 dc2:	01 90       	ld	r0, Z+
 dc4:	f0 81       	ld	r31, Z
 dc6:	e0 2d       	mov	r30, r0
 dc8:	ea 17       	cp	r30, r26
 dca:	fb 07       	cpc	r31, r27
 dcc:	1c f1       	brlt	.+70     	; 0xe14 <is_valid_date+0x2cc>
        return 0;
    }

    date->day = (uint8_t)day;
 dce:	f8 01       	movw	r30, r16
 dd0:	52 83       	std	Z+2, r21	; 0x02
    date->month = (uint8_t)month;
 dd2:	21 83       	std	Z+1, r18	; 0x01
    date->year = (uint8_t)year;
 dd4:	40 83       	st	Z, r20
    date->hours = (uint8_t)hour;
 dd6:	33 83       	std	Z+3, r19	; 0x03
    date->minutes = (uint8_t)min;
 dd8:	74 83       	std	Z+4, r23	; 0x04
    date->seconds = (uint8_t)sec;
 dda:	85 83       	std	Z+5, r24	; 0x05

    return 1;
 ddc:	81 e0       	ldi	r24, 0x01	; 1
 dde:	1b c0       	rjmp	.+54     	; 0xe16 <is_valid_date+0x2ce>
    }
    return 0; // Alarma no activada
}

uint8_t is_valid_date(const char *str, date_t *date) {
    if (strlen(str) != 17) return 0;
 de0:	80 e0       	ldi	r24, 0x00	; 0
 de2:	19 c0       	rjmp	.+50     	; 0xe16 <is_valid_date+0x2ce>

    // validar formato de separadores
    if (str[2] != '/' || str[5] != '/' || str[8] != ' ' ||
        str[11] != ':' || str[14] != ':') {
        return 0;
 de4:	80 e0       	ldi	r24, 0x00	; 0
 de6:	17 c0       	rjmp	.+46     	; 0xe16 <is_valid_date+0x2ce>
 de8:	80 e0       	ldi	r24, 0x00	; 0
 dea:	15 c0       	rjmp	.+42     	; 0xe16 <is_valid_date+0x2ce>
 dec:	80 e0       	ldi	r24, 0x00	; 0
 dee:	13 c0       	rjmp	.+38     	; 0xe16 <is_valid_date+0x2ce>
 df0:	80 e0       	ldi	r24, 0x00	; 0
 df2:	11 c0       	rjmp	.+34     	; 0xe16 <is_valid_date+0x2ce>
 df4:	80 e0       	ldi	r24, 0x00	; 0
 df6:	0f c0       	rjmp	.+30     	; 0xe16 <is_valid_date+0x2ce>

    for (int i = 0; i < 17; i++) {
        if (i == 2 || i == 5 || i == 8 || i == 11 || i == 14)
            continue;
        if (!isdigit((unsigned char)str[i]))
            return 0;
 df8:	80 e0       	ldi	r24, 0x00	; 0
 dfa:	0d c0       	rjmp	.+26     	; 0xe16 <is_valid_date+0x2ce>
    uint8_t sec   = (str[15] - '0') * 10 + (str[16] - '0');

    // validar rangos
    if (day < 1 || day > 31 || month < 1 || month > 12 ||
        hour > 23 || min > 59 || sec > 59) {
        return 0;
 dfc:	80 e0       	ldi	r24, 0x00	; 0
 dfe:	0b c0       	rjmp	.+22     	; 0xe16 <is_valid_date+0x2ce>
 e00:	80 e0       	ldi	r24, 0x00	; 0
 e02:	09 c0       	rjmp	.+18     	; 0xe16 <is_valid_date+0x2ce>
 e04:	80 e0       	ldi	r24, 0x00	; 0
 e06:	07 c0       	rjmp	.+14     	; 0xe16 <is_valid_date+0x2ce>
 e08:	80 e0       	ldi	r24, 0x00	; 0
 e0a:	05 c0       	rjmp	.+10     	; 0xe16 <is_valid_date+0x2ce>
 e0c:	80 e0       	ldi	r24, 0x00	; 0
 e0e:	03 c0       	rjmp	.+6      	; 0xe16 <is_valid_date+0x2ce>
 e10:	80 e0       	ldi	r24, 0x00	; 0
 e12:	01 c0       	rjmp	.+2      	; 0xe16 <is_valid_date+0x2ce>
    }

    // Validar días del mes
    const int days_in_month[] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
    if (day > days_in_month[month - 1]) {
        return 0;
 e14:	80 e0       	ldi	r24, 0x00	; 0
    date->hours = (uint8_t)hour;
    date->minutes = (uint8_t)min;
    date->seconds = (uint8_t)sec;

    return 1;
}
 e16:	68 96       	adiw	r28, 0x18	; 24
 e18:	0f b6       	in	r0, 0x3f	; 63
 e1a:	f8 94       	cli
 e1c:	de bf       	out	0x3e, r29	; 62
 e1e:	0f be       	out	0x3f, r0	; 63
 e20:	cd bf       	out	0x3d, r28	; 61
 e22:	df 91       	pop	r29
 e24:	cf 91       	pop	r28
 e26:	1f 91       	pop	r17
 e28:	0f 91       	pop	r16
 e2a:	ff 90       	pop	r15
 e2c:	ef 90       	pop	r14
 e2e:	df 90       	pop	r13
 e30:	cf 90       	pop	r12
 e32:	8f 90       	pop	r8
 e34:	7f 90       	pop	r7
 e36:	6f 90       	pop	r6
 e38:	08 95       	ret

Disassembly of section .text.is_valid_time:

00001320 <is_valid_time>:

uint8_t is_valid_time(const char *str, date_t *result, const date_t *current_date) {
    1320:	6f 92       	push	r6
    1322:	7f 92       	push	r7
    1324:	8f 92       	push	r8
    1326:	cf 92       	push	r12
    1328:	df 92       	push	r13
    132a:	ef 92       	push	r14
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	6b 01       	movw	r12, r22
    1336:	e8 2e       	mov	r14, r24
    1338:	ea 01       	movw	r28, r20
    133a:	38 01       	movw	r6, r16
    133c:	82 2e       	mov	r8, r18
    if (strlen(str) != 8) return 0;
    133e:	0e 94 c6 12 	call	0x258c	; 0x258c <strlen>
    1342:	08 97       	sbiw	r24, 0x08	; 8
    1344:	09 f0       	breq	.+2      	; 0x1348 <is_valid_time+0x28>
    1346:	a4 c0       	rjmp	.+328    	; 0x1490 <is_valid_time+0x170>

    // validar formato HH:MM:SS
    if (str[2] != ':' || str[5] != ':')
    1348:	ae 2d       	mov	r26, r14
    134a:	c6 01       	movw	r24, r12
    134c:	02 96       	adiw	r24, 0x02	; 2
    134e:	a1 1d       	adc	r26, r1
    1350:	fc 01       	movw	r30, r24
    1352:	84 91       	lpm	r24, Z
    1354:	a7 fd       	sbrc	r26, 7
    1356:	80 81       	ld	r24, Z
    1358:	8a 33       	cpi	r24, 0x3A	; 58
    135a:	09 f0       	breq	.+2      	; 0x135e <is_valid_time+0x3e>
    135c:	9b c0       	rjmp	.+310    	; 0x1494 <is_valid_time+0x174>
    135e:	ae 2d       	mov	r26, r14
    1360:	c6 01       	movw	r24, r12
    1362:	05 96       	adiw	r24, 0x05	; 5
    1364:	a1 1d       	adc	r26, r1
    1366:	fc 01       	movw	r30, r24
    1368:	84 91       	lpm	r24, Z
    136a:	a7 fd       	sbrc	r26, 7
    136c:	80 81       	ld	r24, Z
    136e:	8a 33       	cpi	r24, 0x3A	; 58
    1370:	09 f0       	breq	.+2      	; 0x1374 <is_valid_time+0x54>
    1372:	92 c0       	rjmp	.+292    	; 0x1498 <is_valid_time+0x178>
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	19 c0       	rjmp	.+50     	; 0x13ac <is_valid_time+0x8c>
        return 0;

    for (int i = 0; i < 8; i++) {
        if (i == 2 || i == 5) continue;
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	91 05       	cpc	r25, r1
    137e:	a9 f0       	breq	.+42     	; 0x13aa <is_valid_time+0x8a>
    1380:	85 30       	cpi	r24, 0x05	; 5
    1382:	91 05       	cpc	r25, r1
    1384:	91 f0       	breq	.+36     	; 0x13aa <is_valid_time+0x8a>
        if (!isdigit((unsigned char)str[i]))
    1386:	4e 2d       	mov	r20, r14
    1388:	96 01       	movw	r18, r12
    138a:	28 0f       	add	r18, r24
    138c:	39 1f       	adc	r19, r25
    138e:	41 1d       	adc	r20, r1
    1390:	97 fd       	sbrc	r25, 7
    1392:	4a 95       	dec	r20
    1394:	f9 01       	movw	r30, r18
    1396:	24 91       	lpm	r18, Z
    1398:	47 fd       	sbrc	r20, 7
    139a:	20 81       	ld	r18, Z
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	20 53       	subi	r18, 0x30	; 48
    13a0:	31 09       	sbc	r19, r1
    13a2:	2a 30       	cpi	r18, 0x0A	; 10
    13a4:	31 05       	cpc	r19, r1
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <is_valid_time+0x8a>
    13a8:	79 c0       	rjmp	.+242    	; 0x149c <is_valid_time+0x17c>

    // validar formato HH:MM:SS
    if (str[2] != ':' || str[5] != ':')
        return 0;

    for (int i = 0; i < 8; i++) {
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	88 30       	cpi	r24, 0x08	; 8
    13ae:	91 05       	cpc	r25, r1
    13b0:	24 f3       	brlt	.-56     	; 0x137a <is_valid_time+0x5a>
        if (i == 2 || i == 5) continue;
        if (!isdigit((unsigned char)str[i]))
            return 0;
    }

    uint8_t hour = (str[0] - '0') * 10 + (str[1] - '0');
    13b2:	f6 01       	movw	r30, r12
    13b4:	84 91       	lpm	r24, Z
    13b6:	e7 fc       	sbrc	r14, 7
    13b8:	80 81       	ld	r24, Z
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	c0 97       	sbiw	r24, 0x30	; 48
    13be:	88 0f       	add	r24, r24
    13c0:	28 2f       	mov	r18, r24
    13c2:	22 0f       	add	r18, r18
    13c4:	22 0f       	add	r18, r18
    13c6:	82 0f       	add	r24, r18
    13c8:	4e 2d       	mov	r20, r14
    13ca:	96 01       	movw	r18, r12
    13cc:	2f 5f       	subi	r18, 0xFF	; 255
    13ce:	3f 4f       	sbci	r19, 0xFF	; 255
    13d0:	4f 4f       	sbci	r20, 0xFF	; 255
    13d2:	f9 01       	movw	r30, r18
    13d4:	94 91       	lpm	r25, Z
    13d6:	47 fd       	sbrc	r20, 7
    13d8:	90 81       	ld	r25, Z
    13da:	28 2f       	mov	r18, r24
    13dc:	29 0f       	add	r18, r25
    13de:	20 53       	subi	r18, 0x30	; 48
    uint8_t min  = (str[3] - '0') * 10 + (str[4] - '0');
    13e0:	ae 2d       	mov	r26, r14
    13e2:	c6 01       	movw	r24, r12
    13e4:	03 96       	adiw	r24, 0x03	; 3
    13e6:	a1 1d       	adc	r26, r1
    13e8:	fc 01       	movw	r30, r24
    13ea:	84 91       	lpm	r24, Z
    13ec:	a7 fd       	sbrc	r26, 7
    13ee:	80 81       	ld	r24, Z
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	c0 97       	sbiw	r24, 0x30	; 48
    13f4:	88 0f       	add	r24, r24
    13f6:	98 2f       	mov	r25, r24
    13f8:	99 0f       	add	r25, r25
    13fa:	99 0f       	add	r25, r25
    13fc:	89 0f       	add	r24, r25
    13fe:	6e 2d       	mov	r22, r14
    1400:	a6 01       	movw	r20, r12
    1402:	4c 5f       	subi	r20, 0xFC	; 252
    1404:	5f 4f       	sbci	r21, 0xFF	; 255
    1406:	6f 4f       	sbci	r22, 0xFF	; 255
    1408:	fa 01       	movw	r30, r20
    140a:	94 91       	lpm	r25, Z
    140c:	67 fd       	sbrc	r22, 7
    140e:	90 81       	ld	r25, Z
    1410:	98 0f       	add	r25, r24
    1412:	30 ed       	ldi	r19, 0xD0	; 208
    1414:	39 0f       	add	r19, r25
    uint8_t sec  = (str[6] - '0') * 10 + (str[7] - '0');
    1416:	ae 2d       	mov	r26, r14
    1418:	c6 01       	movw	r24, r12
    141a:	06 96       	adiw	r24, 0x06	; 6
    141c:	a1 1d       	adc	r26, r1
    141e:	fc 01       	movw	r30, r24
    1420:	84 91       	lpm	r24, Z
    1422:	a7 fd       	sbrc	r26, 7
    1424:	80 81       	ld	r24, Z
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	c0 97       	sbiw	r24, 0x30	; 48
    142a:	88 0f       	add	r24, r24
    142c:	98 2f       	mov	r25, r24
    142e:	99 0f       	add	r25, r25
    1430:	99 0f       	add	r25, r25
    1432:	89 0f       	add	r24, r25
    1434:	97 e0       	ldi	r25, 0x07	; 7
    1436:	c9 0e       	add	r12, r25
    1438:	d1 1c       	adc	r13, r1
    143a:	e1 1c       	adc	r14, r1
    143c:	f6 01       	movw	r30, r12
    143e:	94 91       	lpm	r25, Z
    1440:	e7 fc       	sbrc	r14, 7
    1442:	90 81       	ld	r25, Z
    1444:	98 0f       	add	r25, r24
    1446:	90 53       	subi	r25, 0x30	; 48

    if (hour > 23 || min > 59 || sec > 59)
    1448:	28 31       	cpi	r18, 0x18	; 24
    144a:	50 f5       	brcc	.+84     	; 0x14a0 <is_valid_time+0x180>
    144c:	3c 33       	cpi	r19, 0x3C	; 60
    144e:	50 f5       	brcc	.+84     	; 0x14a4 <is_valid_time+0x184>
    1450:	9c 33       	cpi	r25, 0x3C	; 60
    1452:	50 f5       	brcc	.+84     	; 0x14a8 <is_valid_time+0x188>
        return 0;

    result->year = current_date->year;
    1454:	f3 01       	movw	r30, r6
    1456:	84 91       	lpm	r24, Z
    1458:	87 fc       	sbrc	r8, 7
    145a:	80 81       	ld	r24, Z
    145c:	88 83       	st	Y, r24
    result->month = current_date->month;
    145e:	e8 2c       	mov	r14, r8
    1460:	63 01       	movw	r12, r6
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	c8 1a       	sub	r12, r24
    1466:	d8 0a       	sbc	r13, r24
    1468:	e8 0a       	sbc	r14, r24
    146a:	f6 01       	movw	r30, r12
    146c:	84 91       	lpm	r24, Z
    146e:	e7 fc       	sbrc	r14, 7
    1470:	80 81       	ld	r24, Z
    1472:	89 83       	std	Y+1, r24	; 0x01
    result->day = current_date->day;
    1474:	82 e0       	ldi	r24, 0x02	; 2
    1476:	68 0e       	add	r6, r24
    1478:	71 1c       	adc	r7, r1
    147a:	81 1c       	adc	r8, r1
    147c:	f3 01       	movw	r30, r6
    147e:	84 91       	lpm	r24, Z
    1480:	87 fc       	sbrc	r8, 7
    1482:	80 81       	ld	r24, Z
    1484:	8a 83       	std	Y+2, r24	; 0x02

    result->hours = (uint8_t)hour;
    1486:	2b 83       	std	Y+3, r18	; 0x03
    result->minutes = (uint8_t)min;
    1488:	3c 83       	std	Y+4, r19	; 0x04
    result->seconds = (uint8_t)sec;
    148a:	9d 83       	std	Y+5, r25	; 0x05

    return 1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	0d c0       	rjmp	.+26     	; 0x14aa <is_valid_time+0x18a>

    return 1;
}

uint8_t is_valid_time(const char *str, date_t *result, const date_t *current_date) {
    if (strlen(str) != 8) return 0;
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	0b c0       	rjmp	.+22     	; 0x14aa <is_valid_time+0x18a>

    // validar formato HH:MM:SS
    if (str[2] != ':' || str[5] != ':')
        return 0;
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	09 c0       	rjmp	.+18     	; 0x14aa <is_valid_time+0x18a>
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	07 c0       	rjmp	.+14     	; 0x14aa <is_valid_time+0x18a>

    for (int i = 0; i < 8; i++) {
        if (i == 2 || i == 5) continue;
        if (!isdigit((unsigned char)str[i]))
            return 0;
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	05 c0       	rjmp	.+10     	; 0x14aa <is_valid_time+0x18a>
    uint8_t hour = (str[0] - '0') * 10 + (str[1] - '0');
    uint8_t min  = (str[3] - '0') * 10 + (str[4] - '0');
    uint8_t sec  = (str[6] - '0') * 10 + (str[7] - '0');

    if (hour > 23 || min > 59 || sec > 59)
        return 0;
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	03 c0       	rjmp	.+6      	; 0x14aa <is_valid_time+0x18a>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	01 c0       	rjmp	.+2      	; 0x14aa <is_valid_time+0x18a>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    result->hours = (uint8_t)hour;
    result->minutes = (uint8_t)min;
    result->seconds = (uint8_t)sec;

    return 1;
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	ef 90       	pop	r14
    14b4:	df 90       	pop	r13
    14b6:	cf 90       	pop	r12
    14b8:	8f 90       	pop	r8
    14ba:	7f 90       	pop	r7
    14bc:	6f 90       	pop	r6
    14be:	08 95       	ret

Disassembly of section .text.libgcc:

000026c2 <__movmemx_qi>:
    26c2:	99 27       	eor	r25, r25

000026c4 <__movmemx_hi>:
    26c4:	77 fd       	sbrc	r23, 7
    26c6:	05 c0       	rjmp	.+10     	; 0x26d2 <__movmemx_hi+0xe>
    26c8:	05 90       	lpm	r0, Z+
    26ca:	0d 92       	st	X+, r0
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	e1 f7       	brne	.-8      	; 0x26c8 <__movmemx_hi+0x4>
    26d0:	08 95       	ret
    26d2:	01 90       	ld	r0, Z+
    26d4:	0d 92       	st	X+, r0
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	e1 f7       	brne	.-8      	; 0x26d2 <__movmemx_hi+0xe>
    26da:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000027ee <_fini>:
    27ee:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000027f0 <__funcs_on_exit>:
    27f0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000027f2 <__simulator_exit>:
    27f2:	08 95       	ret

Disassembly of section .text.exit:

00002752 <exit>:
    2752:	ec 01       	movw	r28, r24
    2754:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__funcs_on_exit>
    2758:	0e 94 f7 13 	call	0x27ee	; 0x27ee <_fini>
    275c:	ce 01       	movw	r24, r28
    275e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__simulator_exit>
    2762:	ce 01       	movw	r24, r28
    2764:	0e 94 f5 13 	call	0x27ea	; 0x27ea <_Exit>

Disassembly of section .text.__wrap_sprintf:

00002606 <_sprintf_cdnopuxX>:
    2606:	a0 e0       	ldi	r26, 0x00	; 0
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e9 e0       	ldi	r30, 0x09	; 9
    260c:	f3 e1       	ldi	r31, 0x13	; 19
    260e:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__prologue_saves__+0x20>
    2612:	9e 01       	movw	r18, r28
    2614:	26 5f       	subi	r18, 0xF6	; 246
    2616:	3f 4f       	sbci	r19, 0xFF	; 255
    2618:	4f 81       	ldd	r20, Y+7	; 0x07
    261a:	58 85       	ldd	r21, Y+8	; 0x08
    261c:	69 85       	ldd	r22, Y+9	; 0x09
    261e:	8d 81       	ldd	r24, Y+5	; 0x05
    2620:	9e 81       	ldd	r25, Y+6	; 0x06
    2622:	0e 94 86 13 	call	0x270c	; 0x270c <__vsprintf>
    2626:	e2 e0       	ldi	r30, 0x02	; 2
    2628:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__epilogue_restores__+0x20>

Disassembly of section .text.__fmt_s:

00001bb4 <__fmt_s>:
    1bb4:	2f 92       	push	r2
    1bb6:	3f 92       	push	r3
    1bb8:	4f 92       	push	r4
    1bba:	6f 92       	push	r6
    1bbc:	7f 92       	push	r7
    1bbe:	8f 92       	push	r8
    1bc0:	af 92       	push	r10
    1bc2:	bf 92       	push	r11
    1bc4:	cf 92       	push	r12
    1bc6:	df 92       	push	r13
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	27 97       	sbiw	r28, 0x07	; 7
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	6c 01       	movw	r12, r24
    1be6:	7b 01       	movw	r14, r22
    1be8:	39 01       	movw	r6, r18
    1bea:	84 2e       	mov	r8, r20
    1bec:	98 01       	movw	r18, r16
    1bee:	89 e1       	ldi	r24, 0x19	; 25
    1bf0:	28 2e       	mov	r2, r24
    1bf2:	83 e0       	ldi	r24, 0x03	; 3
    1bf4:	38 2e       	mov	r3, r24
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	48 2e       	mov	r4, r24
    1bfa:	87 e0       	ldi	r24, 0x07	; 7
    1bfc:	f1 01       	movw	r30, r2
    1bfe:	ae 01       	movw	r20, r28
    1c00:	4f 5f       	subi	r20, 0xFF	; 255
    1c02:	5f 4f       	sbci	r21, 0xFF	; 255
    1c04:	da 01       	movw	r26, r20
    1c06:	74 2d       	mov	r23, r4
    1c08:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__movmemx_qi>
    1c0c:	f7 01       	movw	r30, r14
    1c0e:	02 81       	ldd	r16, Z+2	; 0x02
    1c10:	13 81       	ldd	r17, Z+3	; 0x03
    1c12:	a4 80       	ldd	r10, Z+4	; 0x04
    1c14:	b5 80       	ldd	r11, Z+5	; 0x05
    1c16:	e0 80       	ld	r14, Z
    1c18:	f1 80       	ldd	r15, Z+1	; 0x01
    1c1a:	61 14       	cp	r6, r1
    1c1c:	71 04       	cpc	r7, r1
    1c1e:	81 04       	cpc	r8, r1
    1c20:	19 f4       	brne	.+6      	; 0x1c28 <__fmt_s+0x74>
    1c22:	3a 01       	movw	r6, r20
    1c24:	f0 e8       	ldi	r31, 0x80	; 128
    1c26:	8f 2e       	mov	r8, r31
    1c28:	21 15       	cp	r18, r1
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	29 f4       	brne	.+10     	; 0x1c38 <__fmt_s+0x84>
    1c2e:	88 2d       	mov	r24, r8
    1c30:	b3 01       	movw	r22, r6
    1c32:	0e 94 c6 12 	call	0x258c	; 0x258c <strlen>
    1c36:	9c 01       	movw	r18, r24
    1c38:	17 fd       	sbrc	r17, 7
    1c3a:	04 c0       	rjmp	.+8      	; 0x1c44 <__fmt_s+0x90>
    1c3c:	02 17       	cp	r16, r18
    1c3e:	13 07       	cpc	r17, r19
    1c40:	08 f4       	brcc	.+2      	; 0x1c44 <__fmt_s+0x90>
    1c42:	98 01       	movw	r18, r16
    1c44:	85 01       	movw	r16, r10
    1c46:	68 2d       	mov	r22, r8
    1c48:	a3 01       	movw	r20, r6
    1c4a:	c6 01       	movw	r24, r12
    1c4c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__pad>
    1c50:	27 96       	adiw	r28, 0x07	; 7
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	ff 90       	pop	r15
    1c66:	ef 90       	pop	r14
    1c68:	df 90       	pop	r13
    1c6a:	cf 90       	pop	r12
    1c6c:	bf 90       	pop	r11
    1c6e:	af 90       	pop	r10
    1c70:	8f 90       	pop	r8
    1c72:	7f 90       	pop	r7
    1c74:	6f 90       	pop	r6
    1c76:	4f 90       	pop	r4
    1c78:	3f 90       	pop	r3
    1c7a:	2f 90       	pop	r2
    1c7c:	08 95       	ret

Disassembly of section .text.__out:

00002226 <__out>:
    2226:	6f 92       	push	r6
    2228:	7f 92       	push	r7
    222a:	8f 92       	push	r8
    222c:	cf 92       	push	r12
    222e:	df 92       	push	r13
    2230:	ef 92       	push	r14
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	8c 01       	movw	r16, r24
    223c:	6a 01       	movw	r12, r20
    223e:	e6 2e       	mov	r14, r22
    2240:	e9 01       	movw	r28, r18
    2242:	3a 01       	movw	r6, r20
    2244:	86 2e       	mov	r8, r22
    2246:	62 0e       	add	r6, r18
    2248:	73 1e       	adc	r7, r19
    224a:	81 1c       	adc	r8, r1
    224c:	37 fd       	sbrc	r19, 7
    224e:	8a 94       	dec	r8
    2250:	c6 14       	cp	r12, r6
    2252:	d7 04       	cpc	r13, r7
    2254:	e8 04       	cpc	r14, r8
    2256:	79 f0       	breq	.+30     	; 0x2276 <__out+0x50>
    2258:	f6 01       	movw	r30, r12
    225a:	84 91       	lpm	r24, Z
    225c:	e7 fc       	sbrc	r14, 7
    225e:	80 81       	ld	r24, Z
    2260:	b8 01       	movw	r22, r16
    2262:	08 2e       	mov	r0, r24
    2264:	00 0c       	add	r0, r0
    2266:	99 0b       	sbc	r25, r25
    2268:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <fputc>
    226c:	8f ef       	ldi	r24, 0xFF	; 255
    226e:	c8 1a       	sub	r12, r24
    2270:	d8 0a       	sbc	r13, r24
    2272:	e8 0a       	sbc	r14, r24
    2274:	ed cf       	rjmp	.-38     	; 0x2250 <__out+0x2a>
    2276:	ce 01       	movw	r24, r28
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	1f 91       	pop	r17
    227e:	0f 91       	pop	r16
    2280:	ef 90       	pop	r14
    2282:	df 90       	pop	r13
    2284:	cf 90       	pop	r12
    2286:	8f 90       	pop	r8
    2288:	7f 90       	pop	r7
    228a:	6f 90       	pop	r6
    228c:	08 95       	ret

Disassembly of section .text.__pad:

000018fa <__pad>:
    18fa:	2f 92       	push	r2
    18fc:	3f 92       	push	r3
    18fe:	4f 92       	push	r4
    1900:	6f 92       	push	r6
    1902:	7f 92       	push	r7
    1904:	8f 92       	push	r8
    1906:	af 92       	push	r10
    1908:	bf 92       	push	r11
    190a:	cf 92       	push	r12
    190c:	df 92       	push	r13
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	66 97       	sbiw	r28, 0x16	; 22
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	5c 01       	movw	r10, r24
    192c:	3a 01       	movw	r6, r20
    192e:	86 2e       	mov	r8, r22
    1930:	69 01       	movw	r12, r18
    1932:	c7 01       	movw	r24, r14
    1934:	81 70       	andi	r24, 0x01	; 1
    1936:	99 27       	eor	r25, r25
    1938:	9c 8b       	std	Y+20, r25	; 0x14
    193a:	8b 8b       	std	Y+19, r24	; 0x13
    193c:	e0 fc       	sbrc	r14, 0
    193e:	1d c0       	rjmp	.+58     	; 0x197a <__pad+0x80>
    1940:	20 17       	cp	r18, r16
    1942:	31 07       	cpc	r19, r17
    1944:	d4 f4       	brge	.+52     	; 0x197a <__pad+0x80>
    1946:	78 01       	movw	r14, r16
    1948:	ec 18       	sub	r14, r12
    194a:	fd 08       	sbc	r15, r13
    194c:	fe 8a       	std	Y+22, r15	; 0x16
    194e:	ed 8a       	std	Y+21, r14	; 0x15
    1950:	a7 01       	movw	r20, r14
    1952:	91 e1       	ldi	r25, 0x11	; 17
    1954:	e9 16       	cp	r14, r25
    1956:	f1 04       	cpc	r15, r1
    1958:	10 f0       	brcs	.+4      	; 0x195e <__pad+0x64>
    195a:	40 e1       	ldi	r20, 0x10	; 16
    195c:	50 e0       	ldi	r21, 0x00	; 0
    195e:	60 e2       	ldi	r22, 0x20	; 32
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	ce 01       	movw	r24, r28
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	9a 8b       	std	Y+18, r25	; 0x12
    1968:	89 8b       	std	Y+17, r24	; 0x11
    196a:	0e 94 c7 13 	call	0x278e	; 0x278e <memset>
    196e:	89 89       	ldd	r24, Y+17	; 0x11
    1970:	9a 89       	ldd	r25, Y+18	; 0x12
    1972:	1c 01       	movw	r2, r24
    1974:	20 e8       	ldi	r18, 0x80	; 128
    1976:	42 2e       	mov	r4, r18
    1978:	0b c0       	rjmp	.+22     	; 0x1990 <__pad+0x96>
    197a:	96 01       	movw	r18, r12
    197c:	68 2d       	mov	r22, r8
    197e:	a3 01       	movw	r20, r6
    1980:	c5 01       	movw	r24, r10
    1982:	0e 94 13 11 	call	0x2226	; 0x2226 <__out>
    1986:	c0 16       	cp	r12, r16
    1988:	d1 06       	cpc	r13, r17
    198a:	ec f2       	brlt	.-70     	; 0x1946 <__pad+0x4c>
    198c:	c6 01       	movw	r24, r12
    198e:	25 c0       	rjmp	.+74     	; 0x19da <__pad+0xe0>
    1990:	90 e1       	ldi	r25, 0x10	; 16
    1992:	e9 16       	cp	r14, r25
    1994:	f1 04       	cpc	r15, r1
    1996:	58 f0       	brcs	.+22     	; 0x19ae <__pad+0xb4>
    1998:	20 e1       	ldi	r18, 0x10	; 16
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	64 2d       	mov	r22, r4
    199e:	a1 01       	movw	r20, r2
    19a0:	c5 01       	movw	r24, r10
    19a2:	0e 94 13 11 	call	0x2226	; 0x2226 <__out>
    19a6:	80 e1       	ldi	r24, 0x10	; 16
    19a8:	e8 1a       	sub	r14, r24
    19aa:	f1 08       	sbc	r15, r1
    19ac:	f1 cf       	rjmp	.-30     	; 0x1990 <__pad+0x96>
    19ae:	2d 89       	ldd	r18, Y+21	; 0x15
    19b0:	3e 89       	ldd	r19, Y+22	; 0x16
    19b2:	2f 70       	andi	r18, 0x0F	; 15
    19b4:	33 27       	eor	r19, r19
    19b6:	89 89       	ldd	r24, Y+17	; 0x11
    19b8:	9a 89       	ldd	r25, Y+18	; 0x12
    19ba:	ac 01       	movw	r20, r24
    19bc:	60 e8       	ldi	r22, 0x80	; 128
    19be:	c5 01       	movw	r24, r10
    19c0:	0e 94 13 11 	call	0x2226	; 0x2226 <__out>
    19c4:	8b 89       	ldd	r24, Y+19	; 0x13
    19c6:	9c 89       	ldd	r25, Y+20	; 0x14
    19c8:	89 2b       	or	r24, r25
    19ca:	31 f4       	brne	.+12     	; 0x19d8 <__pad+0xde>
    19cc:	96 01       	movw	r18, r12
    19ce:	68 2d       	mov	r22, r8
    19d0:	a3 01       	movw	r20, r6
    19d2:	c5 01       	movw	r24, r10
    19d4:	0e 94 13 11 	call	0x2226	; 0x2226 <__out>
    19d8:	c8 01       	movw	r24, r16
    19da:	66 96       	adiw	r28, 0x16	; 22
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	ff 90       	pop	r15
    19f0:	ef 90       	pop	r14
    19f2:	df 90       	pop	r13
    19f4:	cf 90       	pop	r12
    19f6:	bf 90       	pop	r11
    19f8:	af 90       	pop	r10
    19fa:	8f 90       	pop	r8
    19fc:	7f 90       	pop	r7
    19fe:	6f 90       	pop	r6
    1a00:	4f 90       	pop	r4
    1a02:	3f 90       	pop	r3
    1a04:	2f 90       	pop	r2
    1a06:	08 95       	ret

Disassembly of section .text.__dummy_fmt4:

000027e0 <__fmt_a>:
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	08 95       	ret

Disassembly of section .text.__fmt_state:

00001e74 <__fmt_state>:
    1e74:	cf 92       	push	r12
    1e76:	df 92       	push	r13
    1e78:	ef 92       	push	r14
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	29 2f       	mov	r18, r25
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	22 0f       	add	r18, r18
    1e84:	33 1f       	adc	r19, r19
    1e86:	69 01       	movw	r12, r18
    1e88:	03 2e       	mov	r0, r19
    1e8a:	00 0c       	add	r0, r0
    1e8c:	ee 08       	sbc	r14, r14
    1e8e:	6e 2d       	mov	r22, r14
    1e90:	a6 01       	movw	r20, r12
    1e92:	4d 5f       	subi	r20, 0xFD	; 253
    1e94:	5c 4f       	sbci	r21, 0xFC	; 252
    1e96:	6f 4f       	sbci	r22, 0xFF	; 255
    1e98:	6a 01       	movw	r12, r20
    1e9a:	e6 2e       	mov	r14, r22
    1e9c:	fa 01       	movw	r30, r20
    1e9e:	84 91       	lpm	r24, Z
    1ea0:	e7 fc       	sbrc	r14, 7
    1ea2:	80 81       	ld	r24, Z
    1ea4:	81 11       	cpse	r24, r1
    1ea6:	0d c0       	rjmp	.+26     	; 0x1ec2 <__fmt_state+0x4e>
    1ea8:	2f 5f       	subi	r18, 0xFF	; 255
    1eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1eac:	03 2e       	mov	r0, r19
    1eae:	00 0c       	add	r0, r0
    1eb0:	44 0b       	sbc	r20, r20
    1eb2:	2d 5f       	subi	r18, 0xFD	; 253
    1eb4:	3c 4f       	sbci	r19, 0xFC	; 252
    1eb6:	4f 4f       	sbci	r20, 0xFF	; 255
    1eb8:	f9 01       	movw	r30, r18
    1eba:	84 91       	lpm	r24, Z
    1ebc:	47 fd       	sbrc	r20, 7
    1ebe:	80 81       	ld	r24, Z
    1ec0:	24 c0       	rjmp	.+72     	; 0x1f0a <__fmt_state+0x96>
    1ec2:	cd 90       	ld	r12, X+
    1ec4:	dd 90       	ld	r13, X+
    1ec6:	ec 90       	ld	r14, X
    1ec8:	12 97       	sbiw	r26, 0x02	; 2
    1eca:	f6 01       	movw	r30, r12
    1ecc:	44 91       	lpm	r20, Z
    1ece:	e7 fc       	sbrc	r14, 7
    1ed0:	40 81       	ld	r20, Z
    1ed2:	84 13       	cpse	r24, r20
    1ed4:	15 c0       	rjmp	.+42     	; 0x1f00 <__fmt_state+0x8c>
    1ed6:	2f 5f       	subi	r18, 0xFF	; 255
    1ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eda:	03 2e       	mov	r0, r19
    1edc:	00 0c       	add	r0, r0
    1ede:	44 0b       	sbc	r20, r20
    1ee0:	2d 5f       	subi	r18, 0xFD	; 253
    1ee2:	3c 4f       	sbci	r19, 0xFC	; 252
    1ee4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ee6:	f9 01       	movw	r30, r18
    1ee8:	94 91       	lpm	r25, Z
    1eea:	47 fd       	sbrc	r20, 7
    1eec:	90 81       	ld	r25, Z
    1eee:	5f ef       	ldi	r21, 0xFF	; 255
    1ef0:	c5 1a       	sub	r12, r21
    1ef2:	d5 0a       	sbc	r13, r21
    1ef4:	e5 0a       	sbc	r14, r21
    1ef6:	cd 92       	st	X+, r12
    1ef8:	dd 92       	st	X+, r13
    1efa:	ec 92       	st	X, r14
    1efc:	12 97       	sbiw	r26, 0x02	; 2
    1efe:	01 c0       	rjmp	.+2      	; 0x1f02 <__fmt_state+0x8e>
    1f00:	9f 5f       	subi	r25, 0xFF	; 255
    1f02:	9b 30       	cpi	r25, 0x0B	; 11
    1f04:	08 f4       	brcc	.+2      	; 0x1f08 <__fmt_state+0x94>
    1f06:	bb cf       	rjmp	.-138    	; 0x1e7e <__fmt_state+0xa>
    1f08:	89 2f       	mov	r24, r25
    1f0a:	ef 90       	pop	r14
    1f0c:	df 90       	pop	r13
    1f0e:	cf 90       	pop	r12
    1f10:	08 95       	ret

Disassembly of section .text.__printf_core:

00000326 <__printf_core>:
 326:	a3 ea       	ldi	r26, 0xA3	; 163
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	e9 e9       	ldi	r30, 0x99	; 153
 32c:	f1 e0       	ldi	r31, 0x01	; 1
 32e:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__prologue_saves__>
 332:	4c 01       	movw	r8, r24
 334:	59 01       	movw	r10, r18
 336:	c7 56       	subi	r28, 0x67	; 103
 338:	df 4f       	sbci	r29, 0xFF	; 255
 33a:	48 83       	st	Y, r20
 33c:	59 83       	std	Y+1, r21	; 0x01
 33e:	6a 83       	std	Y+2, r22	; 0x02
 340:	c9 59       	subi	r28, 0x99	; 153
 342:	d0 40       	sbci	r29, 0x00	; 0
 344:	21 2c       	mov	r2, r1
 346:	31 2c       	mov	r3, r1
 348:	6e 01       	movw	r12, r28
 34a:	2b e8       	ldi	r18, 0x8B	; 139
 34c:	c2 0e       	add	r12, r18
 34e:	d1 1c       	adc	r13, r1
 350:	85 e2       	ldi	r24, 0x25	; 37
 352:	78 2e       	mov	r7, r24
 354:	26 01       	movw	r4, r12
 356:	30 e8       	ldi	r19, 0x80	; 128
 358:	63 2e       	mov	r6, r19
 35a:	ce 01       	movw	r24, r28
 35c:	8d 56       	subi	r24, 0x6D	; 109
 35e:	9f 4f       	sbci	r25, 0xFF	; 255
 360:	c4 56       	subi	r28, 0x64	; 100
 362:	df 4f       	sbci	r29, 0xFF	; 255
 364:	99 83       	std	Y+1, r25	; 0x01
 366:	88 83       	st	Y, r24
 368:	cc 59       	subi	r28, 0x9C	; 156
 36a:	d0 40       	sbci	r29, 0x00	; 0
 36c:	9c 01       	movw	r18, r24
 36e:	40 e8       	ldi	r20, 0x80	; 128
 370:	cf 55       	subi	r28, 0x5F	; 95
 372:	df 4f       	sbci	r29, 0xFF	; 255
 374:	28 83       	st	Y, r18
 376:	39 83       	std	Y+1, r19	; 0x01
 378:	4a 83       	std	Y+2, r20	; 0x02
 37a:	c1 5a       	subi	r28, 0xA1	; 161
 37c:	d0 40       	sbci	r29, 0x00	; 0
 37e:	c7 56       	subi	r28, 0x67	; 103
 380:	df 4f       	sbci	r29, 0xFF	; 255
 382:	48 81       	ld	r20, Y
 384:	c9 59       	subi	r28, 0x99	; 153
 386:	d0 40       	sbci	r29, 0x00	; 0
 388:	c6 56       	subi	r28, 0x66	; 102
 38a:	df 4f       	sbci	r29, 0xFF	; 255
 38c:	58 81       	ld	r21, Y
 38e:	ca 59       	subi	r28, 0x9A	; 154
 390:	d0 40       	sbci	r29, 0x00	; 0
 392:	c5 56       	subi	r28, 0x65	; 101
 394:	df 4f       	sbci	r29, 0xFF	; 255
 396:	68 81       	ld	r22, Y
 398:	cb 59       	subi	r28, 0x9B	; 155
 39a:	d0 40       	sbci	r29, 0x00	; 0
 39c:	fa 01       	movw	r30, r20
 39e:	84 91       	lpm	r24, Z
 3a0:	67 fd       	sbrc	r22, 7
 3a2:	80 81       	ld	r24, Z
 3a4:	88 23       	and	r24, r24
 3a6:	09 f4       	brne	.+2      	; 0x3aa <__printf_core+0x84>
 3a8:	c9 c3       	rjmp	.+1938   	; 0xb3c <__stack+0x23d>
 3aa:	cf 57       	subi	r28, 0x7F	; 127
 3ac:	df 4f       	sbci	r29, 0xFF	; 255
 3ae:	19 82       	std	Y+1, r1	; 0x01
 3b0:	18 82       	st	Y, r1
 3b2:	c1 58       	subi	r28, 0x81	; 129
 3b4:	d0 40       	sbci	r29, 0x00	; 0
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	9f ef       	ldi	r25, 0xFF	; 255
 3ba:	cd 57       	subi	r28, 0x7D	; 125
 3bc:	df 4f       	sbci	r29, 0xFF	; 255
 3be:	99 83       	std	Y+1, r25	; 0x01
 3c0:	88 83       	st	Y, r24
 3c2:	c3 58       	subi	r28, 0x83	; 131
 3c4:	d0 40       	sbci	r29, 0x00	; 0
 3c6:	cb 57       	subi	r28, 0x7B	; 123
 3c8:	df 4f       	sbci	r29, 0xFF	; 255
 3ca:	19 82       	std	Y+1, r1	; 0x01
 3cc:	18 82       	st	Y, r1
 3ce:	c5 58       	subi	r28, 0x85	; 133
 3d0:	d0 40       	sbci	r29, 0x00	; 0
 3d2:	a1 e0       	ldi	r26, 0x01	; 1
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	ac 0f       	add	r26, r28
 3d8:	bd 1f       	adc	r27, r29
 3da:	c9 57       	subi	r28, 0x79	; 121
 3dc:	df 4f       	sbci	r29, 0xFF	; 255
 3de:	b9 83       	std	Y+1, r27	; 0x01
 3e0:	a8 83       	st	Y, r26
 3e2:	c7 58       	subi	r28, 0x87	; 135
 3e4:	d0 40       	sbci	r29, 0x00	; 0
 3e6:	e0 e8       	ldi	r30, 0x80	; 128
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	c7 57       	subi	r28, 0x77	; 119
 3ec:	df 4f       	sbci	r29, 0xFF	; 255
 3ee:	f9 83       	std	Y+1, r31	; 0x01
 3f0:	e8 83       	st	Y, r30
 3f2:	c9 58       	subi	r28, 0x89	; 137
 3f4:	d0 40       	sbci	r29, 0x00	; 0
 3f6:	ca 01       	movw	r24, r20
 3f8:	a6 2f       	mov	r26, r22
 3fa:	e1 2c       	mov	r14, r1
 3fc:	f1 2c       	mov	r15, r1
 3fe:	fc 01       	movw	r30, r24
 400:	24 91       	lpm	r18, Z
 402:	a7 fd       	sbrc	r26, 7
 404:	20 81       	ld	r18, Z
 406:	21 11       	cpse	r18, r1
 408:	1b c0       	rjmp	.+54     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 40a:	e1 14       	cp	r14, r1
 40c:	f1 04       	cpc	r15, r1
 40e:	01 f1       	breq	.+64     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 410:	97 01       	movw	r18, r14
 412:	c4 01       	movw	r24, r8
 414:	0e 94 13 11 	call	0x2226	; 0x2226 <__out>
 418:	c7 56       	subi	r28, 0x67	; 103
 41a:	df 4f       	sbci	r29, 0xFF	; 255
 41c:	88 81       	ld	r24, Y
 41e:	99 81       	ldd	r25, Y+1	; 0x01
 420:	aa 81       	ldd	r26, Y+2	; 0x02
 422:	c9 59       	subi	r28, 0x99	; 153
 424:	d0 40       	sbci	r29, 0x00	; 0
 426:	8e 0d       	add	r24, r14
 428:	9f 1d       	adc	r25, r15
 42a:	a1 1d       	adc	r26, r1
 42c:	f7 fc       	sbrc	r15, 7
 42e:	aa 95       	dec	r26
 430:	c7 56       	subi	r28, 0x67	; 103
 432:	df 4f       	sbci	r29, 0xFF	; 255
 434:	88 83       	st	Y, r24
 436:	99 83       	std	Y+1, r25	; 0x01
 438:	aa 83       	std	Y+2, r26	; 0x02
 43a:	c9 59       	subi	r28, 0x99	; 153
 43c:	d0 40       	sbci	r29, 0x00	; 0
 43e:	08 c0       	rjmp	.+16     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 440:	01 96       	adiw	r24, 0x01	; 1
 442:	a1 1d       	adc	r26, r1
 444:	25 32       	cpi	r18, 0x25	; 37
 446:	09 f3       	breq	.-62     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 448:	ff ef       	ldi	r31, 0xFF	; 255
 44a:	ef 1a       	sub	r14, r31
 44c:	ff 0a       	sbc	r15, r31
 44e:	d7 cf       	rjmp	.-82     	; 0x3fe <__printf_core+0xd8>
 450:	c7 56       	subi	r28, 0x67	; 103
 452:	df 4f       	sbci	r29, 0xFF	; 255
 454:	88 81       	ld	r24, Y
 456:	99 81       	ldd	r25, Y+1	; 0x01
 458:	aa 81       	ldd	r26, Y+2	; 0x02
 45a:	c9 59       	subi	r28, 0x99	; 153
 45c:	d0 40       	sbci	r29, 0x00	; 0
 45e:	fc 01       	movw	r30, r24
 460:	24 91       	lpm	r18, Z
 462:	a7 fd       	sbrc	r26, 7
 464:	20 81       	ld	r18, Z
 466:	25 32       	cpi	r18, 0x25	; 37
 468:	09 f0       	breq	.+2      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 46a:	56 c3       	rjmp	.+1708   	; 0xb18 <__stack+0x219>
 46c:	9c 01       	movw	r18, r24
 46e:	4a 2f       	mov	r20, r26
 470:	2f 5f       	subi	r18, 0xFF	; 255
 472:	3f 4f       	sbci	r19, 0xFF	; 255
 474:	4f 4f       	sbci	r20, 0xFF	; 255
 476:	c2 56       	subi	r28, 0x62	; 98
 478:	df 4f       	sbci	r29, 0xFF	; 255
 47a:	28 83       	st	Y, r18
 47c:	39 83       	std	Y+1, r19	; 0x01
 47e:	4a 83       	std	Y+2, r20	; 0x02
 480:	ce 59       	subi	r28, 0x9E	; 158
 482:	d0 40       	sbci	r29, 0x00	; 0
 484:	c7 56       	subi	r28, 0x67	; 103
 486:	df 4f       	sbci	r29, 0xFF	; 255
 488:	28 83       	st	Y, r18
 48a:	39 83       	std	Y+1, r19	; 0x01
 48c:	4a 83       	std	Y+2, r20	; 0x02
 48e:	c9 59       	subi	r28, 0x99	; 153
 490:	d0 40       	sbci	r29, 0x00	; 0
 492:	c7 56       	subi	r28, 0x67	; 103
 494:	df 4f       	sbci	r29, 0xFF	; 255
 496:	88 81       	ld	r24, Y
 498:	99 81       	ldd	r25, Y+1	; 0x01
 49a:	aa 81       	ldd	r26, Y+2	; 0x02
 49c:	c9 59       	subi	r28, 0x99	; 153
 49e:	d0 40       	sbci	r29, 0x00	; 0
 4a0:	fc 01       	movw	r30, r24
 4a2:	24 91       	lpm	r18, Z
 4a4:	a7 fd       	sbrc	r26, 7
 4a6:	20 81       	ld	r18, Z
 4a8:	2b 32       	cpi	r18, 0x2B	; 43
 4aa:	41 f4       	brne	.+16     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4ac:	cf 57       	subi	r28, 0x7F	; 127
 4ae:	df 4f       	sbci	r29, 0xFF	; 255
 4b0:	28 81       	ld	r18, Y
 4b2:	39 81       	ldd	r19, Y+1	; 0x01
 4b4:	c1 58       	subi	r28, 0x81	; 129
 4b6:	d0 40       	sbci	r29, 0x00	; 0
 4b8:	24 60       	ori	r18, 0x04	; 4
 4ba:	0b c0       	rjmp	.+22     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4bc:	2c 32       	cpi	r18, 0x2C	; 44
 4be:	cc f0       	brlt	.+50     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4c0:	2d 32       	cpi	r18, 0x2D	; 45
 4c2:	59 f5       	brne	.+86     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 4c4:	cf 57       	subi	r28, 0x7F	; 127
 4c6:	df 4f       	sbci	r29, 0xFF	; 255
 4c8:	28 81       	ld	r18, Y
 4ca:	39 81       	ldd	r19, Y+1	; 0x01
 4cc:	c1 58       	subi	r28, 0x81	; 129
 4ce:	d0 40       	sbci	r29, 0x00	; 0
 4d0:	21 60       	ori	r18, 0x01	; 1
 4d2:	cf 57       	subi	r28, 0x7F	; 127
 4d4:	df 4f       	sbci	r29, 0xFF	; 255
 4d6:	39 83       	std	Y+1, r19	; 0x01
 4d8:	28 83       	st	Y, r18
 4da:	c1 58       	subi	r28, 0x81	; 129
 4dc:	d0 40       	sbci	r29, 0x00	; 0
 4de:	01 96       	adiw	r24, 0x01	; 1
 4e0:	a1 1d       	adc	r26, r1
 4e2:	c7 56       	subi	r28, 0x67	; 103
 4e4:	df 4f       	sbci	r29, 0xFF	; 255
 4e6:	88 83       	st	Y, r24
 4e8:	99 83       	std	Y+1, r25	; 0x01
 4ea:	aa 83       	std	Y+2, r26	; 0x02
 4ec:	c9 59       	subi	r28, 0x99	; 153
 4ee:	d0 40       	sbci	r29, 0x00	; 0
 4f0:	d0 cf       	rjmp	.-96     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 4f2:	20 32       	cpi	r18, 0x20	; 32
 4f4:	41 f4       	brne	.+16     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 4f6:	cf 57       	subi	r28, 0x7F	; 127
 4f8:	df 4f       	sbci	r29, 0xFF	; 255
 4fa:	28 81       	ld	r18, Y
 4fc:	39 81       	ldd	r19, Y+1	; 0x01
 4fe:	c1 58       	subi	r28, 0x81	; 129
 500:	d0 40       	sbci	r29, 0x00	; 0
 502:	28 60       	ori	r18, 0x08	; 8
 504:	e6 cf       	rjmp	.-52     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 506:	23 32       	cpi	r18, 0x23	; 35
 508:	91 f4       	brne	.+36     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 50a:	cf 57       	subi	r28, 0x7F	; 127
 50c:	df 4f       	sbci	r29, 0xFF	; 255
 50e:	28 81       	ld	r18, Y
 510:	39 81       	ldd	r19, Y+1	; 0x01
 512:	c1 58       	subi	r28, 0x81	; 129
 514:	d0 40       	sbci	r29, 0x00	; 0
 516:	20 61       	ori	r18, 0x10	; 16
 518:	dc cf       	rjmp	.-72     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 51a:	20 33       	cpi	r18, 0x30	; 48
 51c:	41 f4       	brne	.+16     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 51e:	cf 57       	subi	r28, 0x7F	; 127
 520:	df 4f       	sbci	r29, 0xFF	; 255
 522:	28 81       	ld	r18, Y
 524:	39 81       	ldd	r19, Y+1	; 0x01
 526:	c1 58       	subi	r28, 0x81	; 129
 528:	d0 40       	sbci	r29, 0x00	; 0
 52a:	22 60       	ori	r18, 0x02	; 2
 52c:	d2 cf       	rjmp	.-92     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 52e:	2a 32       	cpi	r18, 0x2A	; 42
 530:	99 f5       	brne	.+102    	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	a1 1d       	adc	r26, r1
 536:	c7 56       	subi	r28, 0x67	; 103
 538:	df 4f       	sbci	r29, 0xFF	; 255
 53a:	88 83       	st	Y, r24
 53c:	99 83       	std	Y+1, r25	; 0x01
 53e:	aa 83       	std	Y+2, r26	; 0x02
 540:	c9 59       	subi	r28, 0x99	; 153
 542:	d0 40       	sbci	r29, 0x00	; 0
 544:	d5 01       	movw	r26, r10
 546:	ed 91       	ld	r30, X+
 548:	fc 91       	ld	r31, X
 54a:	11 97       	sbiw	r26, 0x01	; 1
 54c:	cf 01       	movw	r24, r30
 54e:	02 96       	adiw	r24, 0x02	; 2
 550:	8d 93       	st	X+, r24
 552:	9c 93       	st	X, r25
 554:	80 81       	ld	r24, Z
 556:	91 81       	ldd	r25, Z+1	; 0x01
 558:	cb 57       	subi	r28, 0x7B	; 123
 55a:	df 4f       	sbci	r29, 0xFF	; 255
 55c:	99 83       	std	Y+1, r25	; 0x01
 55e:	88 83       	st	Y, r24
 560:	c5 58       	subi	r28, 0x85	; 133
 562:	d0 40       	sbci	r29, 0x00	; 0
 564:	97 ff       	sbrs	r25, 7
 566:	3e c0       	rjmp	.+124    	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
 568:	cf 57       	subi	r28, 0x7F	; 127
 56a:	df 4f       	sbci	r29, 0xFF	; 255
 56c:	28 81       	ld	r18, Y
 56e:	39 81       	ldd	r19, Y+1	; 0x01
 570:	c1 58       	subi	r28, 0x81	; 129
 572:	d0 40       	sbci	r29, 0x00	; 0
 574:	b1 e0       	ldi	r27, 0x01	; 1
 576:	2b 27       	eor	r18, r27
 578:	cf 57       	subi	r28, 0x7F	; 127
 57a:	df 4f       	sbci	r29, 0xFF	; 255
 57c:	39 83       	std	Y+1, r19	; 0x01
 57e:	28 83       	st	Y, r18
 580:	c1 58       	subi	r28, 0x81	; 129
 582:	d0 40       	sbci	r29, 0x00	; 0
 584:	91 95       	neg	r25
 586:	81 95       	neg	r24
 588:	91 09       	sbc	r25, r1
 58a:	cb 57       	subi	r28, 0x7B	; 123
 58c:	df 4f       	sbci	r29, 0xFF	; 255
 58e:	99 83       	std	Y+1, r25	; 0x01
 590:	88 83       	st	Y, r24
 592:	c5 58       	subi	r28, 0x85	; 133
 594:	d0 40       	sbci	r29, 0x00	; 0
 596:	26 c0       	rjmp	.+76     	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
 598:	bc 01       	movw	r22, r24
 59a:	8a 2f       	mov	r24, r26
 59c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <atoi>
 5a0:	cb 57       	subi	r28, 0x7B	; 123
 5a2:	df 4f       	sbci	r29, 0xFF	; 255
 5a4:	99 83       	std	Y+1, r25	; 0x01
 5a6:	88 83       	st	Y, r24
 5a8:	c5 58       	subi	r28, 0x85	; 133
 5aa:	d0 40       	sbci	r29, 0x00	; 0
 5ac:	c7 56       	subi	r28, 0x67	; 103
 5ae:	df 4f       	sbci	r29, 0xFF	; 255
 5b0:	28 81       	ld	r18, Y
 5b2:	39 81       	ldd	r19, Y+1	; 0x01
 5b4:	4a 81       	ldd	r20, Y+2	; 0x02
 5b6:	c9 59       	subi	r28, 0x99	; 153
 5b8:	d0 40       	sbci	r29, 0x00	; 0
 5ba:	f9 01       	movw	r30, r18
 5bc:	84 91       	lpm	r24, Z
 5be:	47 fd       	sbrc	r20, 7
 5c0:	80 81       	ld	r24, Z
 5c2:	08 2e       	mov	r0, r24
 5c4:	00 0c       	add	r0, r0
 5c6:	99 0b       	sbc	r25, r25
 5c8:	c0 97       	sbiw	r24, 0x30	; 48
 5ca:	0a 97       	sbiw	r24, 0x0a	; 10
 5cc:	58 f4       	brcc	.+22     	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
 5ce:	2f 5f       	subi	r18, 0xFF	; 255
 5d0:	3f 4f       	sbci	r19, 0xFF	; 255
 5d2:	4f 4f       	sbci	r20, 0xFF	; 255
 5d4:	c7 56       	subi	r28, 0x67	; 103
 5d6:	df 4f       	sbci	r29, 0xFF	; 255
 5d8:	28 83       	st	Y, r18
 5da:	39 83       	std	Y+1, r19	; 0x01
 5dc:	4a 83       	std	Y+2, r20	; 0x02
 5de:	c9 59       	subi	r28, 0x99	; 153
 5e0:	d0 40       	sbci	r29, 0x00	; 0
 5e2:	e4 cf       	rjmp	.-56     	; 0x5ac <__EEPROM_REGION_LENGTH__+0x1ac>
 5e4:	cf 57       	subi	r28, 0x7F	; 127
 5e6:	df 4f       	sbci	r29, 0xFF	; 255
 5e8:	88 81       	ld	r24, Y
 5ea:	99 81       	ldd	r25, Y+1	; 0x01
 5ec:	c1 58       	subi	r28, 0x81	; 129
 5ee:	d0 40       	sbci	r29, 0x00	; 0
 5f0:	80 ff       	sbrs	r24, 0
 5f2:	07 c0       	rjmp	.+14     	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
 5f4:	8d 7f       	andi	r24, 0xFD	; 253
 5f6:	cf 57       	subi	r28, 0x7F	; 127
 5f8:	df 4f       	sbci	r29, 0xFF	; 255
 5fa:	99 83       	std	Y+1, r25	; 0x01
 5fc:	88 83       	st	Y, r24
 5fe:	c1 58       	subi	r28, 0x81	; 129
 600:	d0 40       	sbci	r29, 0x00	; 0
 602:	c7 56       	subi	r28, 0x67	; 103
 604:	df 4f       	sbci	r29, 0xFF	; 255
 606:	88 81       	ld	r24, Y
 608:	99 81       	ldd	r25, Y+1	; 0x01
 60a:	aa 81       	ldd	r26, Y+2	; 0x02
 60c:	c9 59       	subi	r28, 0x99	; 153
 60e:	d0 40       	sbci	r29, 0x00	; 0
 610:	fc 01       	movw	r30, r24
 612:	24 91       	lpm	r18, Z
 614:	a7 fd       	sbrc	r26, 7
 616:	20 81       	ld	r18, Z
 618:	2e 32       	cpi	r18, 0x2E	; 46
 61a:	09 f0       	breq	.+2      	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
 61c:	58 c0       	rjmp	.+176    	; 0x6ce <__EEPROM_REGION_LENGTH__+0x2ce>
 61e:	cd 57       	subi	r28, 0x7D	; 125
 620:	df 4f       	sbci	r29, 0xFF	; 255
 622:	19 82       	std	Y+1, r1	; 0x01
 624:	18 82       	st	Y, r1
 626:	c3 58       	subi	r28, 0x83	; 131
 628:	d0 40       	sbci	r29, 0x00	; 0
 62a:	9c 01       	movw	r18, r24
 62c:	4a 2f       	mov	r20, r26
 62e:	2f 5f       	subi	r18, 0xFF	; 255
 630:	3f 4f       	sbci	r19, 0xFF	; 255
 632:	4f 4f       	sbci	r20, 0xFF	; 255
 634:	c7 56       	subi	r28, 0x67	; 103
 636:	df 4f       	sbci	r29, 0xFF	; 255
 638:	28 83       	st	Y, r18
 63a:	39 83       	std	Y+1, r19	; 0x01
 63c:	4a 83       	std	Y+2, r20	; 0x02
 63e:	c9 59       	subi	r28, 0x99	; 153
 640:	d0 40       	sbci	r29, 0x00	; 0
 642:	f9 01       	movw	r30, r18
 644:	54 91       	lpm	r21, Z
 646:	47 fd       	sbrc	r20, 7
 648:	50 81       	ld	r21, Z
 64a:	5a 32       	cpi	r21, 0x2A	; 42
 64c:	d1 f4       	brne	.+52     	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
 64e:	02 96       	adiw	r24, 0x02	; 2
 650:	a1 1d       	adc	r26, r1
 652:	c7 56       	subi	r28, 0x67	; 103
 654:	df 4f       	sbci	r29, 0xFF	; 255
 656:	88 83       	st	Y, r24
 658:	99 83       	std	Y+1, r25	; 0x01
 65a:	aa 83       	std	Y+2, r26	; 0x02
 65c:	c9 59       	subi	r28, 0x99	; 153
 65e:	d0 40       	sbci	r29, 0x00	; 0
 660:	d5 01       	movw	r26, r10
 662:	ed 91       	ld	r30, X+
 664:	fc 91       	ld	r31, X
 666:	11 97       	sbiw	r26, 0x01	; 1
 668:	cf 01       	movw	r24, r30
 66a:	02 96       	adiw	r24, 0x02	; 2
 66c:	8d 93       	st	X+, r24
 66e:	9c 93       	st	X, r25
 670:	80 81       	ld	r24, Z
 672:	91 81       	ldd	r25, Z+1	; 0x01
 674:	cd 57       	subi	r28, 0x7D	; 125
 676:	df 4f       	sbci	r29, 0xFF	; 255
 678:	99 83       	std	Y+1, r25	; 0x01
 67a:	88 83       	st	Y, r24
 67c:	c3 58       	subi	r28, 0x83	; 131
 67e:	d0 40       	sbci	r29, 0x00	; 0
 680:	26 c0       	rjmp	.+76     	; 0x6ce <__EEPROM_REGION_LENGTH__+0x2ce>
 682:	84 2f       	mov	r24, r20
 684:	b9 01       	movw	r22, r18
 686:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <atoi>
 68a:	cd 57       	subi	r28, 0x7D	; 125
 68c:	df 4f       	sbci	r29, 0xFF	; 255
 68e:	99 83       	std	Y+1, r25	; 0x01
 690:	88 83       	st	Y, r24
 692:	c3 58       	subi	r28, 0x83	; 131
 694:	d0 40       	sbci	r29, 0x00	; 0
 696:	c7 56       	subi	r28, 0x67	; 103
 698:	df 4f       	sbci	r29, 0xFF	; 255
 69a:	28 81       	ld	r18, Y
 69c:	39 81       	ldd	r19, Y+1	; 0x01
 69e:	4a 81       	ldd	r20, Y+2	; 0x02
 6a0:	c9 59       	subi	r28, 0x99	; 153
 6a2:	d0 40       	sbci	r29, 0x00	; 0
 6a4:	f9 01       	movw	r30, r18
 6a6:	84 91       	lpm	r24, Z
 6a8:	47 fd       	sbrc	r20, 7
 6aa:	80 81       	ld	r24, Z
 6ac:	08 2e       	mov	r0, r24
 6ae:	00 0c       	add	r0, r0
 6b0:	99 0b       	sbc	r25, r25
 6b2:	c0 97       	sbiw	r24, 0x30	; 48
 6b4:	0a 97       	sbiw	r24, 0x0a	; 10
 6b6:	58 f4       	brcc	.+22     	; 0x6ce <__EEPROM_REGION_LENGTH__+0x2ce>
 6b8:	2f 5f       	subi	r18, 0xFF	; 255
 6ba:	3f 4f       	sbci	r19, 0xFF	; 255
 6bc:	4f 4f       	sbci	r20, 0xFF	; 255
 6be:	c7 56       	subi	r28, 0x67	; 103
 6c0:	df 4f       	sbci	r29, 0xFF	; 255
 6c2:	28 83       	st	Y, r18
 6c4:	39 83       	std	Y+1, r19	; 0x01
 6c6:	4a 83       	std	Y+2, r20	; 0x02
 6c8:	c9 59       	subi	r28, 0x99	; 153
 6ca:	d0 40       	sbci	r29, 0x00	; 0
 6cc:	e4 cf       	rjmp	.-56     	; 0x696 <__EEPROM_REGION_LENGTH__+0x296>
 6ce:	ce 01       	movw	r24, r28
 6d0:	87 56       	subi	r24, 0x67	; 103
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__fmt_state>
 6d8:	18 2f       	mov	r17, r24
 6da:	c7 56       	subi	r28, 0x67	; 103
 6dc:	df 4f       	sbci	r29, 0xFF	; 255
 6de:	28 81       	ld	r18, Y
 6e0:	c9 59       	subi	r28, 0x99	; 153
 6e2:	d0 40       	sbci	r29, 0x00	; 0
 6e4:	c6 56       	subi	r28, 0x66	; 102
 6e6:	df 4f       	sbci	r29, 0xFF	; 255
 6e8:	88 81       	ld	r24, Y
 6ea:	ca 59       	subi	r28, 0x9A	; 154
 6ec:	d0 40       	sbci	r29, 0x00	; 0
 6ee:	c5 56       	subi	r28, 0x65	; 101
 6f0:	df 4f       	sbci	r29, 0xFF	; 255
 6f2:	98 81       	ld	r25, Y
 6f4:	cb 59       	subi	r28, 0x9B	; 155
 6f6:	d0 40       	sbci	r29, 0x00	; 0
 6f8:	e2 2f       	mov	r30, r18
 6fa:	f8 2f       	mov	r31, r24
 6fc:	84 91       	lpm	r24, Z
 6fe:	97 fd       	sbrc	r25, 7
 700:	80 81       	ld	r24, Z
 702:	08 2e       	mov	r0, r24
 704:	00 0c       	add	r0, r0
 706:	99 0b       	sbc	r25, r25
 708:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <tolower>
 70c:	89 36       	cpi	r24, 0x69	; 105
 70e:	91 05       	cpc	r25, r1
 710:	09 f4       	brne	.+2      	; 0x714 <__EEPROM_REGION_LENGTH__+0x314>
 712:	5a c0       	rjmp	.+180    	; 0x7c8 <__EEPROM_REGION_LENGTH__+0x3c8>
 714:	b4 f4       	brge	.+44     	; 0x742 <__EEPROM_REGION_LENGTH__+0x342>
 716:	83 36       	cpi	r24, 0x63	; 99
 718:	91 05       	cpc	r25, r1
 71a:	09 f4       	brne	.+2      	; 0x71e <__EEPROM_REGION_LENGTH__+0x31e>
 71c:	66 c1       	rjmp	.+716    	; 0x9ea <__stack+0xeb>
 71e:	44 f4       	brge	.+16     	; 0x730 <__EEPROM_REGION_LENGTH__+0x330>
 720:	85 32       	cpi	r24, 0x25	; 37
 722:	91 05       	cpc	r25, r1
 724:	09 f4       	brne	.+2      	; 0x728 <__EEPROM_REGION_LENGTH__+0x328>
 726:	a1 c1       	rjmp	.+834    	; 0xa6a <__stack+0x16b>
 728:	81 36       	cpi	r24, 0x61	; 97
 72a:	91 05       	cpc	r25, r1
 72c:	29 f1       	breq	.+74     	; 0x778 <__EEPROM_REGION_LENGTH__+0x378>
 72e:	b3 c1       	rjmp	.+870    	; 0xa96 <__stack+0x197>
 730:	84 36       	cpi	r24, 0x64	; 100
 732:	91 05       	cpc	r25, r1
 734:	09 f4       	brne	.+2      	; 0x738 <__EEPROM_REGION_LENGTH__+0x338>
 736:	48 c0       	rjmp	.+144    	; 0x7c8 <__EEPROM_REGION_LENGTH__+0x3c8>
 738:	88 36       	cpi	r24, 0x68	; 104
 73a:	91 05       	cpc	r25, r1
 73c:	0c f4       	brge	.+2      	; 0x740 <__EEPROM_REGION_LENGTH__+0x340>
 73e:	2d c1       	rjmp	.+602    	; 0x99a <__stack+0x9b>
 740:	aa c1       	rjmp	.+852    	; 0xa96 <__stack+0x197>
 742:	80 37       	cpi	r24, 0x70	; 112
 744:	91 05       	cpc	r25, r1
 746:	09 f4       	brne	.+2      	; 0x74a <__EEPROM_REGION_LENGTH__+0x34a>
 748:	cb c0       	rjmp	.+406    	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 74a:	4c f4       	brge	.+18     	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
 74c:	8e 36       	cpi	r24, 0x6E	; 110
 74e:	91 05       	cpc	r25, r1
 750:	09 f4       	brne	.+2      	; 0x754 <__EEPROM_REGION_LENGTH__+0x354>
 752:	19 c1       	rjmp	.+562    	; 0x986 <__stack+0x87>
 754:	8f 36       	cpi	r24, 0x6F	; 111
 756:	91 05       	cpc	r25, r1
 758:	09 f4       	brne	.+2      	; 0x75c <__EEPROM_REGION_LENGTH__+0x35c>
 75a:	7c c0       	rjmp	.+248    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 75c:	9c c1       	rjmp	.+824    	; 0xa96 <__stack+0x197>
 75e:	85 37       	cpi	r24, 0x75	; 117
 760:	91 05       	cpc	r25, r1
 762:	09 f4       	brne	.+2      	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
 764:	54 c0       	rjmp	.+168    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 766:	88 37       	cpi	r24, 0x78	; 120
 768:	91 05       	cpc	r25, r1
 76a:	09 f4       	brne	.+2      	; 0x76e <__EEPROM_REGION_LENGTH__+0x36e>
 76c:	96 c0       	rjmp	.+300    	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
 76e:	83 37       	cpi	r24, 0x73	; 115
 770:	91 05       	cpc	r25, r1
 772:	09 f0       	breq	.+2      	; 0x776 <__EEPROM_REGION_LENGTH__+0x376>
 774:	90 c1       	rjmp	.+800    	; 0xa96 <__stack+0x197>
 776:	58 c1       	rjmp	.+688    	; 0xa28 <__stack+0x129>
 778:	61 2f       	mov	r22, r17
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	a5 01       	movw	r20, r10
 77e:	c6 01       	movw	r24, r12
 780:	0e 94 23 12 	call	0x2446	; 0x2446 <__pop_float>
 784:	89 2b       	or	r24, r25
 786:	09 f4       	brne	.+2      	; 0x78a <__EEPROM_REGION_LENGTH__+0x38a>
 788:	b7 c1       	rjmp	.+878    	; 0xaf8 <__stack+0x1f9>
 78a:	c7 56       	subi	r28, 0x67	; 103
 78c:	df 4f       	sbci	r29, 0xFF	; 255
 78e:	88 81       	ld	r24, Y
 790:	99 81       	ldd	r25, Y+1	; 0x01
 792:	aa 81       	ldd	r26, Y+2	; 0x02
 794:	c9 59       	subi	r28, 0x99	; 153
 796:	d0 40       	sbci	r29, 0x00	; 0
 798:	9c 01       	movw	r18, r24
 79a:	4a 2f       	mov	r20, r26
 79c:	2f 5f       	subi	r18, 0xFF	; 255
 79e:	3f 4f       	sbci	r19, 0xFF	; 255
 7a0:	4f 4f       	sbci	r20, 0xFF	; 255
 7a2:	c7 56       	subi	r28, 0x67	; 103
 7a4:	df 4f       	sbci	r29, 0xFF	; 255
 7a6:	28 83       	st	Y, r18
 7a8:	39 83       	std	Y+1, r19	; 0x01
 7aa:	4a 83       	std	Y+2, r20	; 0x02
 7ac:	c9 59       	subi	r28, 0x99	; 153
 7ae:	d0 40       	sbci	r29, 0x00	; 0
 7b0:	fc 01       	movw	r30, r24
 7b2:	24 91       	lpm	r18, Z
 7b4:	a7 fd       	sbrc	r26, 7
 7b6:	20 81       	ld	r18, Z
 7b8:	a6 01       	movw	r20, r12
 7ba:	be 01       	movw	r22, r28
 7bc:	6f 57       	subi	r22, 0x7F	; 127
 7be:	7f 4f       	sbci	r23, 0xFF	; 255
 7c0:	c4 01       	movw	r24, r8
 7c2:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <__fmt_a>
 7c6:	95 c1       	rjmp	.+810    	; 0xaf2 <__stack+0x1f3>
 7c8:	61 2f       	mov	r22, r17
 7ca:	70 e0       	ldi	r23, 0x00	; 0
 7cc:	95 01       	movw	r18, r10
 7ce:	41 e0       	ldi	r20, 0x01	; 1
 7d0:	50 e0       	ldi	r21, 0x00	; 0
 7d2:	c6 01       	movw	r24, r12
 7d4:	0e 94 1f 0b 	call	0x163e	; 0x163e <__pop_int>
 7d8:	89 2b       	or	r24, r25
 7da:	09 f4       	brne	.+2      	; 0x7de <__EEPROM_REGION_LENGTH__+0x3de>
 7dc:	8d c1       	rjmp	.+794    	; 0xaf8 <__stack+0x1f9>
 7de:	c7 56       	subi	r28, 0x67	; 103
 7e0:	df 4f       	sbci	r29, 0xFF	; 255
 7e2:	88 81       	ld	r24, Y
 7e4:	99 81       	ldd	r25, Y+1	; 0x01
 7e6:	aa 81       	ldd	r26, Y+2	; 0x02
 7e8:	c9 59       	subi	r28, 0x99	; 153
 7ea:	d0 40       	sbci	r29, 0x00	; 0
 7ec:	01 96       	adiw	r24, 0x01	; 1
 7ee:	a1 1d       	adc	r26, r1
 7f0:	c7 56       	subi	r28, 0x67	; 103
 7f2:	df 4f       	sbci	r29, 0xFF	; 255
 7f4:	88 83       	st	Y, r24
 7f6:	99 83       	std	Y+1, r25	; 0x01
 7f8:	aa 83       	std	Y+2, r26	; 0x02
 7fa:	c9 59       	subi	r28, 0x99	; 153
 7fc:	d0 40       	sbci	r29, 0x00	; 0
 7fe:	a6 01       	movw	r20, r12
 800:	be 01       	movw	r22, r28
 802:	6f 57       	subi	r22, 0x7F	; 127
 804:	7f 4f       	sbci	r23, 0xFF	; 255
 806:	c4 01       	movw	r24, r8
 808:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__fmt_d>
 80c:	72 c1       	rjmp	.+740    	; 0xaf2 <__stack+0x1f3>
 80e:	61 2f       	mov	r22, r17
 810:	70 e0       	ldi	r23, 0x00	; 0
 812:	95 01       	movw	r18, r10
 814:	40 e0       	ldi	r20, 0x00	; 0
 816:	50 e0       	ldi	r21, 0x00	; 0
 818:	c6 01       	movw	r24, r12
 81a:	0e 94 1f 0b 	call	0x163e	; 0x163e <__pop_int>
 81e:	89 2b       	or	r24, r25
 820:	09 f4       	brne	.+2      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 822:	6a c1       	rjmp	.+724    	; 0xaf8 <__stack+0x1f9>
 824:	c7 56       	subi	r28, 0x67	; 103
 826:	df 4f       	sbci	r29, 0xFF	; 255
 828:	88 81       	ld	r24, Y
 82a:	99 81       	ldd	r25, Y+1	; 0x01
 82c:	aa 81       	ldd	r26, Y+2	; 0x02
 82e:	c9 59       	subi	r28, 0x99	; 153
 830:	d0 40       	sbci	r29, 0x00	; 0
 832:	01 96       	adiw	r24, 0x01	; 1
 834:	a1 1d       	adc	r26, r1
 836:	c7 56       	subi	r28, 0x67	; 103
 838:	df 4f       	sbci	r29, 0xFF	; 255
 83a:	88 83       	st	Y, r24
 83c:	99 83       	std	Y+1, r25	; 0x01
 83e:	aa 83       	std	Y+2, r26	; 0x02
 840:	c9 59       	subi	r28, 0x99	; 153
 842:	d0 40       	sbci	r29, 0x00	; 0
 844:	a6 01       	movw	r20, r12
 846:	be 01       	movw	r22, r28
 848:	6f 57       	subi	r22, 0x7F	; 127
 84a:	7f 4f       	sbci	r23, 0xFF	; 255
 84c:	c4 01       	movw	r24, r8
 84e:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__fmt_u>
 852:	4f c1       	rjmp	.+670    	; 0xaf2 <__stack+0x1f3>
 854:	61 2f       	mov	r22, r17
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	95 01       	movw	r18, r10
 85a:	40 e0       	ldi	r20, 0x00	; 0
 85c:	50 e0       	ldi	r21, 0x00	; 0
 85e:	c6 01       	movw	r24, r12
 860:	0e 94 1f 0b 	call	0x163e	; 0x163e <__pop_int>
 864:	89 2b       	or	r24, r25
 866:	09 f4       	brne	.+2      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 868:	47 c1       	rjmp	.+654    	; 0xaf8 <__stack+0x1f9>
 86a:	c7 56       	subi	r28, 0x67	; 103
 86c:	df 4f       	sbci	r29, 0xFF	; 255
 86e:	88 81       	ld	r24, Y
 870:	99 81       	ldd	r25, Y+1	; 0x01
 872:	aa 81       	ldd	r26, Y+2	; 0x02
 874:	c9 59       	subi	r28, 0x99	; 153
 876:	d0 40       	sbci	r29, 0x00	; 0
 878:	01 96       	adiw	r24, 0x01	; 1
 87a:	a1 1d       	adc	r26, r1
 87c:	c7 56       	subi	r28, 0x67	; 103
 87e:	df 4f       	sbci	r29, 0xFF	; 255
 880:	88 83       	st	Y, r24
 882:	99 83       	std	Y+1, r25	; 0x01
 884:	aa 83       	std	Y+2, r26	; 0x02
 886:	c9 59       	subi	r28, 0x99	; 153
 888:	d0 40       	sbci	r29, 0x00	; 0
 88a:	a6 01       	movw	r20, r12
 88c:	be 01       	movw	r22, r28
 88e:	6f 57       	subi	r22, 0x7F	; 127
 890:	7f 4f       	sbci	r23, 0xFF	; 255
 892:	c4 01       	movw	r24, r8
 894:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <__fmt_o>
 898:	2c c1       	rjmp	.+600    	; 0xaf2 <__stack+0x1f3>
 89a:	61 2f       	mov	r22, r17
 89c:	70 e0       	ldi	r23, 0x00	; 0
 89e:	95 01       	movw	r18, r10
 8a0:	40 e0       	ldi	r20, 0x00	; 0
 8a2:	50 e0       	ldi	r21, 0x00	; 0
 8a4:	c6 01       	movw	r24, r12
 8a6:	0e 94 1f 0b 	call	0x163e	; 0x163e <__pop_int>
 8aa:	89 2b       	or	r24, r25
 8ac:	09 f4       	brne	.+2      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 8ae:	24 c1       	rjmp	.+584    	; 0xaf8 <__stack+0x1f9>
 8b0:	c7 56       	subi	r28, 0x67	; 103
 8b2:	df 4f       	sbci	r29, 0xFF	; 255
 8b4:	88 81       	ld	r24, Y
 8b6:	99 81       	ldd	r25, Y+1	; 0x01
 8b8:	aa 81       	ldd	r26, Y+2	; 0x02
 8ba:	c9 59       	subi	r28, 0x99	; 153
 8bc:	d0 40       	sbci	r29, 0x00	; 0
 8be:	9c 01       	movw	r18, r24
 8c0:	4a 2f       	mov	r20, r26
 8c2:	2f 5f       	subi	r18, 0xFF	; 255
 8c4:	3f 4f       	sbci	r19, 0xFF	; 255
 8c6:	4f 4f       	sbci	r20, 0xFF	; 255
 8c8:	c7 56       	subi	r28, 0x67	; 103
 8ca:	df 4f       	sbci	r29, 0xFF	; 255
 8cc:	28 83       	st	Y, r18
 8ce:	39 83       	std	Y+1, r19	; 0x01
 8d0:	4a 83       	std	Y+2, r20	; 0x02
 8d2:	c9 59       	subi	r28, 0x99	; 153
 8d4:	d0 40       	sbci	r29, 0x00	; 0
 8d6:	fc 01       	movw	r30, r24
 8d8:	24 91       	lpm	r18, Z
 8da:	a7 fd       	sbrc	r26, 7
 8dc:	20 81       	ld	r18, Z
 8de:	4b c0       	rjmp	.+150    	; 0x976 <__stack+0x77>
 8e0:	95 01       	movw	r18, r10
 8e2:	40 e0       	ldi	r20, 0x00	; 0
 8e4:	50 e0       	ldi	r21, 0x00	; 0
 8e6:	60 ef       	ldi	r22, 0xF0	; 240
 8e8:	70 e0       	ldi	r23, 0x00	; 0
 8ea:	c6 01       	movw	r24, r12
 8ec:	0e 94 1f 0b 	call	0x163e	; 0x163e <__pop_int>
 8f0:	89 2b       	or	r24, r25
 8f2:	09 f4       	brne	.+2      	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8f4:	01 c1       	rjmp	.+514    	; 0xaf8 <__stack+0x1f9>
 8f6:	c7 56       	subi	r28, 0x67	; 103
 8f8:	df 4f       	sbci	r29, 0xFF	; 255
 8fa:	88 81       	ld	r24, Y
 8fc:	99 81       	ldd	r25, Y+1	; 0x01
 8fe:	aa 81       	ldd	r26, Y+2	; 0x02
 900:	c9 59       	subi	r28, 0x99	; 153
 902:	d0 40       	sbci	r29, 0x00	; 0
 904:	01 96       	adiw	r24, 0x01	; 1
 906:	a1 1d       	adc	r26, r1
 908:	c7 56       	subi	r28, 0x67	; 103
 90a:	df 4f       	sbci	r29, 0xFF	; 255
 90c:	88 83       	st	Y, r24
 90e:	99 83       	std	Y+1, r25	; 0x01
 910:	aa 83       	std	Y+2, r26	; 0x02
 912:	c9 59       	subi	r28, 0x99	; 153
 914:	d0 40       	sbci	r29, 0x00	; 0
 916:	86 e0       	ldi	r24, 0x06	; 6
 918:	20 e2       	ldi	r18, 0x20	; 32
 91a:	33 e0       	ldi	r19, 0x03	; 3
 91c:	40 e0       	ldi	r20, 0x00	; 0
 91e:	f9 01       	movw	r30, r18
 920:	de 01       	movw	r26, r28
 922:	ad 56       	subi	r26, 0x6D	; 109
 924:	bf 4f       	sbci	r27, 0xFF	; 255
 926:	74 2f       	mov	r23, r20
 928:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__movmemx_qi>
 92c:	d6 01       	movw	r26, r12
 92e:	2c 91       	ld	r18, X
 930:	11 96       	adiw	r26, 0x01	; 1
 932:	3c 91       	ld	r19, X
 934:	11 97       	sbiw	r26, 0x01	; 1
 936:	12 96       	adiw	r26, 0x02	; 2
 938:	4c 91       	ld	r20, X
 93a:	12 97       	sbiw	r26, 0x02	; 2
 93c:	13 96       	adiw	r26, 0x03	; 3
 93e:	5c 91       	ld	r21, X
 940:	13 97       	sbiw	r26, 0x03	; 3
 942:	14 96       	adiw	r26, 0x04	; 4
 944:	6c 91       	ld	r22, X
 946:	14 97       	sbiw	r26, 0x04	; 4
 948:	15 96       	adiw	r26, 0x05	; 5
 94a:	7c 91       	ld	r23, X
 94c:	15 97       	sbiw	r26, 0x05	; 5
 94e:	16 96       	adiw	r26, 0x06	; 6
 950:	8c 91       	ld	r24, X
 952:	16 97       	sbiw	r26, 0x06	; 6
 954:	17 96       	adiw	r26, 0x07	; 7
 956:	9c 91       	ld	r25, X
 958:	a0 e0       	ldi	r26, 0x00	; 0
 95a:	0e 94 92 13 	call	0x2724	; 0x2724 <__cmpdi2_s8>
 95e:	51 f4       	brne	.+20     	; 0x974 <__stack+0x75>
 960:	00 e0       	ldi	r16, 0x00	; 0
 962:	10 e0       	ldi	r17, 0x00	; 0
 964:	cf 55       	subi	r28, 0x5F	; 95
 966:	df 4f       	sbci	r29, 0xFF	; 255
 968:	28 81       	ld	r18, Y
 96a:	39 81       	ldd	r19, Y+1	; 0x01
 96c:	4a 81       	ldd	r20, Y+2	; 0x02
 96e:	c1 5a       	subi	r28, 0xA1	; 161
 970:	d0 40       	sbci	r29, 0x00	; 0
 972:	b9 c0       	rjmp	.+370    	; 0xae6 <__stack+0x1e7>
 974:	28 e7       	ldi	r18, 0x78	; 120
 976:	a6 01       	movw	r20, r12
 978:	be 01       	movw	r22, r28
 97a:	6f 57       	subi	r22, 0x7F	; 127
 97c:	7f 4f       	sbci	r23, 0xFF	; 255
 97e:	c4 01       	movw	r24, r8
 980:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fmt_x>
 984:	b6 c0       	rjmp	.+364    	; 0xaf2 <__stack+0x1f3>
 986:	61 2f       	mov	r22, r17
 988:	70 e0       	ldi	r23, 0x00	; 0
 98a:	95 01       	movw	r18, r10
 98c:	a1 01       	movw	r20, r2
 98e:	4e 0d       	add	r20, r14
 990:	5f 1d       	adc	r21, r15
 992:	c6 01       	movw	r24, r12
 994:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__pop_ptr>
 998:	af c0       	rjmp	.+350    	; 0xaf8 <__stack+0x1f9>
 99a:	61 2f       	mov	r22, r17
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	a5 01       	movw	r20, r10
 9a0:	c6 01       	movw	r24, r12
 9a2:	0e 94 23 12 	call	0x2446	; 0x2446 <__pop_float>
 9a6:	89 2b       	or	r24, r25
 9a8:	09 f4       	brne	.+2      	; 0x9ac <__stack+0xad>
 9aa:	a6 c0       	rjmp	.+332    	; 0xaf8 <__stack+0x1f9>
 9ac:	c7 56       	subi	r28, 0x67	; 103
 9ae:	df 4f       	sbci	r29, 0xFF	; 255
 9b0:	88 81       	ld	r24, Y
 9b2:	99 81       	ldd	r25, Y+1	; 0x01
 9b4:	aa 81       	ldd	r26, Y+2	; 0x02
 9b6:	c9 59       	subi	r28, 0x99	; 153
 9b8:	d0 40       	sbci	r29, 0x00	; 0
 9ba:	9c 01       	movw	r18, r24
 9bc:	4a 2f       	mov	r20, r26
 9be:	2f 5f       	subi	r18, 0xFF	; 255
 9c0:	3f 4f       	sbci	r19, 0xFF	; 255
 9c2:	4f 4f       	sbci	r20, 0xFF	; 255
 9c4:	c7 56       	subi	r28, 0x67	; 103
 9c6:	df 4f       	sbci	r29, 0xFF	; 255
 9c8:	28 83       	st	Y, r18
 9ca:	39 83       	std	Y+1, r19	; 0x01
 9cc:	4a 83       	std	Y+2, r20	; 0x02
 9ce:	c9 59       	subi	r28, 0x99	; 153
 9d0:	d0 40       	sbci	r29, 0x00	; 0
 9d2:	fc 01       	movw	r30, r24
 9d4:	24 91       	lpm	r18, Z
 9d6:	a7 fd       	sbrc	r26, 7
 9d8:	20 81       	ld	r18, Z
 9da:	a6 01       	movw	r20, r12
 9dc:	be 01       	movw	r22, r28
 9de:	6f 57       	subi	r22, 0x7F	; 127
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255
 9e2:	c4 01       	movw	r24, r8
 9e4:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <__fmt_a>
 9e8:	84 c0       	rjmp	.+264    	; 0xaf2 <__stack+0x1f3>
 9ea:	10 38       	cpi	r17, 0x80	; 128
 9ec:	09 f0       	breq	.+2      	; 0x9f0 <__stack+0xf1>
 9ee:	84 c0       	rjmp	.+264    	; 0xaf8 <__stack+0x1f9>
 9f0:	c7 56       	subi	r28, 0x67	; 103
 9f2:	df 4f       	sbci	r29, 0xFF	; 255
 9f4:	88 81       	ld	r24, Y
 9f6:	99 81       	ldd	r25, Y+1	; 0x01
 9f8:	aa 81       	ldd	r26, Y+2	; 0x02
 9fa:	c9 59       	subi	r28, 0x99	; 153
 9fc:	d0 40       	sbci	r29, 0x00	; 0
 9fe:	01 96       	adiw	r24, 0x01	; 1
 a00:	a1 1d       	adc	r26, r1
 a02:	c7 56       	subi	r28, 0x67	; 103
 a04:	df 4f       	sbci	r29, 0xFF	; 255
 a06:	88 83       	st	Y, r24
 a08:	99 83       	std	Y+1, r25	; 0x01
 a0a:	aa 83       	std	Y+2, r26	; 0x02
 a0c:	c9 59       	subi	r28, 0x99	; 153
 a0e:	d0 40       	sbci	r29, 0x00	; 0
 a10:	d5 01       	movw	r26, r10
 a12:	ed 91       	ld	r30, X+
 a14:	fc 91       	ld	r31, X
 a16:	11 97       	sbiw	r26, 0x01	; 1
 a18:	cf 01       	movw	r24, r30
 a1a:	02 96       	adiw	r24, 0x02	; 2
 a1c:	8d 93       	st	X+, r24
 a1e:	9c 93       	st	X, r25
 a20:	80 81       	ld	r24, Z
 a22:	f6 01       	movw	r30, r12
 a24:	80 83       	st	Z, r24
 a26:	5b c0       	rjmp	.+182    	; 0xade <__stack+0x1df>
 a28:	10 38       	cpi	r17, 0x80	; 128
 a2a:	09 f0       	breq	.+2      	; 0xa2e <__stack+0x12f>
 a2c:	65 c0       	rjmp	.+202    	; 0xaf8 <__stack+0x1f9>
 a2e:	c7 56       	subi	r28, 0x67	; 103
 a30:	df 4f       	sbci	r29, 0xFF	; 255
 a32:	88 81       	ld	r24, Y
 a34:	99 81       	ldd	r25, Y+1	; 0x01
 a36:	aa 81       	ldd	r26, Y+2	; 0x02
 a38:	c9 59       	subi	r28, 0x99	; 153
 a3a:	d0 40       	sbci	r29, 0x00	; 0
 a3c:	01 96       	adiw	r24, 0x01	; 1
 a3e:	a1 1d       	adc	r26, r1
 a40:	c7 56       	subi	r28, 0x67	; 103
 a42:	df 4f       	sbci	r29, 0xFF	; 255
 a44:	88 83       	st	Y, r24
 a46:	99 83       	std	Y+1, r25	; 0x01
 a48:	aa 83       	std	Y+2, r26	; 0x02
 a4a:	c9 59       	subi	r28, 0x99	; 153
 a4c:	d0 40       	sbci	r29, 0x00	; 0
 a4e:	d5 01       	movw	r26, r10
 a50:	ed 91       	ld	r30, X+
 a52:	fc 91       	ld	r31, X
 a54:	11 97       	sbiw	r26, 0x01	; 1
 a56:	cf 01       	movw	r24, r30
 a58:	03 96       	adiw	r24, 0x03	; 3
 a5a:	8d 93       	st	X+, r24
 a5c:	9c 93       	st	X, r25
 a5e:	20 81       	ld	r18, Z
 a60:	31 81       	ldd	r19, Z+1	; 0x01
 a62:	42 81       	ldd	r20, Z+2	; 0x02
 a64:	00 e0       	ldi	r16, 0x00	; 0
 a66:	10 e0       	ldi	r17, 0x00	; 0
 a68:	3e c0       	rjmp	.+124    	; 0xae6 <__stack+0x1e7>
 a6a:	10 38       	cpi	r17, 0x80	; 128
 a6c:	09 f0       	breq	.+2      	; 0xa70 <__stack+0x171>
 a6e:	44 c0       	rjmp	.+136    	; 0xaf8 <__stack+0x1f9>
 a70:	c7 56       	subi	r28, 0x67	; 103
 a72:	df 4f       	sbci	r29, 0xFF	; 255
 a74:	88 81       	ld	r24, Y
 a76:	99 81       	ldd	r25, Y+1	; 0x01
 a78:	aa 81       	ldd	r26, Y+2	; 0x02
 a7a:	c9 59       	subi	r28, 0x99	; 153
 a7c:	d0 40       	sbci	r29, 0x00	; 0
 a7e:	01 96       	adiw	r24, 0x01	; 1
 a80:	a1 1d       	adc	r26, r1
 a82:	c7 56       	subi	r28, 0x67	; 103
 a84:	df 4f       	sbci	r29, 0xFF	; 255
 a86:	88 83       	st	Y, r24
 a88:	99 83       	std	Y+1, r25	; 0x01
 a8a:	aa 83       	std	Y+2, r26	; 0x02
 a8c:	c9 59       	subi	r28, 0x99	; 153
 a8e:	d0 40       	sbci	r29, 0x00	; 0
 a90:	f6 01       	movw	r30, r12
 a92:	70 82       	st	Z, r7
 a94:	24 c0       	rjmp	.+72     	; 0xade <__stack+0x1df>
 a96:	d6 01       	movw	r26, r12
 a98:	7c 92       	st	X, r7
 a9a:	c2 56       	subi	r28, 0x62	; 98
 a9c:	df 4f       	sbci	r29, 0xFF	; 255
 a9e:	28 81       	ld	r18, Y
 aa0:	39 81       	ldd	r19, Y+1	; 0x01
 aa2:	4a 81       	ldd	r20, Y+2	; 0x02
 aa4:	ce 59       	subi	r28, 0x9E	; 158
 aa6:	d0 40       	sbci	r29, 0x00	; 0
 aa8:	c7 56       	subi	r28, 0x67	; 103
 aaa:	df 4f       	sbci	r29, 0xFF	; 255
 aac:	28 83       	st	Y, r18
 aae:	39 83       	std	Y+1, r19	; 0x01
 ab0:	4a 83       	std	Y+2, r20	; 0x02
 ab2:	c9 59       	subi	r28, 0x99	; 153
 ab4:	d0 40       	sbci	r29, 0x00	; 0
 ab6:	cf 57       	subi	r28, 0x7F	; 127
 ab8:	df 4f       	sbci	r29, 0xFF	; 255
 aba:	19 82       	std	Y+1, r1	; 0x01
 abc:	18 82       	st	Y, r1
 abe:	c1 58       	subi	r28, 0x81	; 129
 ac0:	d0 40       	sbci	r29, 0x00	; 0
 ac2:	cb 57       	subi	r28, 0x7B	; 123
 ac4:	df 4f       	sbci	r29, 0xFF	; 255
 ac6:	19 82       	std	Y+1, r1	; 0x01
 ac8:	18 82       	st	Y, r1
 aca:	c5 58       	subi	r28, 0x85	; 133
 acc:	d0 40       	sbci	r29, 0x00	; 0
 ace:	8f ef       	ldi	r24, 0xFF	; 255
 ad0:	9f ef       	ldi	r25, 0xFF	; 255
 ad2:	cd 57       	subi	r28, 0x7D	; 125
 ad4:	df 4f       	sbci	r29, 0xFF	; 255
 ad6:	99 83       	std	Y+1, r25	; 0x01
 ad8:	88 83       	st	Y, r24
 ada:	c3 58       	subi	r28, 0x83	; 131
 adc:	d0 40       	sbci	r29, 0x00	; 0
 ade:	01 e0       	ldi	r16, 0x01	; 1
 ae0:	10 e0       	ldi	r17, 0x00	; 0
 ae2:	46 2d       	mov	r20, r6
 ae4:	92 01       	movw	r18, r4
 ae6:	be 01       	movw	r22, r28
 ae8:	6f 57       	subi	r22, 0x7F	; 127
 aea:	7f 4f       	sbci	r23, 0xFF	; 255
 aec:	c4 01       	movw	r24, r8
 aee:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__fmt_s>
 af2:	8e 0d       	add	r24, r14
 af4:	9f 1d       	adc	r25, r15
 af6:	11 c0       	rjmp	.+34     	; 0xb1a <__stack+0x21b>
 af8:	c7 56       	subi	r28, 0x67	; 103
 afa:	df 4f       	sbci	r29, 0xFF	; 255
 afc:	88 81       	ld	r24, Y
 afe:	99 81       	ldd	r25, Y+1	; 0x01
 b00:	aa 81       	ldd	r26, Y+2	; 0x02
 b02:	c9 59       	subi	r28, 0x99	; 153
 b04:	d0 40       	sbci	r29, 0x00	; 0
 b06:	01 96       	adiw	r24, 0x01	; 1
 b08:	a1 1d       	adc	r26, r1
 b0a:	c7 56       	subi	r28, 0x67	; 103
 b0c:	df 4f       	sbci	r29, 0xFF	; 255
 b0e:	88 83       	st	Y, r24
 b10:	99 83       	std	Y+1, r25	; 0x01
 b12:	aa 83       	std	Y+2, r26	; 0x02
 b14:	c9 59       	subi	r28, 0x99	; 153
 b16:	d0 40       	sbci	r29, 0x00	; 0
 b18:	c7 01       	movw	r24, r14
 b1a:	71 01       	movw	r14, r2
 b1c:	e8 0e       	add	r14, r24
 b1e:	f9 1e       	adc	r15, r25
 b20:	e2 14       	cp	r14, r2
 b22:	f3 04       	cpc	r15, r3
 b24:	4c f4       	brge	.+18     	; 0xb38 <__stack+0x239>
 b26:	8f e4       	ldi	r24, 0x4F	; 79
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <__errno_val+0x1>
 b2e:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <__errno_val>
 b32:	8f ef       	ldi	r24, 0xFF	; 255
 b34:	9f ef       	ldi	r25, 0xFF	; 255
 b36:	03 c0       	rjmp	.+6      	; 0xb3e <__stack+0x23f>
 b38:	17 01       	movw	r2, r14
 b3a:	21 cc       	rjmp	.-1982   	; 0x37e <__printf_core+0x58>
 b3c:	c1 01       	movw	r24, r2
 b3e:	cd 55       	subi	r28, 0x5D	; 93
 b40:	df 4f       	sbci	r29, 0xFF	; 255
 b42:	e2 e1       	ldi	r30, 0x12	; 18
 b44:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__epilogue_restores__>

Disassembly of section .text.fputc:

00001f12 <fputc>:
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    1f1a:	db 01       	movw	r26, r22
    1f1c:	2d 91       	ld	r18, X+
    1f1e:	3c 91       	ld	r19, X
    1f20:	11 97       	sbiw	r26, 0x01	; 1
    1f22:	30 ff       	sbrs	r19, 0
    1f24:	25 c0       	rjmp	.+74     	; 0x1f70 <fputc+0x5e>
    1f26:	17 96       	adiw	r26, 0x07	; 7
    1f28:	4d 91       	ld	r20, X+
    1f2a:	5c 91       	ld	r21, X
    1f2c:	18 97       	sbiw	r26, 0x08	; 8
    1f2e:	15 96       	adiw	r26, 0x05	; 5
    1f30:	2d 91       	ld	r18, X+
    1f32:	3c 91       	ld	r19, X
    1f34:	16 97       	sbiw	r26, 0x06	; 6
    1f36:	42 17       	cp	r20, r18
    1f38:	53 07       	cpc	r21, r19
    1f3a:	78 f4       	brcc	.+30     	; 0x1f5a <fputc+0x48>
    1f3c:	12 96       	adiw	r26, 0x02	; 2
    1f3e:	ed 91       	ld	r30, X+
    1f40:	fc 91       	ld	r31, X
    1f42:	13 97       	sbiw	r26, 0x03	; 3
    1f44:	80 83       	st	Z, r24
    1f46:	12 96       	adiw	r26, 0x02	; 2
    1f48:	2d 91       	ld	r18, X+
    1f4a:	3c 91       	ld	r19, X
    1f4c:	13 97       	sbiw	r26, 0x03	; 3
    1f4e:	2f 5f       	subi	r18, 0xFF	; 255
    1f50:	3f 4f       	sbci	r19, 0xFF	; 255
    1f52:	13 96       	adiw	r26, 0x03	; 3
    1f54:	3c 93       	st	X, r19
    1f56:	2e 93       	st	-X, r18
    1f58:	12 97       	sbiw	r26, 0x02	; 2
    1f5a:	17 96       	adiw	r26, 0x07	; 7
    1f5c:	2d 91       	ld	r18, X+
    1f5e:	3c 91       	ld	r19, X
    1f60:	18 97       	sbiw	r26, 0x08	; 8
    1f62:	2f 5f       	subi	r18, 0xFF	; 255
    1f64:	3f 4f       	sbci	r19, 0xFF	; 255
    1f66:	18 96       	adiw	r26, 0x08	; 8
    1f68:	3c 93       	st	X, r19
    1f6a:	2e 93       	st	-X, r18
    1f6c:	17 97       	sbiw	r26, 0x07	; 7
    1f6e:	15 c0       	rjmp	.+42     	; 0x1f9a <fputc+0x88>
    1f70:	1d 96       	adiw	r26, 0x0d	; 13
    1f72:	ed 91       	ld	r30, X+
    1f74:	fc 91       	ld	r31, X
    1f76:	1e 97       	sbiw	r26, 0x0e	; 14
    1f78:	30 97       	sbiw	r30, 0x00	; 0
    1f7a:	19 f4       	brne	.+6      	; 0x1f82 <fputc+0x70>
    1f7c:	8f ef       	ldi	r24, 0xFF	; 255
    1f7e:	9f ef       	ldi	r25, 0xFF	; 255
    1f80:	0c c0       	rjmp	.+24     	; 0x1f9a <fputc+0x88>
    1f82:	8b 01       	movw	r16, r22
    1f84:	ec 01       	movw	r28, r24
    1f86:	09 95       	icall
    1f88:	89 2b       	or	r24, r25
    1f8a:	c1 f7       	brne	.-16     	; 0x1f7c <fputc+0x6a>
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	87 81       	ldd	r24, Z+7	; 0x07
    1f90:	90 85       	ldd	r25, Z+8	; 0x08
    1f92:	01 96       	adiw	r24, 0x01	; 1
    1f94:	90 87       	std	Z+8, r25	; 0x08
    1f96:	87 83       	std	Z+7, r24	; 0x07
    1f98:	ce 01       	movw	r24, r28
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	08 95       	ret

Disassembly of section .text.__fmt_d:

000014c0 <__fmt_d>:
    14c0:	ad e0       	ldi	r26, 0x0D	; 13
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e6 e6       	ldi	r30, 0x66	; 102
    14c6:	fa e0       	ldi	r31, 0x0A	; 10
    14c8:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__prologue_saves__>
    14cc:	9a 87       	std	Y+10, r25	; 0x0a
    14ce:	89 87       	std	Y+9, r24	; 0x09
    14d0:	7c 83       	std	Y+4, r23	; 0x04
    14d2:	6b 83       	std	Y+3, r22	; 0x03
    14d4:	fa 01       	movw	r30, r20
    14d6:	db 01       	movw	r26, r22
    14d8:	12 96       	adiw	r26, 0x02	; 2
    14da:	cd 90       	ld	r12, X+
    14dc:	dc 90       	ld	r13, X
    14de:	13 97       	sbiw	r26, 0x03	; 3
    14e0:	14 96       	adiw	r26, 0x04	; 4
    14e2:	8d 91       	ld	r24, X+
    14e4:	9c 91       	ld	r25, X
    14e6:	15 97       	sbiw	r26, 0x05	; 5
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	ed 90       	ld	r14, X+
    14ee:	fc 90       	ld	r15, X
    14f0:	11 97       	sbiw	r26, 0x01	; 1
    14f2:	fa 82       	std	Y+2, r15	; 0x02
    14f4:	e9 82       	std	Y+1, r14	; 0x01
    14f6:	16 96       	adiw	r26, 0x06	; 6
    14f8:	0d 90       	ld	r0, X+
    14fa:	bc 91       	ld	r27, X
    14fc:	a0 2d       	mov	r26, r0
    14fe:	b8 87       	std	Y+8, r27	; 0x08
    1500:	af 83       	std	Y+7, r26	; 0x07
    1502:	20 80       	ld	r2, Z
    1504:	31 80       	ldd	r3, Z+1	; 0x01
    1506:	42 80       	ldd	r4, Z+2	; 0x02
    1508:	53 80       	ldd	r5, Z+3	; 0x03
    150a:	64 80       	ldd	r6, Z+4	; 0x04
    150c:	75 80       	ldd	r7, Z+5	; 0x05
    150e:	86 80       	ldd	r8, Z+6	; 0x06
    1510:	97 80       	ldd	r9, Z+7	; 0x07
    1512:	81 01       	movw	r16, r2
    1514:	b4 2d       	mov	r27, r4
    1516:	f5 2d       	mov	r31, r5
    1518:	e6 2d       	mov	r30, r6
    151a:	7b 86       	std	Y+11, r7	; 0x0b
    151c:	8c 86       	std	Y+12, r8	; 0x0c
    151e:	9d 86       	std	Y+13, r9	; 0x0d
    1520:	91 01       	movw	r18, r2
    1522:	a2 01       	movw	r20, r4
    1524:	b3 01       	movw	r22, r6
    1526:	c4 01       	movw	r24, r8
    1528:	a0 e0       	ldi	r26, 0x00	; 0
    152a:	0e 94 92 13 	call	0x2724	; 0x2724 <__cmpdi2_s8>
    152e:	4c f4       	brge	.+18     	; 0x1542 <__fmt_d+0x82>
    1530:	0e 94 26 13 	call	0x264c	; 0x264c <__negdi2>
    1534:	89 01       	movw	r16, r18
    1536:	b4 2f       	mov	r27, r20
    1538:	f5 2f       	mov	r31, r21
    153a:	e6 2f       	mov	r30, r22
    153c:	7b 87       	std	Y+11, r23	; 0x0b
    153e:	8c 87       	std	Y+12, r24	; 0x0c
    1540:	9d 87       	std	Y+13, r25	; 0x0d
    1542:	d7 fc       	sbrc	r13, 7
    1544:	04 c0       	rjmp	.+8      	; 0x154e <__fmt_d+0x8e>
    1546:	e8 94       	clt
    1548:	e1 f8       	bld	r14, 1
    154a:	fa 82       	std	Y+2, r15	; 0x02
    154c:	e9 82       	std	Y+1, r14	; 0x01
    154e:	91 01       	movw	r18, r2
    1550:	a2 01       	movw	r20, r4
    1552:	b3 01       	movw	r22, r6
    1554:	c4 01       	movw	r24, r8
    1556:	a0 e0       	ldi	r26, 0x00	; 0
    1558:	ed 80       	ldd	r14, Y+5	; 0x05
    155a:	fe 80       	ldd	r15, Y+6	; 0x06
    155c:	0e 94 92 13 	call	0x2724	; 0x2724 <__cmpdi2_s8>
    1560:	1c f0       	brlt	.+6      	; 0x1568 <__fmt_d+0xa8>
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	82 ff       	sbrs	r24, 2
    1566:	04 c0       	rjmp	.+8      	; 0x1570 <__fmt_d+0xb0>
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	e8 1a       	sub	r14, r24
    156c:	f1 08       	sbc	r15, r1
    156e:	05 c0       	rjmp	.+10     	; 0x157a <__fmt_d+0xba>
    1570:	83 ff       	sbrs	r24, 3
    1572:	03 c0       	rjmp	.+6      	; 0x157a <__fmt_d+0xba>
    1574:	91 e0       	ldi	r25, 0x01	; 1
    1576:	e9 1a       	sub	r14, r25
    1578:	f1 08       	sbc	r15, r1
    157a:	ce 01       	movw	r24, r28
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	5c 01       	movw	r10, r24
    1580:	8a e0       	ldi	r24, 0x0A	; 10
    1582:	c8 2e       	mov	r12, r24
    1584:	d1 2c       	mov	r13, r1
    1586:	2b 2f       	mov	r18, r27
    1588:	3f 2f       	mov	r19, r31
    158a:	4e 2f       	mov	r20, r30
    158c:	5b 85       	ldd	r21, Y+11	; 0x0b
    158e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1590:	7d 85       	ldd	r23, Y+13	; 0x0d
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__cvt_u>
    159a:	fc 01       	movw	r30, r24
    159c:	91 01       	movw	r18, r2
    159e:	a2 01       	movw	r20, r4
    15a0:	b3 01       	movw	r22, r6
    15a2:	c4 01       	movw	r24, r8
    15a4:	a0 e0       	ldi	r26, 0x00	; 0
    15a6:	0e 94 92 13 	call	0x2724	; 0x2724 <__cmpdi2_s8>
    15aa:	1c f0       	brlt	.+6      	; 0x15b2 <__fmt_d+0xf2>
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	82 ff       	sbrs	r24, 2
    15b0:	12 c0       	rjmp	.+36     	; 0x15d6 <__fmt_d+0x116>
    15b2:	31 97       	sbiw	r30, 0x01	; 1
    15b4:	0f 81       	ldd	r16, Y+7	; 0x07
    15b6:	18 85       	ldd	r17, Y+8	; 0x08
    15b8:	0e 0f       	add	r16, r30
    15ba:	1f 1f       	adc	r17, r31
    15bc:	91 01       	movw	r18, r2
    15be:	a2 01       	movw	r20, r4
    15c0:	b3 01       	movw	r22, r6
    15c2:	c4 01       	movw	r24, r8
    15c4:	a0 e0       	ldi	r26, 0x00	; 0
    15c6:	0e 94 92 13 	call	0x2724	; 0x2724 <__cmpdi2_s8>
    15ca:	14 f0       	brlt	.+4      	; 0x15d0 <__fmt_d+0x110>
    15cc:	8b e2       	ldi	r24, 0x2B	; 43
    15ce:	01 c0       	rjmp	.+2      	; 0x15d2 <__fmt_d+0x112>
    15d0:	8d e2       	ldi	r24, 0x2D	; 45
    15d2:	d8 01       	movw	r26, r16
    15d4:	08 c0       	rjmp	.+16     	; 0x15e6 <__fmt_d+0x126>
    15d6:	83 ff       	sbrs	r24, 3
    15d8:	07 c0       	rjmp	.+14     	; 0x15e8 <__fmt_d+0x128>
    15da:	31 97       	sbiw	r30, 0x01	; 1
    15dc:	af 81       	ldd	r26, Y+7	; 0x07
    15de:	b8 85       	ldd	r27, Y+8	; 0x08
    15e0:	ae 0f       	add	r26, r30
    15e2:	bf 1f       	adc	r27, r31
    15e4:	80 e2       	ldi	r24, 0x20	; 32
    15e6:	8c 93       	st	X, r24
    15e8:	e9 80       	ldd	r14, Y+1	; 0x01
    15ea:	fa 80       	ldd	r15, Y+2	; 0x02
    15ec:	ab 81       	ldd	r26, Y+3	; 0x03
    15ee:	bc 81       	ldd	r27, Y+4	; 0x04
    15f0:	18 96       	adiw	r26, 0x08	; 8
    15f2:	2d 91       	ld	r18, X+
    15f4:	3c 91       	ld	r19, X
    15f6:	19 97       	sbiw	r26, 0x09	; 9
    15f8:	21 50       	subi	r18, 0x01	; 1
    15fa:	31 09       	sbc	r19, r1
    15fc:	2e 1b       	sub	r18, r30
    15fe:	3f 0b       	sbc	r19, r31
    1600:	8f 81       	ldd	r24, Y+7	; 0x07
    1602:	98 85       	ldd	r25, Y+8	; 0x08
    1604:	e8 0f       	add	r30, r24
    1606:	f9 1f       	adc	r31, r25
    1608:	af 01       	movw	r20, r30
    160a:	60 e8       	ldi	r22, 0x80	; 128
    160c:	0d 81       	ldd	r16, Y+5	; 0x05
    160e:	1e 81       	ldd	r17, Y+6	; 0x06
    1610:	89 85       	ldd	r24, Y+9	; 0x09
    1612:	9a 85       	ldd	r25, Y+10	; 0x0a
    1614:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__pad>
    1618:	9c 01       	movw	r18, r24
    161a:	a9 85       	ldd	r26, Y+9	; 0x09
    161c:	ba 85       	ldd	r27, Y+10	; 0x0a
    161e:	8d 91       	ld	r24, X+
    1620:	9c 91       	ld	r25, X
    1622:	90 ff       	sbrs	r25, 0
    1624:	07 c0       	rjmp	.+14     	; 0x1634 <__fmt_d+0x174>
    1626:	eb 81       	ldd	r30, Y+3	; 0x03
    1628:	fc 81       	ldd	r31, Y+4	; 0x04
    162a:	82 81       	ldd	r24, Z+2	; 0x02
    162c:	93 81       	ldd	r25, Z+3	; 0x03
    162e:	82 17       	cp	r24, r18
    1630:	93 07       	cpc	r25, r19
    1632:	0c f4       	brge	.+2      	; 0x1636 <__fmt_d+0x176>
    1634:	c9 01       	movw	r24, r18
    1636:	2d 96       	adiw	r28, 0x0d	; 13
    1638:	e2 e1       	ldi	r30, 0x12	; 18
    163a:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__epilogue_restores__>

Disassembly of section .text.__fmt_o:

00001ae0 <__fmt_o>:
    1ae0:	a2 e0       	ldi	r26, 0x02	; 2
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e6 e7       	ldi	r30, 0x76	; 118
    1ae6:	fd e0       	ldi	r31, 0x0D	; 13
    1ae8:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__prologue_saves__>
    1aec:	1c 01       	movw	r2, r24
    1aee:	4b 01       	movw	r8, r22
    1af0:	fa 01       	movw	r30, r20
    1af2:	db 01       	movw	r26, r22
    1af4:	12 96       	adiw	r26, 0x02	; 2
    1af6:	2d 91       	ld	r18, X+
    1af8:	3c 91       	ld	r19, X
    1afa:	13 97       	sbiw	r26, 0x03	; 3
    1afc:	14 96       	adiw	r26, 0x04	; 4
    1afe:	4d 90       	ld	r4, X+
    1b00:	5c 90       	ld	r5, X
    1b02:	15 97       	sbiw	r26, 0x05	; 5
    1b04:	8d 91       	ld	r24, X+
    1b06:	9c 91       	ld	r25, X
    1b08:	11 97       	sbiw	r26, 0x01	; 1
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	16 96       	adiw	r26, 0x06	; 6
    1b10:	6d 90       	ld	r6, X+
    1b12:	7c 90       	ld	r7, X
    1b14:	17 97       	sbiw	r26, 0x07	; 7
    1b16:	37 fd       	sbrc	r19, 7
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <__fmt_o+0x40>
    1b1a:	8d 7f       	andi	r24, 0xFD	; 253
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	00 81       	ld	r16, Z
    1b22:	11 81       	ldd	r17, Z+1	; 0x01
    1b24:	22 81       	ldd	r18, Z+2	; 0x02
    1b26:	33 81       	ldd	r19, Z+3	; 0x03
    1b28:	44 81       	ldd	r20, Z+4	; 0x04
    1b2a:	55 81       	ldd	r21, Z+5	; 0x05
    1b2c:	66 81       	ldd	r22, Z+6	; 0x06
    1b2e:	77 81       	ldd	r23, Z+7	; 0x07
    1b30:	fe 01       	movw	r30, r28
    1b32:	31 96       	adiw	r30, 0x01	; 1
    1b34:	5f 01       	movw	r10, r30
    1b36:	88 e0       	ldi	r24, 0x08	; 8
    1b38:	c8 2e       	mov	r12, r24
    1b3a:	d1 2c       	mov	r13, r1
    1b3c:	72 01       	movw	r14, r4
    1b3e:	c4 01       	movw	r24, r8
    1b40:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__cvt_u>
    1b44:	29 81       	ldd	r18, Y+1	; 0x01
    1b46:	24 ff       	sbrs	r18, 4
    1b48:	06 c0       	rjmp	.+12     	; 0x1b56 <__fmt_o+0x76>
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f3 01       	movw	r30, r6
    1b4e:	e8 0f       	add	r30, r24
    1b50:	f9 1f       	adc	r31, r25
    1b52:	20 e3       	ldi	r18, 0x30	; 48
    1b54:	20 83       	st	Z, r18
    1b56:	29 81       	ldd	r18, Y+1	; 0x01
    1b58:	23 ff       	sbrs	r18, 3
    1b5a:	06 c0       	rjmp	.+12     	; 0x1b68 <__fmt_o+0x88>
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	f3 01       	movw	r30, r6
    1b60:	e8 0f       	add	r30, r24
    1b62:	f9 1f       	adc	r31, r25
    1b64:	20 e2       	ldi	r18, 0x20	; 32
    1b66:	20 83       	st	Z, r18
    1b68:	e9 80       	ldd	r14, Y+1	; 0x01
    1b6a:	fa 80       	ldd	r15, Y+2	; 0x02
    1b6c:	d4 01       	movw	r26, r8
    1b6e:	18 96       	adiw	r26, 0x08	; 8
    1b70:	2d 91       	ld	r18, X+
    1b72:	3c 91       	ld	r19, X
    1b74:	19 97       	sbiw	r26, 0x09	; 9
    1b76:	21 50       	subi	r18, 0x01	; 1
    1b78:	31 09       	sbc	r19, r1
    1b7a:	28 1b       	sub	r18, r24
    1b7c:	39 0b       	sbc	r19, r25
    1b7e:	86 0d       	add	r24, r6
    1b80:	97 1d       	adc	r25, r7
    1b82:	ac 01       	movw	r20, r24
    1b84:	60 e8       	ldi	r22, 0x80	; 128
    1b86:	82 01       	movw	r16, r4
    1b88:	c1 01       	movw	r24, r2
    1b8a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__pad>
    1b8e:	9c 01       	movw	r18, r24
    1b90:	f1 01       	movw	r30, r2
    1b92:	80 81       	ld	r24, Z
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	90 ff       	sbrs	r25, 0
    1b98:	08 c0       	rjmp	.+16     	; 0x1baa <__fmt_o+0xca>
    1b9a:	d4 01       	movw	r26, r8
    1b9c:	12 96       	adiw	r26, 0x02	; 2
    1b9e:	8d 91       	ld	r24, X+
    1ba0:	9c 91       	ld	r25, X
    1ba2:	13 97       	sbiw	r26, 0x03	; 3
    1ba4:	82 17       	cp	r24, r18
    1ba6:	93 07       	cpc	r25, r19
    1ba8:	0c f4       	brge	.+2      	; 0x1bac <__fmt_o+0xcc>
    1baa:	c9 01       	movw	r24, r18
    1bac:	22 96       	adiw	r28, 0x02	; 2
    1bae:	e2 e1       	ldi	r30, 0x12	; 18
    1bb0:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__epilogue_restores__>

Disassembly of section .text.__cvt_u:

000017b0 <__cvt_u>:
    17b0:	a2 e1       	ldi	r26, 0x12	; 18
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	ee ed       	ldi	r30, 0xDE	; 222
    17b6:	fb e0       	ldi	r31, 0x0B	; 11
    17b8:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__prologue_saves__>
    17bc:	fc 01       	movw	r30, r24
    17be:	0a 8b       	std	Y+18, r16	; 0x12
    17c0:	1b 83       	std	Y+3, r17	; 0x03
    17c2:	2c 83       	std	Y+4, r18	; 0x04
    17c4:	73 2e       	mov	r7, r19
    17c6:	64 2e       	mov	r6, r20
    17c8:	55 2e       	mov	r5, r21
    17ca:	46 2e       	mov	r4, r22
    17cc:	7d 83       	std	Y+5, r23	; 0x05
    17ce:	cc 86       	std	Y+12, r12	; 0x0c
    17d0:	d8 86       	std	Y+8, r13	; 0x08
    17d2:	bf 82       	std	Y+7, r11	; 0x07
    17d4:	ae 82       	std	Y+6, r10	; 0x06
    17d6:	86 81       	ldd	r24, Z+6	; 0x06
    17d8:	97 81       	ldd	r25, Z+7	; 0x07
    17da:	9b 87       	std	Y+11, r25	; 0x0b
    17dc:	8a 87       	std	Y+10, r24	; 0x0a
    17de:	d5 01       	movw	r26, r10
    17e0:	4d 91       	ld	r20, X+
    17e2:	5c 91       	ld	r21, X
    17e4:	22 81       	ldd	r18, Z+2	; 0x02
    17e6:	33 81       	ldd	r19, Z+3	; 0x03
    17e8:	80 85       	ldd	r24, Z+8	; 0x08
    17ea:	91 85       	ldd	r25, Z+9	; 0x09
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	1c 01       	movw	r2, r24
    17f0:	37 ff       	sbrs	r19, 7
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <__cvt_u+0x48>
    17f4:	21 e0       	ldi	r18, 0x01	; 1
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	ea 85       	ldd	r30, Y+10	; 0x0a
    17fa:	fb 85       	ldd	r31, Y+11	; 0x0b
    17fc:	e8 0f       	add	r30, r24
    17fe:	f9 1f       	adc	r31, r25
    1800:	10 82       	st	Z, r1
    1802:	47 01       	movw	r8, r14
    1804:	e1 e0       	ldi	r30, 0x01	; 1
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	fa 83       	std	Y+2, r31	; 0x02
    180a:	e9 83       	std	Y+1, r30	; 0x01
    180c:	c9 01       	movw	r24, r18
    180e:	8e 19       	sub	r24, r14
    1810:	9f 09       	sbc	r25, r15
    1812:	9e 87       	std	Y+14, r25	; 0x0e
    1814:	8d 87       	std	Y+13, r24	; 0x0d
    1816:	da 01       	movw	r26, r20
    1818:	a2 70       	andi	r26, 0x02	; 2
    181a:	bb 27       	eor	r27, r27
    181c:	b8 8b       	std	Y+16, r27	; 0x10
    181e:	af 87       	std	Y+15, r26	; 0x0f
    1820:	b8 85       	ldd	r27, Y+8	; 0x08
    1822:	bb 0f       	add	r27, r27
    1824:	bb 0b       	sbc	r27, r27
    1826:	b9 8b       	std	Y+17, r27	; 0x11
    1828:	12 14       	cp	r1, r2
    182a:	13 04       	cpc	r1, r3
    182c:	74 f0       	brlt	.+28     	; 0x184a <__cvt_u+0x9a>
    182e:	a9 81       	ldd	r26, Y+1	; 0x01
    1830:	ba 81       	ldd	r27, Y+2	; 0x02
    1832:	ab 2b       	or	r26, r27
    1834:	09 f0       	breq	.+2      	; 0x1838 <__cvt_u+0x88>
    1836:	5c c0       	rjmp	.+184    	; 0x18f0 <__cvt_u+0x140>
    1838:	ae 81       	ldd	r26, Y+6	; 0x06
    183a:	bf 81       	ldd	r27, Y+7	; 0x07
    183c:	8d 91       	ld	r24, X+
    183e:	9c 91       	ld	r25, X
    1840:	11 97       	sbiw	r26, 0x01	; 1
    1842:	8f 7e       	andi	r24, 0xEF	; 239
    1844:	8d 93       	st	X+, r24
    1846:	9c 93       	st	X, r25
    1848:	53 c0       	rjmp	.+166    	; 0x18f0 <__cvt_u+0x140>
    184a:	2a 89       	ldd	r18, Y+18	; 0x12
    184c:	3b 81       	ldd	r19, Y+3	; 0x03
    184e:	4c 81       	ldd	r20, Y+4	; 0x04
    1850:	57 2d       	mov	r21, r7
    1852:	66 2d       	mov	r22, r6
    1854:	75 2d       	mov	r23, r5
    1856:	84 2d       	mov	r24, r4
    1858:	9d 81       	ldd	r25, Y+5	; 0x05
    185a:	a0 e0       	ldi	r26, 0x00	; 0
    185c:	0e 94 92 13 	call	0x2724	; 0x2724 <__cmpdi2_s8>
    1860:	b1 f1       	breq	.+108    	; 0x18ce <__cvt_u+0x11e>
    1862:	e1 e0       	ldi	r30, 0x01	; 1
    1864:	2e 1a       	sub	r2, r30
    1866:	31 08       	sbc	r3, r1
    1868:	fc 85       	ldd	r31, Y+12	; 0x0c
    186a:	f9 87       	std	Y+9, r31	; 0x09
    186c:	af 2e       	mov	r10, r31
    186e:	b8 84       	ldd	r11, Y+8	; 0x08
    1870:	c9 88       	ldd	r12, Y+17	; 0x11
    1872:	dc 2c       	mov	r13, r12
    1874:	ec 2c       	mov	r14, r12
    1876:	fc 2c       	mov	r15, r12
    1878:	0c 2d       	mov	r16, r12
    187a:	1c 2d       	mov	r17, r12
    187c:	2a 89       	ldd	r18, Y+18	; 0x12
    187e:	3b 81       	ldd	r19, Y+3	; 0x03
    1880:	4c 81       	ldd	r20, Y+4	; 0x04
    1882:	57 2d       	mov	r21, r7
    1884:	66 2d       	mov	r22, r6
    1886:	75 2d       	mov	r23, r5
    1888:	84 2d       	mov	r24, r4
    188a:	9d 81       	ldd	r25, Y+5	; 0x05
    188c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__umoddi3>
    1890:	c9 01       	movw	r24, r18
    1892:	29 83       	std	Y+1, r18	; 0x01
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	ea 85       	ldd	r30, Y+10	; 0x0a
    1898:	fb 85       	ldd	r31, Y+11	; 0x0b
    189a:	e2 0d       	add	r30, r2
    189c:	f3 1d       	adc	r31, r3
    189e:	80 5d       	subi	r24, 0xD0	; 208
    18a0:	80 83       	st	Z, r24
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	88 1a       	sub	r8, r24
    18a6:	91 08       	sbc	r9, r1
    18a8:	2a 89       	ldd	r18, Y+18	; 0x12
    18aa:	3b 81       	ldd	r19, Y+3	; 0x03
    18ac:	4c 81       	ldd	r20, Y+4	; 0x04
    18ae:	57 2d       	mov	r21, r7
    18b0:	66 2d       	mov	r22, r6
    18b2:	75 2d       	mov	r23, r5
    18b4:	84 2d       	mov	r24, r4
    18b6:	9d 81       	ldd	r25, Y+5	; 0x05
    18b8:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivdi3>
    18bc:	2a 8b       	std	Y+18, r18	; 0x12
    18be:	3b 83       	std	Y+3, r19	; 0x03
    18c0:	4c 83       	std	Y+4, r20	; 0x04
    18c2:	75 2e       	mov	r7, r21
    18c4:	66 2e       	mov	r6, r22
    18c6:	57 2e       	mov	r5, r23
    18c8:	48 2e       	mov	r4, r24
    18ca:	9d 83       	std	Y+5, r25	; 0x05
    18cc:	ad cf       	rjmp	.-166    	; 0x1828 <__cvt_u+0x78>
    18ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d2:	88 0d       	add	r24, r8
    18d4:	99 1d       	adc	r25, r9
    18d6:	18 16       	cp	r1, r24
    18d8:	19 06       	cpc	r1, r25
    18da:	1c f2       	brlt	.-122    	; 0x1862 <__cvt_u+0xb2>
    18dc:	18 14       	cp	r1, r8
    18de:	19 04       	cpc	r1, r9
    18e0:	0c f0       	brlt	.+2      	; 0x18e4 <__cvt_u+0x134>
    18e2:	a5 cf       	rjmp	.-182    	; 0x182e <__cvt_u+0x7e>
    18e4:	ef 85       	ldd	r30, Y+15	; 0x0f
    18e6:	f8 89       	ldd	r31, Y+16	; 0x10
    18e8:	ef 2b       	or	r30, r31
    18ea:	09 f0       	breq	.+2      	; 0x18ee <__cvt_u+0x13e>
    18ec:	ba cf       	rjmp	.-140    	; 0x1862 <__cvt_u+0xb2>
    18ee:	9f cf       	rjmp	.-194    	; 0x182e <__cvt_u+0x7e>
    18f0:	c1 01       	movw	r24, r2
    18f2:	62 96       	adiw	r28, 0x12	; 18
    18f4:	e2 e1       	ldi	r30, 0x12	; 18
    18f6:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__epilogue_restores__>

Disassembly of section .text.__fmt_u:

00001c7e <__fmt_u>:
    1c7e:	a2 e0       	ldi	r26, 0x02	; 2
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e5 e4       	ldi	r30, 0x45	; 69
    1c84:	fe e0       	ldi	r31, 0x0E	; 14
    1c86:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__prologue_saves__>
    1c8a:	3c 01       	movw	r6, r24
    1c8c:	4b 01       	movw	r8, r22
    1c8e:	fa 01       	movw	r30, r20
    1c90:	db 01       	movw	r26, r22
    1c92:	12 96       	adiw	r26, 0x02	; 2
    1c94:	2d 91       	ld	r18, X+
    1c96:	3c 91       	ld	r19, X
    1c98:	13 97       	sbiw	r26, 0x03	; 3
    1c9a:	14 96       	adiw	r26, 0x04	; 4
    1c9c:	4d 90       	ld	r4, X+
    1c9e:	5c 90       	ld	r5, X
    1ca0:	15 97       	sbiw	r26, 0x05	; 5
    1ca2:	8d 91       	ld	r24, X+
    1ca4:	9c 91       	ld	r25, X
    1ca6:	11 97       	sbiw	r26, 0x01	; 1
    1ca8:	9a 83       	std	Y+2, r25	; 0x02
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	16 96       	adiw	r26, 0x06	; 6
    1cae:	2d 90       	ld	r2, X+
    1cb0:	3c 90       	ld	r3, X
    1cb2:	17 97       	sbiw	r26, 0x07	; 7
    1cb4:	37 fd       	sbrc	r19, 7
    1cb6:	03 c0       	rjmp	.+6      	; 0x1cbe <__fmt_u+0x40>
    1cb8:	8d 7f       	andi	r24, 0xFD	; 253
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	00 81       	ld	r16, Z
    1cc0:	11 81       	ldd	r17, Z+1	; 0x01
    1cc2:	22 81       	ldd	r18, Z+2	; 0x02
    1cc4:	33 81       	ldd	r19, Z+3	; 0x03
    1cc6:	44 81       	ldd	r20, Z+4	; 0x04
    1cc8:	55 81       	ldd	r21, Z+5	; 0x05
    1cca:	66 81       	ldd	r22, Z+6	; 0x06
    1ccc:	77 81       	ldd	r23, Z+7	; 0x07
    1cce:	fe 01       	movw	r30, r28
    1cd0:	31 96       	adiw	r30, 0x01	; 1
    1cd2:	5f 01       	movw	r10, r30
    1cd4:	8a e0       	ldi	r24, 0x0A	; 10
    1cd6:	c8 2e       	mov	r12, r24
    1cd8:	d1 2c       	mov	r13, r1
    1cda:	72 01       	movw	r14, r4
    1cdc:	c4 01       	movw	r24, r8
    1cde:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__cvt_u>
    1ce2:	e9 80       	ldd	r14, Y+1	; 0x01
    1ce4:	fa 80       	ldd	r15, Y+2	; 0x02
    1ce6:	d4 01       	movw	r26, r8
    1ce8:	18 96       	adiw	r26, 0x08	; 8
    1cea:	2d 91       	ld	r18, X+
    1cec:	3c 91       	ld	r19, X
    1cee:	19 97       	sbiw	r26, 0x09	; 9
    1cf0:	21 50       	subi	r18, 0x01	; 1
    1cf2:	31 09       	sbc	r19, r1
    1cf4:	28 1b       	sub	r18, r24
    1cf6:	39 0b       	sbc	r19, r25
    1cf8:	82 0d       	add	r24, r2
    1cfa:	93 1d       	adc	r25, r3
    1cfc:	ac 01       	movw	r20, r24
    1cfe:	60 e8       	ldi	r22, 0x80	; 128
    1d00:	82 01       	movw	r16, r4
    1d02:	c3 01       	movw	r24, r6
    1d04:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__pad>
    1d08:	9c 01       	movw	r18, r24
    1d0a:	f3 01       	movw	r30, r6
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	90 ff       	sbrs	r25, 0
    1d12:	08 c0       	rjmp	.+16     	; 0x1d24 <__fmt_u+0xa6>
    1d14:	d4 01       	movw	r26, r8
    1d16:	12 96       	adiw	r26, 0x02	; 2
    1d18:	8d 91       	ld	r24, X+
    1d1a:	9c 91       	ld	r25, X
    1d1c:	13 97       	sbiw	r26, 0x03	; 3
    1d1e:	82 17       	cp	r24, r18
    1d20:	93 07       	cpc	r25, r19
    1d22:	0c f4       	brge	.+2      	; 0x1d26 <__fmt_u+0xa8>
    1d24:	c9 01       	movw	r24, r18
    1d26:	22 96       	adiw	r28, 0x02	; 2
    1d28:	e2 e1       	ldi	r30, 0x12	; 18
    1d2a:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__epilogue_restores__>

Disassembly of section .text.__fmt_x:

00000e3a <__fmt_x>:
     e3a:	a4 e1       	ldi	r26, 0x14	; 20
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e3 e2       	ldi	r30, 0x23	; 35
     e40:	f7 e0       	ldi	r31, 0x07	; 7
     e42:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__prologue_saves__>
     e46:	98 87       	std	Y+8, r25	; 0x08
     e48:	8f 83       	std	Y+7, r24	; 0x07
     e4a:	7a 83       	std	Y+2, r23	; 0x02
     e4c:	69 83       	std	Y+1, r22	; 0x01
     e4e:	5c 8b       	std	Y+20, r21	; 0x14
     e50:	4b 8b       	std	Y+19, r20	; 0x13
     e52:	12 2f       	mov	r17, r18
     e54:	db 01       	movw	r26, r22
     e56:	12 96       	adiw	r26, 0x02	; 2
     e58:	ed 91       	ld	r30, X+
     e5a:	fc 91       	ld	r31, X
     e5c:	13 97       	sbiw	r26, 0x03	; 3
     e5e:	14 96       	adiw	r26, 0x04	; 4
     e60:	2d 91       	ld	r18, X+
     e62:	3c 91       	ld	r19, X
     e64:	15 97       	sbiw	r26, 0x05	; 5
     e66:	3e 83       	std	Y+6, r19	; 0x06
     e68:	2d 83       	std	Y+5, r18	; 0x05
     e6a:	ed 90       	ld	r14, X+
     e6c:	fc 90       	ld	r15, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	16 96       	adiw	r26, 0x06	; 6
     e72:	2d 90       	ld	r2, X+
     e74:	3c 90       	ld	r3, X
     e76:	17 97       	sbiw	r26, 0x07	; 7
     e78:	f7 fd       	sbrc	r31, 7
     e7a:	03 c0       	rjmp	.+6      	; 0xe82 <__fmt_x+0x48>
     e7c:	e8 94       	clt
     e7e:	e1 f8       	bld	r14, 1
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <__fmt_x+0x4c>
     e82:	e1 e0       	ldi	r30, 0x01	; 1
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	c7 01       	movw	r24, r14
     e88:	80 71       	andi	r24, 0x10	; 16
     e8a:	99 27       	eor	r25, r25
     e8c:	9a 87       	std	Y+10, r25	; 0x0a
     e8e:	89 87       	std	Y+9, r24	; 0x09
     e90:	e4 fe       	sbrs	r14, 4
     e92:	1f c0       	rjmp	.+62     	; 0xed2 <__fmt_x+0x98>
     e94:	ab 89       	ldd	r26, Y+19	; 0x13
     e96:	bc 89       	ldd	r27, Y+20	; 0x14
     e98:	2c 91       	ld	r18, X
     e9a:	11 96       	adiw	r26, 0x01	; 1
     e9c:	3c 91       	ld	r19, X
     e9e:	11 97       	sbiw	r26, 0x01	; 1
     ea0:	12 96       	adiw	r26, 0x02	; 2
     ea2:	4c 91       	ld	r20, X
     ea4:	12 97       	sbiw	r26, 0x02	; 2
     ea6:	13 96       	adiw	r26, 0x03	; 3
     ea8:	5c 91       	ld	r21, X
     eaa:	13 97       	sbiw	r26, 0x03	; 3
     eac:	14 96       	adiw	r26, 0x04	; 4
     eae:	6c 91       	ld	r22, X
     eb0:	14 97       	sbiw	r26, 0x04	; 4
     eb2:	15 96       	adiw	r26, 0x05	; 5
     eb4:	7c 91       	ld	r23, X
     eb6:	15 97       	sbiw	r26, 0x05	; 5
     eb8:	16 96       	adiw	r26, 0x06	; 6
     eba:	8c 91       	ld	r24, X
     ebc:	16 97       	sbiw	r26, 0x06	; 6
     ebe:	17 96       	adiw	r26, 0x07	; 7
     ec0:	9c 91       	ld	r25, X
     ec2:	a0 e0       	ldi	r26, 0x00	; 0
     ec4:	0e 94 92 13 	call	0x2724	; 0x2724 <__cmpdi2_s8>
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fmt_x+0x98>
     eca:	8d 81       	ldd	r24, Y+5	; 0x05
     ecc:	9e 81       	ldd	r25, Y+6	; 0x06
     ece:	02 97       	sbiw	r24, 0x02	; 2
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <__fmt_x+0x9c>
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	9e 81       	ldd	r25, Y+6	; 0x06
     ed6:	97 01       	movw	r18, r14
     ed8:	28 70       	andi	r18, 0x08	; 8
     eda:	33 27       	eor	r19, r19
     edc:	3c 87       	std	Y+12, r19	; 0x0c
     ede:	2b 87       	std	Y+11, r18	; 0x0b
     ee0:	e3 fc       	sbrc	r14, 3
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	ab 89       	ldd	r26, Y+19	; 0x13
     ee6:	bc 89       	ldd	r27, Y+20	; 0x14
     ee8:	4c 90       	ld	r4, X
     eea:	11 96       	adiw	r26, 0x01	; 1
     eec:	5c 90       	ld	r5, X
     eee:	11 97       	sbiw	r26, 0x01	; 1
     ef0:	12 96       	adiw	r26, 0x02	; 2
     ef2:	6c 90       	ld	r6, X
     ef4:	12 97       	sbiw	r26, 0x02	; 2
     ef6:	13 96       	adiw	r26, 0x03	; 3
     ef8:	7c 90       	ld	r7, X
     efa:	13 97       	sbiw	r26, 0x03	; 3
     efc:	14 96       	adiw	r26, 0x04	; 4
     efe:	8c 90       	ld	r8, X
     f00:	14 97       	sbiw	r26, 0x04	; 4
     f02:	15 96       	adiw	r26, 0x05	; 5
     f04:	9c 90       	ld	r9, X
     f06:	15 97       	sbiw	r26, 0x05	; 5
     f08:	16 96       	adiw	r26, 0x06	; 6
     f0a:	ac 90       	ld	r10, X
     f0c:	16 97       	sbiw	r26, 0x06	; 6
     f0e:	17 96       	adiw	r26, 0x07	; 7
     f10:	bc 90       	ld	r11, X
     f12:	a9 81       	ldd	r26, Y+1	; 0x01
     f14:	ba 81       	ldd	r27, Y+2	; 0x02
     f16:	18 96       	adiw	r26, 0x08	; 8
     f18:	cd 90       	ld	r12, X+
     f1a:	dc 90       	ld	r13, X
     f1c:	19 97       	sbiw	r26, 0x09	; 9
     f1e:	b1 e0       	ldi	r27, 0x01	; 1
     f20:	cb 1a       	sub	r12, r27
     f22:	d1 08       	sbc	r13, r1
     f24:	d1 01       	movw	r26, r2
     f26:	ac 0d       	add	r26, r12
     f28:	bd 1d       	adc	r27, r13
     f2a:	1c 92       	st	X, r1
     f2c:	9c 83       	std	Y+4, r25	; 0x04
     f2e:	8b 83       	std	Y+3, r24	; 0x03
     f30:	9f 01       	movw	r18, r30
     f32:	28 1b       	sub	r18, r24
     f34:	39 0b       	sbc	r19, r25
     f36:	3e 87       	std	Y+14, r19	; 0x0e
     f38:	2d 87       	std	Y+13, r18	; 0x0d
     f3a:	c7 01       	movw	r24, r14
     f3c:	82 70       	andi	r24, 0x02	; 2
     f3e:	99 27       	eor	r25, r25
     f40:	98 8b       	std	Y+16, r25	; 0x10
     f42:	8f 87       	std	Y+15, r24	; 0x0f
     f44:	81 2f       	mov	r24, r17
     f46:	01 2e       	mov	r0, r17
     f48:	00 0c       	add	r0, r0
     f4a:	99 0b       	sbc	r25, r25
     f4c:	dc 01       	movw	r26, r24
     f4e:	a1 54       	subi	r26, 0x41	; 65
     f50:	b1 09       	sbc	r27, r1
     f52:	ba 8b       	std	Y+18, r27	; 0x12
     f54:	a9 8b       	std	Y+17, r26	; 0x11
     f56:	32 e0       	ldi	r19, 0x02	; 2
     f58:	c3 16       	cp	r12, r19
     f5a:	d1 04       	cpc	r13, r1
     f5c:	34 f4       	brge	.+12     	; 0xf6a <__fmt_x+0x130>
     f5e:	89 85       	ldd	r24, Y+9	; 0x09
     f60:	9a 85       	ldd	r25, Y+10	; 0x0a
     f62:	89 2b       	or	r24, r25
     f64:	09 f0       	breq	.+2      	; 0xf68 <__fmt_x+0x12e>
     f66:	4c c0       	rjmp	.+152    	; 0x1000 <__fmt_x+0x1c6>
     f68:	73 c0       	rjmp	.+230    	; 0x1050 <__fmt_x+0x216>
     f6a:	92 01       	movw	r18, r4
     f6c:	a3 01       	movw	r20, r6
     f6e:	b4 01       	movw	r22, r8
     f70:	c5 01       	movw	r24, r10
     f72:	a0 e0       	ldi	r26, 0x00	; 0
     f74:	0e 94 92 13 	call	0x2724	; 0x2724 <__cmpdi2_s8>
     f78:	81 f1       	breq	.+96     	; 0xfda <__fmt_x+0x1a0>
     f7a:	b1 e0       	ldi	r27, 0x01	; 1
     f7c:	cb 1a       	sub	r12, r27
     f7e:	d1 08       	sbc	r13, r1
     f80:	c2 01       	movw	r24, r4
     f82:	8f 70       	andi	r24, 0x0F	; 15
     f84:	99 27       	eor	r25, r25
     f86:	8a 30       	cpi	r24, 0x0A	; 10
     f88:	91 05       	cpc	r25, r1
     f8a:	14 f4       	brge	.+4      	; 0xf90 <__fmt_x+0x156>
     f8c:	c0 96       	adiw	r24, 0x30	; 48
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <__fmt_x+0x15a>
     f90:	89 5a       	subi	r24, 0xA9	; 169
     f92:	9f 4f       	sbci	r25, 0xFF	; 255
     f94:	e9 89       	ldd	r30, Y+17	; 0x11
     f96:	fa 89       	ldd	r31, Y+18	; 0x12
     f98:	7a 97       	sbiw	r30, 0x1a	; 26
     f9a:	48 f4       	brcc	.+18     	; 0xfae <__fmt_x+0x174>
     f9c:	9c 01       	movw	r18, r24
     f9e:	20 62       	ori	r18, 0x20	; 32
     fa0:	21 56       	subi	r18, 0x61	; 97
     fa2:	31 09       	sbc	r19, r1
     fa4:	2a 31       	cpi	r18, 0x1A	; 26
     fa6:	31 05       	cpc	r19, r1
     fa8:	10 f4       	brcc	.+4      	; 0xfae <__fmt_x+0x174>
     faa:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <toupper>
     fae:	f1 01       	movw	r30, r2
     fb0:	ec 0d       	add	r30, r12
     fb2:	fd 1d       	adc	r31, r13
     fb4:	80 83       	st	Z, r24
     fb6:	2b 81       	ldd	r18, Y+3	; 0x03
     fb8:	3c 81       	ldd	r19, Y+4	; 0x04
     fba:	21 50       	subi	r18, 0x01	; 1
     fbc:	31 09       	sbc	r19, r1
     fbe:	3c 83       	std	Y+4, r19	; 0x04
     fc0:	2b 83       	std	Y+3, r18	; 0x03
     fc2:	92 01       	movw	r18, r4
     fc4:	a3 01       	movw	r20, r6
     fc6:	b4 01       	movw	r22, r8
     fc8:	c5 01       	movw	r24, r10
     fca:	04 e0       	ldi	r16, 0x04	; 4
     fcc:	0e 94 45 12 	call	0x248a	; 0x248a <__lshrdi3>
     fd0:	29 01       	movw	r4, r18
     fd2:	3a 01       	movw	r6, r20
     fd4:	4b 01       	movw	r8, r22
     fd6:	5c 01       	movw	r10, r24
     fd8:	be cf       	rjmp	.-132    	; 0xf56 <__fmt_x+0x11c>
     fda:	8d 85       	ldd	r24, Y+13	; 0x0d
     fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fde:	ab 81       	ldd	r26, Y+3	; 0x03
     fe0:	bc 81       	ldd	r27, Y+4	; 0x04
     fe2:	8a 0f       	add	r24, r26
     fe4:	9b 1f       	adc	r25, r27
     fe6:	18 16       	cp	r1, r24
     fe8:	19 06       	cpc	r1, r25
     fea:	3c f2       	brlt	.-114    	; 0xf7a <__fmt_x+0x140>
     fec:	1a 16       	cp	r1, r26
     fee:	1b 06       	cpc	r1, r27
     ff0:	0c f0       	brlt	.+2      	; 0xff4 <__fmt_x+0x1ba>
     ff2:	b5 cf       	rjmp	.-150    	; 0xf5e <__fmt_x+0x124>
     ff4:	ef 85       	ldd	r30, Y+15	; 0x0f
     ff6:	f8 89       	ldd	r31, Y+16	; 0x10
     ff8:	ef 2b       	or	r30, r31
     ffa:	09 f0       	breq	.+2      	; 0xffe <__fmt_x+0x1c4>
     ffc:	be cf       	rjmp	.-132    	; 0xf7a <__fmt_x+0x140>
     ffe:	af cf       	rjmp	.-162    	; 0xf5e <__fmt_x+0x124>
    1000:	ab 89       	ldd	r26, Y+19	; 0x13
    1002:	bc 89       	ldd	r27, Y+20	; 0x14
    1004:	2c 91       	ld	r18, X
    1006:	11 96       	adiw	r26, 0x01	; 1
    1008:	3c 91       	ld	r19, X
    100a:	11 97       	sbiw	r26, 0x01	; 1
    100c:	12 96       	adiw	r26, 0x02	; 2
    100e:	4c 91       	ld	r20, X
    1010:	12 97       	sbiw	r26, 0x02	; 2
    1012:	13 96       	adiw	r26, 0x03	; 3
    1014:	5c 91       	ld	r21, X
    1016:	13 97       	sbiw	r26, 0x03	; 3
    1018:	14 96       	adiw	r26, 0x04	; 4
    101a:	6c 91       	ld	r22, X
    101c:	14 97       	sbiw	r26, 0x04	; 4
    101e:	15 96       	adiw	r26, 0x05	; 5
    1020:	7c 91       	ld	r23, X
    1022:	15 97       	sbiw	r26, 0x05	; 5
    1024:	16 96       	adiw	r26, 0x06	; 6
    1026:	8c 91       	ld	r24, X
    1028:	16 97       	sbiw	r26, 0x06	; 6
    102a:	17 96       	adiw	r26, 0x07	; 7
    102c:	9c 91       	ld	r25, X
    102e:	a0 e0       	ldi	r26, 0x00	; 0
    1030:	0e 94 92 13 	call	0x2724	; 0x2724 <__cmpdi2_s8>
    1034:	69 f0       	breq	.+26     	; 0x1050 <__fmt_x+0x216>
    1036:	f1 01       	movw	r30, r2
    1038:	ec 0d       	add	r30, r12
    103a:	fd 1d       	adc	r31, r13
    103c:	31 97       	sbiw	r30, 0x01	; 1
    103e:	10 83       	st	Z, r17
    1040:	b2 e0       	ldi	r27, 0x02	; 2
    1042:	cb 1a       	sub	r12, r27
    1044:	d1 08       	sbc	r13, r1
    1046:	f1 01       	movw	r30, r2
    1048:	ec 0d       	add	r30, r12
    104a:	fd 1d       	adc	r31, r13
    104c:	80 e3       	ldi	r24, 0x30	; 48
    104e:	80 83       	st	Z, r24
    1050:	eb 85       	ldd	r30, Y+11	; 0x0b
    1052:	fc 85       	ldd	r31, Y+12	; 0x0c
    1054:	ef 2b       	or	r30, r31
    1056:	41 f0       	breq	.+16     	; 0x1068 <__fmt_x+0x22e>
    1058:	f1 e0       	ldi	r31, 0x01	; 1
    105a:	cf 1a       	sub	r12, r31
    105c:	d1 08       	sbc	r13, r1
    105e:	f1 01       	movw	r30, r2
    1060:	ec 0d       	add	r30, r12
    1062:	fd 1d       	adc	r31, r13
    1064:	80 e2       	ldi	r24, 0x20	; 32
    1066:	80 83       	st	Z, r24
    1068:	a9 81       	ldd	r26, Y+1	; 0x01
    106a:	ba 81       	ldd	r27, Y+2	; 0x02
    106c:	18 96       	adiw	r26, 0x08	; 8
    106e:	2d 91       	ld	r18, X+
    1070:	3c 91       	ld	r19, X
    1072:	19 97       	sbiw	r26, 0x09	; 9
    1074:	21 50       	subi	r18, 0x01	; 1
    1076:	31 09       	sbc	r19, r1
    1078:	2c 19       	sub	r18, r12
    107a:	3d 09       	sbc	r19, r13
    107c:	c2 0c       	add	r12, r2
    107e:	d3 1c       	adc	r13, r3
    1080:	a6 01       	movw	r20, r12
    1082:	60 e8       	ldi	r22, 0x80	; 128
    1084:	0d 81       	ldd	r16, Y+5	; 0x05
    1086:	1e 81       	ldd	r17, Y+6	; 0x06
    1088:	8f 81       	ldd	r24, Y+7	; 0x07
    108a:	98 85       	ldd	r25, Y+8	; 0x08
    108c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__pad>
    1090:	9c 01       	movw	r18, r24
    1092:	ef 81       	ldd	r30, Y+7	; 0x07
    1094:	f8 85       	ldd	r31, Y+8	; 0x08
    1096:	80 81       	ld	r24, Z
    1098:	91 81       	ldd	r25, Z+1	; 0x01
    109a:	90 ff       	sbrs	r25, 0
    109c:	09 c0       	rjmp	.+18     	; 0x10b0 <__fmt_x+0x276>
    109e:	a9 81       	ldd	r26, Y+1	; 0x01
    10a0:	ba 81       	ldd	r27, Y+2	; 0x02
    10a2:	12 96       	adiw	r26, 0x02	; 2
    10a4:	8d 91       	ld	r24, X+
    10a6:	9c 91       	ld	r25, X
    10a8:	13 97       	sbiw	r26, 0x03	; 3
    10aa:	82 17       	cp	r24, r18
    10ac:	93 07       	cpc	r25, r19
    10ae:	0c f4       	brge	.+2      	; 0x10b2 <__fmt_x+0x278>
    10b0:	c9 01       	movw	r24, r18
    10b2:	64 96       	adiw	r28, 0x14	; 20
    10b4:	e2 e1       	ldi	r30, 0x12	; 18
    10b6:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__epilogue_restores__>

Disassembly of section .text.__pop_float:

00002446 <__pop_float>:
    2446:	fa 01       	movw	r30, r20
    2448:	60 38       	cpi	r22, 0x80	; 128
    244a:	71 05       	cpc	r23, r1
    244c:	cc f0       	brlt	.+50     	; 0x2480 <__pop_float+0x3a>
    244e:	62 38       	cpi	r22, 0x82	; 130
    2450:	71 05       	cpc	r23, r1
    2452:	1c f0       	brlt	.+6      	; 0x245a <__pop_float+0x14>
    2454:	63 38       	cpi	r22, 0x83	; 131
    2456:	71 05       	cpc	r23, r1
    2458:	99 f4       	brne	.+38     	; 0x2480 <__pop_float+0x3a>
    245a:	a0 81       	ld	r26, Z
    245c:	b1 81       	ldd	r27, Z+1	; 0x01
    245e:	9d 01       	movw	r18, r26
    2460:	2c 5f       	subi	r18, 0xFC	; 252
    2462:	3f 4f       	sbci	r19, 0xFF	; 255
    2464:	31 83       	std	Z+1, r19	; 0x01
    2466:	20 83       	st	Z, r18
    2468:	4d 91       	ld	r20, X+
    246a:	5d 91       	ld	r21, X+
    246c:	6d 91       	ld	r22, X+
    246e:	7c 91       	ld	r23, X
    2470:	fc 01       	movw	r30, r24
    2472:	40 83       	st	Z, r20
    2474:	51 83       	std	Z+1, r21	; 0x01
    2476:	62 83       	std	Z+2, r22	; 0x02
    2478:	73 83       	std	Z+3, r23	; 0x03
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	08 95       	ret
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	08 95       	ret

Disassembly of section .text.__pop_int:

0000163e <__pop_int>:
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	fc 01       	movw	r30, r24
    1648:	d9 01       	movw	r26, r18
    164a:	68 38       	cpi	r22, 0x88	; 136
    164c:	71 05       	cpc	r23, r1
    164e:	31 f1       	breq	.+76     	; 0x169c <__pop_int+0x5e>
    1650:	94 f4       	brge	.+36     	; 0x1676 <__pop_int+0x38>
    1652:	61 38       	cpi	r22, 0x81	; 129
    1654:	71 05       	cpc	r23, r1
    1656:	b1 f1       	breq	.+108    	; 0x16c4 <__pop_int+0x86>
    1658:	2c f4       	brge	.+10     	; 0x1664 <__pop_int+0x26>
    165a:	60 38       	cpi	r22, 0x80	; 128
    165c:	71 05       	cpc	r23, r1
    165e:	09 f4       	brne	.+2      	; 0x1662 <__pop_int+0x24>
    1660:	78 c0       	rjmp	.+240    	; 0x1752 <__pop_int+0x114>
    1662:	9f c0       	rjmp	.+318    	; 0x17a2 <__pop_int+0x164>
    1664:	62 38       	cpi	r22, 0x82	; 130
    1666:	71 05       	cpc	r23, r1
    1668:	09 f4       	brne	.+2      	; 0x166c <__pop_int+0x2e>
    166a:	59 c0       	rjmp	.+178    	; 0x171e <__pop_int+0xe0>
    166c:	64 38       	cpi	r22, 0x84	; 132
    166e:	71 05       	cpc	r23, r1
    1670:	09 f4       	brne	.+2      	; 0x1674 <__pop_int+0x36>
    1672:	6f c0       	rjmp	.+222    	; 0x1752 <__pop_int+0x114>
    1674:	96 c0       	rjmp	.+300    	; 0x17a2 <__pop_int+0x164>
    1676:	60 3a       	cpi	r22, 0xA0	; 160
    1678:	71 05       	cpc	r23, r1
    167a:	09 f4       	brne	.+2      	; 0x167e <__pop_int+0x40>
    167c:	48 c0       	rjmp	.+144    	; 0x170e <__pop_int+0xd0>
    167e:	2c f4       	brge	.+10     	; 0x168a <__pop_int+0x4c>
    1680:	60 39       	cpi	r22, 0x90	; 144
    1682:	71 05       	cpc	r23, r1
    1684:	09 f4       	brne	.+2      	; 0x1688 <__pop_int+0x4a>
    1686:	4b c0       	rjmp	.+150    	; 0x171e <__pop_int+0xe0>
    1688:	8c c0       	rjmp	.+280    	; 0x17a2 <__pop_int+0x164>
    168a:	60 3c       	cpi	r22, 0xC0	; 192
    168c:	71 05       	cpc	r23, r1
    168e:	09 f4       	brne	.+2      	; 0x1692 <__pop_int+0x54>
    1690:	76 c0       	rjmp	.+236    	; 0x177e <__pop_int+0x140>
    1692:	60 3f       	cpi	r22, 0xF0	; 240
    1694:	71 05       	cpc	r23, r1
    1696:	09 f4       	brne	.+2      	; 0x169a <__pop_int+0x5c>
    1698:	72 c0       	rjmp	.+228    	; 0x177e <__pop_int+0x140>
    169a:	83 c0       	rjmp	.+262    	; 0x17a2 <__pop_int+0x164>
    169c:	cd 91       	ld	r28, X+
    169e:	dc 91       	ld	r29, X
    16a0:	11 97       	sbiw	r26, 0x01	; 1
    16a2:	ce 01       	movw	r24, r28
    16a4:	02 96       	adiw	r24, 0x02	; 2
    16a6:	8d 93       	st	X+, r24
    16a8:	9c 93       	st	X, r25
    16aa:	45 2b       	or	r20, r21
    16ac:	39 f0       	breq	.+14     	; 0x16bc <__pop_int+0x7e>
    16ae:	98 81       	ld	r25, Y
    16b0:	89 2f       	mov	r24, r25
    16b2:	88 0f       	add	r24, r24
    16b4:	88 0b       	sbc	r24, r24
    16b6:	90 83       	st	Z, r25
    16b8:	81 83       	std	Z+1, r24	; 0x01
    16ba:	5b c0       	rjmp	.+182    	; 0x1772 <__pop_int+0x134>
    16bc:	88 81       	ld	r24, Y
    16be:	80 83       	st	Z, r24
    16c0:	11 82       	std	Z+1, r1	; 0x01
    16c2:	68 c0       	rjmp	.+208    	; 0x1794 <__pop_int+0x156>
    16c4:	cd 91       	ld	r28, X+
    16c6:	dc 91       	ld	r29, X
    16c8:	11 97       	sbiw	r26, 0x01	; 1
    16ca:	ce 01       	movw	r24, r28
    16cc:	04 96       	adiw	r24, 0x04	; 4
    16ce:	8d 93       	st	X+, r24
    16d0:	9c 93       	st	X, r25
    16d2:	45 2b       	or	r20, r21
    16d4:	99 f0       	breq	.+38     	; 0x16fc <__pop_int+0xbe>
    16d6:	88 81       	ld	r24, Y
    16d8:	99 81       	ldd	r25, Y+1	; 0x01
    16da:	aa 81       	ldd	r26, Y+2	; 0x02
    16dc:	bb 81       	ldd	r27, Y+3	; 0x03
    16de:	ac 01       	movw	r20, r24
    16e0:	bd 01       	movw	r22, r26
    16e2:	77 0f       	add	r23, r23
    16e4:	44 0b       	sbc	r20, r20
    16e6:	54 2f       	mov	r21, r20
    16e8:	ba 01       	movw	r22, r20
    16ea:	80 83       	st	Z, r24
    16ec:	91 83       	std	Z+1, r25	; 0x01
    16ee:	a2 83       	std	Z+2, r26	; 0x02
    16f0:	b3 83       	std	Z+3, r27	; 0x03
    16f2:	44 83       	std	Z+4, r20	; 0x04
    16f4:	45 83       	std	Z+5, r20	; 0x05
    16f6:	46 83       	std	Z+6, r20	; 0x06
    16f8:	47 83       	std	Z+7, r20	; 0x07
    16fa:	28 c0       	rjmp	.+80     	; 0x174c <__pop_int+0x10e>
    16fc:	08 81       	ld	r16, Y
    16fe:	19 81       	ldd	r17, Y+1	; 0x01
    1700:	2a 81       	ldd	r18, Y+2	; 0x02
    1702:	3b 81       	ldd	r19, Y+3	; 0x03
    1704:	00 83       	st	Z, r16
    1706:	11 83       	std	Z+1, r17	; 0x01
    1708:	22 83       	std	Z+2, r18	; 0x02
    170a:	33 83       	std	Z+3, r19	; 0x03
    170c:	45 c0       	rjmp	.+138    	; 0x1798 <__pop_int+0x15a>
    170e:	cd 91       	ld	r28, X+
    1710:	dc 91       	ld	r29, X
    1712:	11 97       	sbiw	r26, 0x01	; 1
    1714:	ce 01       	movw	r24, r28
    1716:	02 96       	adiw	r24, 0x02	; 2
    1718:	8d 93       	st	X+, r24
    171a:	9c 93       	st	X, r25
    171c:	23 c0       	rjmp	.+70     	; 0x1764 <__pop_int+0x126>
    171e:	cd 91       	ld	r28, X+
    1720:	dc 91       	ld	r29, X
    1722:	11 97       	sbiw	r26, 0x01	; 1
    1724:	ce 01       	movw	r24, r28
    1726:	08 96       	adiw	r24, 0x08	; 8
    1728:	8d 93       	st	X+, r24
    172a:	9c 93       	st	X, r25
    172c:	78 81       	ld	r23, Y
    172e:	69 81       	ldd	r22, Y+1	; 0x01
    1730:	5a 81       	ldd	r21, Y+2	; 0x02
    1732:	4b 81       	ldd	r20, Y+3	; 0x03
    1734:	3c 81       	ldd	r19, Y+4	; 0x04
    1736:	2d 81       	ldd	r18, Y+5	; 0x05
    1738:	9e 81       	ldd	r25, Y+6	; 0x06
    173a:	8f 81       	ldd	r24, Y+7	; 0x07
    173c:	70 83       	st	Z, r23
    173e:	61 83       	std	Z+1, r22	; 0x01
    1740:	52 83       	std	Z+2, r21	; 0x02
    1742:	43 83       	std	Z+3, r20	; 0x03
    1744:	34 83       	std	Z+4, r19	; 0x04
    1746:	25 83       	std	Z+5, r18	; 0x05
    1748:	96 83       	std	Z+6, r25	; 0x06
    174a:	87 83       	std	Z+7, r24	; 0x07
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	2a c0       	rjmp	.+84     	; 0x17a6 <__pop_int+0x168>
    1752:	cd 91       	ld	r28, X+
    1754:	dc 91       	ld	r29, X
    1756:	11 97       	sbiw	r26, 0x01	; 1
    1758:	ce 01       	movw	r24, r28
    175a:	02 96       	adiw	r24, 0x02	; 2
    175c:	8d 93       	st	X+, r24
    175e:	9c 93       	st	X, r25
    1760:	45 2b       	or	r20, r21
    1762:	a1 f0       	breq	.+40     	; 0x178c <__pop_int+0x14e>
    1764:	99 81       	ldd	r25, Y+1	; 0x01
    1766:	28 81       	ld	r18, Y
    1768:	89 2f       	mov	r24, r25
    176a:	88 0f       	add	r24, r24
    176c:	88 0b       	sbc	r24, r24
    176e:	20 83       	st	Z, r18
    1770:	91 83       	std	Z+1, r25	; 0x01
    1772:	82 83       	std	Z+2, r24	; 0x02
    1774:	83 83       	std	Z+3, r24	; 0x03
    1776:	84 83       	std	Z+4, r24	; 0x04
    1778:	85 83       	std	Z+5, r24	; 0x05
    177a:	86 83       	std	Z+6, r24	; 0x06
    177c:	e6 cf       	rjmp	.-52     	; 0x174a <__pop_int+0x10c>
    177e:	cd 91       	ld	r28, X+
    1780:	dc 91       	ld	r29, X
    1782:	11 97       	sbiw	r26, 0x01	; 1
    1784:	ce 01       	movw	r24, r28
    1786:	02 96       	adiw	r24, 0x02	; 2
    1788:	8d 93       	st	X+, r24
    178a:	9c 93       	st	X, r25
    178c:	08 81       	ld	r16, Y
    178e:	19 81       	ldd	r17, Y+1	; 0x01
    1790:	00 83       	st	Z, r16
    1792:	11 83       	std	Z+1, r17	; 0x01
    1794:	12 82       	std	Z+2, r1	; 0x02
    1796:	13 82       	std	Z+3, r1	; 0x03
    1798:	14 82       	std	Z+4, r1	; 0x04
    179a:	15 82       	std	Z+5, r1	; 0x05
    179c:	16 82       	std	Z+6, r1	; 0x06
    179e:	17 82       	std	Z+7, r1	; 0x07
    17a0:	d5 cf       	rjmp	.-86     	; 0x174c <__pop_int+0x10e>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	08 95       	ret

Disassembly of section .text.__pop_ptr:

00001a08 <__pop_ptr>:
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	f9 01       	movw	r30, r18
    1a10:	64 38       	cpi	r22, 0x84	; 132
    1a12:	71 05       	cpc	r23, r1
    1a14:	d9 f1       	breq	.+118    	; 0x1a8c <__pop_ptr+0x84>
    1a16:	64 f4       	brge	.+24     	; 0x1a30 <__pop_ptr+0x28>
    1a18:	61 38       	cpi	r22, 0x81	; 129
    1a1a:	71 05       	cpc	r23, r1
    1a1c:	21 f1       	breq	.+72     	; 0x1a66 <__pop_ptr+0x5e>
    1a1e:	62 38       	cpi	r22, 0x82	; 130
    1a20:	71 05       	cpc	r23, r1
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <__pop_ptr+0x1e>
    1a24:	40 c0       	rjmp	.+128    	; 0x1aa6 <__pop_ptr+0x9e>
    1a26:	60 38       	cpi	r22, 0x80	; 128
    1a28:	71 05       	cpc	r23, r1
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <__pop_ptr+0x26>
    1a2c:	54 c0       	rjmp	.+168    	; 0x1ad6 <__pop_ptr+0xce>
    1a2e:	2e c0       	rjmp	.+92     	; 0x1a8c <__pop_ptr+0x84>
    1a30:	60 39       	cpi	r22, 0x90	; 144
    1a32:	71 05       	cpc	r23, r1
    1a34:	c1 f1       	breq	.+112    	; 0x1aa6 <__pop_ptr+0x9e>
    1a36:	84 f4       	brge	.+32     	; 0x1a58 <__pop_ptr+0x50>
    1a38:	68 38       	cpi	r22, 0x88	; 136
    1a3a:	71 05       	cpc	r23, r1
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <__pop_ptr+0x38>
    1a3e:	4b c0       	rjmp	.+150    	; 0x1ad6 <__pop_ptr+0xce>
    1a40:	c0 81       	ld	r28, Z
    1a42:	d1 81       	ldd	r29, Z+1	; 0x01
    1a44:	ce 01       	movw	r24, r28
    1a46:	02 96       	adiw	r24, 0x02	; 2
    1a48:	91 83       	std	Z+1, r25	; 0x01
    1a4a:	80 83       	st	Z, r24
    1a4c:	e8 81       	ld	r30, Y
    1a4e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a50:	ed 93       	st	X+, r30
    1a52:	fc 93       	st	X, r31
    1a54:	40 83       	st	Z, r20
    1a56:	3c c0       	rjmp	.+120    	; 0x1ad0 <__pop_ptr+0xc8>
    1a58:	60 3a       	cpi	r22, 0xA0	; 160
    1a5a:	71 05       	cpc	r23, r1
    1a5c:	b9 f0       	breq	.+46     	; 0x1a8c <__pop_ptr+0x84>
    1a5e:	60 3c       	cpi	r22, 0xC0	; 192
    1a60:	71 05       	cpc	r23, r1
    1a62:	a1 f0       	breq	.+40     	; 0x1a8c <__pop_ptr+0x84>
    1a64:	38 c0       	rjmp	.+112    	; 0x1ad6 <__pop_ptr+0xce>
    1a66:	c0 81       	ld	r28, Z
    1a68:	d1 81       	ldd	r29, Z+1	; 0x01
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	02 96       	adiw	r24, 0x02	; 2
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	80 83       	st	Z, r24
    1a72:	e8 81       	ld	r30, Y
    1a74:	f9 81       	ldd	r31, Y+1	; 0x01
    1a76:	ed 93       	st	X+, r30
    1a78:	fc 93       	st	X, r31
    1a7a:	05 2e       	mov	r0, r21
    1a7c:	00 0c       	add	r0, r0
    1a7e:	66 0b       	sbc	r22, r22
    1a80:	77 0b       	sbc	r23, r23
    1a82:	40 83       	st	Z, r20
    1a84:	51 83       	std	Z+1, r21	; 0x01
    1a86:	62 83       	std	Z+2, r22	; 0x02
    1a88:	73 83       	std	Z+3, r23	; 0x03
    1a8a:	22 c0       	rjmp	.+68     	; 0x1ad0 <__pop_ptr+0xc8>
    1a8c:	c0 81       	ld	r28, Z
    1a8e:	d1 81       	ldd	r29, Z+1	; 0x01
    1a90:	ce 01       	movw	r24, r28
    1a92:	02 96       	adiw	r24, 0x02	; 2
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	80 83       	st	Z, r24
    1a98:	e8 81       	ld	r30, Y
    1a9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a9c:	ed 93       	st	X+, r30
    1a9e:	fc 93       	st	X, r31
    1aa0:	51 83       	std	Z+1, r21	; 0x01
    1aa2:	40 83       	st	Z, r20
    1aa4:	15 c0       	rjmp	.+42     	; 0x1ad0 <__pop_ptr+0xc8>
    1aa6:	c0 81       	ld	r28, Z
    1aa8:	d1 81       	ldd	r29, Z+1	; 0x01
    1aaa:	ce 01       	movw	r24, r28
    1aac:	02 96       	adiw	r24, 0x02	; 2
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	80 83       	st	Z, r24
    1ab2:	e8 81       	ld	r30, Y
    1ab4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ab6:	ed 93       	st	X+, r30
    1ab8:	fc 93       	st	X, r31
    1aba:	51 83       	std	Z+1, r21	; 0x01
    1abc:	40 83       	st	Z, r20
    1abe:	85 2f       	mov	r24, r21
    1ac0:	88 0f       	add	r24, r24
    1ac2:	88 0b       	sbc	r24, r24
    1ac4:	82 83       	std	Z+2, r24	; 0x02
    1ac6:	83 83       	std	Z+3, r24	; 0x03
    1ac8:	84 83       	std	Z+4, r24	; 0x04
    1aca:	85 83       	std	Z+5, r24	; 0x05
    1acc:	86 83       	std	Z+6, r24	; 0x06
    1ace:	87 83       	std	Z+7, r24	; 0x07
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <__pop_ptr+0xd2>
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	08 95       	ret

Disassembly of section .text.atoi:

00001fa4 <atoi>:
    1fa4:	cf 93       	push	r28
    1fa6:	9b 01       	movw	r18, r22
    1fa8:	48 2f       	mov	r20, r24
    1faa:	f9 01       	movw	r30, r18
    1fac:	84 91       	lpm	r24, Z
    1fae:	47 fd       	sbrc	r20, 7
    1fb0:	80 81       	ld	r24, Z
    1fb2:	80 32       	cpi	r24, 0x20	; 32
    1fb4:	c9 f1       	breq	.+114    	; 0x2028 <atoi+0x84>
    1fb6:	68 2f       	mov	r22, r24
    1fb8:	08 2e       	mov	r0, r24
    1fba:	00 0c       	add	r0, r0
    1fbc:	77 0b       	sbc	r23, r23
    1fbe:	69 50       	subi	r22, 0x09	; 9
    1fc0:	71 09       	sbc	r23, r1
    1fc2:	65 30       	cpi	r22, 0x05	; 5
    1fc4:	71 05       	cpc	r23, r1
    1fc6:	80 f1       	brcs	.+96     	; 0x2028 <atoi+0x84>
    1fc8:	8b 32       	cpi	r24, 0x2B	; 43
    1fca:	49 f5       	brne	.+82     	; 0x201e <atoi+0x7a>
    1fcc:	a0 e0       	ldi	r26, 0x00	; 0
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	2f 5f       	subi	r18, 0xFF	; 255
    1fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd4:	4f 4f       	sbci	r20, 0xFF	; 255
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <atoi+0x38>
    1fd8:	a0 e0       	ldi	r26, 0x00	; 0
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	ca e0       	ldi	r28, 0x0A	; 10
    1fe2:	f9 01       	movw	r30, r18
    1fe4:	64 91       	lpm	r22, Z
    1fe6:	47 fd       	sbrc	r20, 7
    1fe8:	60 81       	ld	r22, Z
    1fea:	06 2e       	mov	r0, r22
    1fec:	00 0c       	add	r0, r0
    1fee:	77 0b       	sbc	r23, r23
    1ff0:	60 53       	subi	r22, 0x30	; 48
    1ff2:	71 09       	sbc	r23, r1
    1ff4:	6a 30       	cpi	r22, 0x0A	; 10
    1ff6:	71 05       	cpc	r23, r1
    1ff8:	60 f4       	brcc	.+24     	; 0x2012 <atoi+0x6e>
    1ffa:	c8 9f       	mul	r28, r24
    1ffc:	f0 01       	movw	r30, r0
    1ffe:	c9 9f       	mul	r28, r25
    2000:	f0 0d       	add	r31, r0
    2002:	11 24       	eor	r1, r1
    2004:	2f 5f       	subi	r18, 0xFF	; 255
    2006:	3f 4f       	sbci	r19, 0xFF	; 255
    2008:	4f 4f       	sbci	r20, 0xFF	; 255
    200a:	cf 01       	movw	r24, r30
    200c:	86 1b       	sub	r24, r22
    200e:	97 0b       	sbc	r25, r23
    2010:	e8 cf       	rjmp	.-48     	; 0x1fe2 <atoi+0x3e>
    2012:	ab 2b       	or	r26, r27
    2014:	69 f4       	brne	.+26     	; 0x2030 <atoi+0x8c>
    2016:	91 95       	neg	r25
    2018:	81 95       	neg	r24
    201a:	91 09       	sbc	r25, r1
    201c:	09 c0       	rjmp	.+18     	; 0x2030 <atoi+0x8c>
    201e:	8d 32       	cpi	r24, 0x2D	; 45
    2020:	d9 f6       	brne	.-74     	; 0x1fd8 <atoi+0x34>
    2022:	a1 e0       	ldi	r26, 0x01	; 1
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	d4 cf       	rjmp	.-88     	; 0x1fd0 <atoi+0x2c>
    2028:	2f 5f       	subi	r18, 0xFF	; 255
    202a:	3f 4f       	sbci	r19, 0xFF	; 255
    202c:	4f 4f       	sbci	r20, 0xFF	; 255
    202e:	bd cf       	rjmp	.-134    	; 0x1faa <atoi+0x6>
    2030:	cf 91       	pop	r28
    2032:	08 95       	ret

Disassembly of section .text.memset:

0000278e <memset>:
    278e:	fc 01       	movw	r30, r24
    2790:	48 0f       	add	r20, r24
    2792:	59 1f       	adc	r21, r25
    2794:	e4 17       	cp	r30, r20
    2796:	f5 07       	cpc	r31, r21
    2798:	11 f0       	breq	.+4      	; 0x279e <memset+0x10>
    279a:	61 93       	st	Z+, r22
    279c:	fb cf       	rjmp	.-10     	; 0x2794 <memset+0x6>
    279e:	08 95       	ret

Disassembly of section .text.strcmp:

00002404 <strcmp>:
    2404:	cf 92       	push	r12
    2406:	df 92       	push	r13
    2408:	ef 92       	push	r14
    240a:	6b 01       	movw	r12, r22
    240c:	e8 2e       	mov	r14, r24
    240e:	f6 01       	movw	r30, r12
    2410:	84 91       	lpm	r24, Z
    2412:	e7 fc       	sbrc	r14, 7
    2414:	80 81       	ld	r24, Z
    2416:	f9 01       	movw	r30, r18
    2418:	54 91       	lpm	r21, Z
    241a:	47 fd       	sbrc	r20, 7
    241c:	50 81       	ld	r21, Z
    241e:	85 13       	cpse	r24, r21
    2420:	0b c0       	rjmp	.+22     	; 0x2438 <strcmp+0x34>
    2422:	88 23       	and	r24, r24
    2424:	41 f0       	breq	.+16     	; 0x2436 <strcmp+0x32>
    2426:	8f ef       	ldi	r24, 0xFF	; 255
    2428:	c8 1a       	sub	r12, r24
    242a:	d8 0a       	sbc	r13, r24
    242c:	e8 0a       	sbc	r14, r24
    242e:	2f 5f       	subi	r18, 0xFF	; 255
    2430:	3f 4f       	sbci	r19, 0xFF	; 255
    2432:	4f 4f       	sbci	r20, 0xFF	; 255
    2434:	ec cf       	rjmp	.-40     	; 0x240e <strcmp+0xa>
    2436:	58 2f       	mov	r21, r24
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	85 1b       	sub	r24, r21
    243c:	91 09       	sbc	r25, r1
    243e:	ef 90       	pop	r14
    2440:	df 90       	pop	r13
    2442:	cf 90       	pop	r12
    2444:	08 95       	ret

Disassembly of section .text.strlen:

0000258c <strlen>:
    258c:	cf 92       	push	r12
    258e:	df 92       	push	r13
    2590:	ef 92       	push	r14
    2592:	6b 01       	movw	r12, r22
    2594:	e8 2e       	mov	r14, r24
    2596:	a8 2f       	mov	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	fc 01       	movw	r30, r24
    259c:	24 91       	lpm	r18, Z
    259e:	a7 fd       	sbrc	r26, 7
    25a0:	20 81       	ld	r18, Z
    25a2:	22 23       	and	r18, r18
    25a4:	19 f0       	breq	.+6      	; 0x25ac <strlen+0x20>
    25a6:	01 96       	adiw	r24, 0x01	; 1
    25a8:	a1 1d       	adc	r26, r1
    25aa:	f7 cf       	rjmp	.-18     	; 0x259a <strlen+0xe>
    25ac:	8c 19       	sub	r24, r12
    25ae:	9d 09       	sbc	r25, r13
    25b0:	ef 90       	pop	r14
    25b2:	df 90       	pop	r13
    25b4:	cf 90       	pop	r12
    25b6:	08 95       	ret

Disassembly of section .text.tolower:

000027c2 <tolower>:
    27c2:	9c 01       	movw	r18, r24
    27c4:	21 54       	subi	r18, 0x41	; 65
    27c6:	31 09       	sbc	r19, r1
    27c8:	2a 31       	cpi	r18, 0x1A	; 26
    27ca:	31 05       	cpc	r19, r1
    27cc:	08 f4       	brcc	.+2      	; 0x27d0 <tolower+0xe>
    27ce:	80 62       	ori	r24, 0x20	; 32
    27d0:	08 95       	ret

Disassembly of section .text.toupper:

000027a0 <toupper>:
    27a0:	9c 01       	movw	r18, r24
    27a2:	21 56       	subi	r18, 0x61	; 97
    27a4:	31 09       	sbc	r19, r1
    27a6:	2a 31       	cpi	r18, 0x1A	; 26
    27a8:	31 05       	cpc	r19, r1
    27aa:	10 f4       	brcc	.+4      	; 0x27b0 <toupper+0x10>
    27ac:	8f 75       	andi	r24, 0x5F	; 95
    27ae:	99 27       	eor	r25, r25
    27b0:	08 95       	ret

Disassembly of section .text._Exit:

000027ea <_Exit>:
    27ea:	0e 94 65 00 	call	0xca	; 0xca <_exit>

Disassembly of section .text.__vsprintf:

0000270c <__vsprintf>:
    270c:	0f 93       	push	r16
    270e:	1f 93       	push	r17
    2710:	89 01       	movw	r16, r18
    2712:	9a 01       	movw	r18, r20
    2714:	46 2f       	mov	r20, r22
    2716:	6f ef       	ldi	r22, 0xFF	; 255
    2718:	7f e7       	ldi	r23, 0x7F	; 127
    271a:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__vsnprintf>
    271e:	1f 91       	pop	r17
    2720:	0f 91       	pop	r16
    2722:	08 95       	ret

Disassembly of section .text.__vsnprintf:

00001d2e <__vsnprintf>:
    1d2e:	6f 92       	push	r6
    1d30:	7f 92       	push	r7
    1d32:	8f 92       	push	r8
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	61 97       	sbiw	r28, 0x11	; 17
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	fe 01       	movw	r30, r28
    1d52:	31 96       	adiw	r30, 0x01	; 1
    1d54:	51 e1       	ldi	r21, 0x11	; 17
    1d56:	df 01       	movw	r26, r30
    1d58:	1d 92       	st	X+, r1
    1d5a:	5a 95       	dec	r21
    1d5c:	e9 f7       	brne	.-6      	; 0x1d58 <__vsnprintf+0x2a>
    1d5e:	a2 e0       	ldi	r26, 0x02	; 2
    1d60:	b1 e0       	ldi	r27, 0x01	; 1
    1d62:	ba 83       	std	Y+2, r27	; 0x02
    1d64:	a9 83       	std	Y+1, r26	; 0x01
    1d66:	9c 83       	std	Y+4, r25	; 0x04
    1d68:	8b 83       	std	Y+3, r24	; 0x03
    1d6a:	77 ff       	sbrs	r23, 7
    1d6c:	09 c0       	rjmp	.+18     	; 0x1d80 <__vsnprintf+0x52>
    1d6e:	8f e4       	ldi	r24, 0x4F	; 79
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <__errno_val+0x1>
    1d76:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <__errno_val>
    1d7a:	8f ef       	ldi	r24, 0xFF	; 255
    1d7c:	9f ef       	ldi	r25, 0xFF	; 255
    1d7e:	19 c0       	rjmp	.+50     	; 0x1db2 <__vsnprintf+0x84>
    1d80:	39 01       	movw	r6, r18
    1d82:	84 2e       	mov	r8, r20
    1d84:	7c 01       	movw	r14, r24
    1d86:	61 50       	subi	r22, 0x01	; 1
    1d88:	71 09       	sbc	r23, r1
    1d8a:	7f 83       	std	Y+7, r23	; 0x07
    1d8c:	6e 83       	std	Y+6, r22	; 0x06
    1d8e:	98 01       	movw	r18, r16
    1d90:	68 2d       	mov	r22, r8
    1d92:	a3 01       	movw	r20, r6
    1d94:	cf 01       	movw	r24, r30
    1d96:	0e 94 98 12 	call	0x2530	; 0x2530 <__vfprintf>
    1d9a:	48 85       	ldd	r20, Y+8	; 0x08
    1d9c:	59 85       	ldd	r21, Y+9	; 0x09
    1d9e:	2e 81       	ldd	r18, Y+6	; 0x06
    1da0:	3f 81       	ldd	r19, Y+7	; 0x07
    1da2:	42 17       	cp	r20, r18
    1da4:	53 07       	cpc	r21, r19
    1da6:	08 f4       	brcc	.+2      	; 0x1daa <__vsnprintf+0x7c>
    1da8:	9a 01       	movw	r18, r20
    1daa:	f7 01       	movw	r30, r14
    1dac:	e2 0f       	add	r30, r18
    1dae:	f3 1f       	adc	r31, r19
    1db0:	10 82       	st	Z, r1
    1db2:	61 96       	adiw	r28, 0x11	; 17
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	ff 90       	pop	r15
    1dc8:	ef 90       	pop	r14
    1dca:	8f 90       	pop	r8
    1dcc:	7f 90       	pop	r7
    1dce:	6f 90       	pop	r6
    1dd0:	08 95       	ret

Disassembly of section .text.__vfprintf:

00002530 <__vfprintf>:
    2530:	a2 e0       	ldi	r26, 0x02	; 2
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	ee e9       	ldi	r30, 0x9E	; 158
    2536:	f2 e1       	ldi	r31, 0x12	; 18
    2538:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__prologue_saves__+0x1c>
    253c:	8c 01       	movw	r16, r24
    253e:	3a 83       	std	Y+2, r19	; 0x02
    2540:	29 83       	std	Y+1, r18	; 0x01
    2542:	9e 01       	movw	r18, r28
    2544:	2f 5f       	subi	r18, 0xFF	; 255
    2546:	3f 4f       	sbci	r19, 0xFF	; 255
    2548:	0e 94 93 01 	call	0x326	; 0x326 <__printf_core>
    254c:	f8 01       	movw	r30, r16
    254e:	20 81       	ld	r18, Z
    2550:	24 ff       	sbrs	r18, 4
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <__vfprintf+0x28>
    2554:	8f ef       	ldi	r24, 0xFF	; 255
    2556:	9f ef       	ldi	r25, 0xFF	; 255
    2558:	22 96       	adiw	r28, 0x02	; 2
    255a:	e4 e0       	ldi	r30, 0x04	; 4
    255c:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__epilogue_restores__+0x1c>

Disassembly of section .text.libgcc.div:

000026a6 <__umoddi3>:
    26a6:	68 94       	set
    26a8:	01 c0       	rjmp	.+2      	; 0x26ac <__udivdi3_umoddi3>

000026aa <__udivdi3>:
    26aa:	e8 94       	clt

000026ac <__udivdi3_umoddi3>:
    26ac:	8f 92       	push	r8
    26ae:	9f 92       	push	r9
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__udivmod64>
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	9f 90       	pop	r9
    26be:	8f 90       	pop	r8
    26c0:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001dd2 <__udivmod64>:
    1dd2:	88 24       	eor	r8, r8
    1dd4:	99 24       	eor	r9, r9
    1dd6:	f4 01       	movw	r30, r8
    1dd8:	e4 01       	movw	r28, r8
    1dda:	b0 e4       	ldi	r27, 0x40	; 64
    1ddc:	9f 93       	push	r25
    1dde:	aa 27       	eor	r26, r26
    1de0:	9a 15       	cp	r25, r10
    1de2:	8b 04       	cpc	r8, r11
    1de4:	9c 04       	cpc	r9, r12
    1de6:	ed 05       	cpc	r30, r13
    1de8:	fe 05       	cpc	r31, r14
    1dea:	cf 05       	cpc	r28, r15
    1dec:	d0 07       	cpc	r29, r16
    1dee:	a1 07       	cpc	r26, r17
    1df0:	98 f4       	brcc	.+38     	; 0x1e18 <__udivmod64+0x46>
    1df2:	ad 2f       	mov	r26, r29
    1df4:	dc 2f       	mov	r29, r28
    1df6:	cf 2f       	mov	r28, r31
    1df8:	fe 2f       	mov	r31, r30
    1dfa:	e9 2d       	mov	r30, r9
    1dfc:	98 2c       	mov	r9, r8
    1dfe:	89 2e       	mov	r8, r25
    1e00:	98 2f       	mov	r25, r24
    1e02:	87 2f       	mov	r24, r23
    1e04:	76 2f       	mov	r23, r22
    1e06:	65 2f       	mov	r22, r21
    1e08:	54 2f       	mov	r21, r20
    1e0a:	43 2f       	mov	r20, r19
    1e0c:	32 2f       	mov	r19, r18
    1e0e:	22 27       	eor	r18, r18
    1e10:	b8 50       	subi	r27, 0x08	; 8
    1e12:	31 f7       	brne	.-52     	; 0x1de0 <__udivmod64+0xe>
    1e14:	bf 91       	pop	r27
    1e16:	27 c0       	rjmp	.+78     	; 0x1e66 <__udivmod64+0x94>
    1e18:	1b 2e       	mov	r1, r27
    1e1a:	bf 91       	pop	r27
    1e1c:	bb 27       	eor	r27, r27
    1e1e:	22 0f       	add	r18, r18
    1e20:	33 1f       	adc	r19, r19
    1e22:	44 1f       	adc	r20, r20
    1e24:	55 1f       	adc	r21, r21
    1e26:	66 1f       	adc	r22, r22
    1e28:	77 1f       	adc	r23, r23
    1e2a:	88 1f       	adc	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	88 1c       	adc	r8, r8
    1e30:	99 1c       	adc	r9, r9
    1e32:	ee 1f       	adc	r30, r30
    1e34:	ff 1f       	adc	r31, r31
    1e36:	cc 1f       	adc	r28, r28
    1e38:	dd 1f       	adc	r29, r29
    1e3a:	aa 1f       	adc	r26, r26
    1e3c:	bb 1f       	adc	r27, r27
    1e3e:	8a 14       	cp	r8, r10
    1e40:	9b 04       	cpc	r9, r11
    1e42:	ec 05       	cpc	r30, r12
    1e44:	fd 05       	cpc	r31, r13
    1e46:	ce 05       	cpc	r28, r14
    1e48:	df 05       	cpc	r29, r15
    1e4a:	a0 07       	cpc	r26, r16
    1e4c:	b1 07       	cpc	r27, r17
    1e4e:	48 f0       	brcs	.+18     	; 0x1e62 <__udivmod64+0x90>
    1e50:	8a 18       	sub	r8, r10
    1e52:	9b 08       	sbc	r9, r11
    1e54:	ec 09       	sbc	r30, r12
    1e56:	fd 09       	sbc	r31, r13
    1e58:	ce 09       	sbc	r28, r14
    1e5a:	df 09       	sbc	r29, r15
    1e5c:	a0 0b       	sbc	r26, r16
    1e5e:	b1 0b       	sbc	r27, r17
    1e60:	21 60       	ori	r18, 0x01	; 1
    1e62:	1a 94       	dec	r1
    1e64:	e1 f6       	brne	.-72     	; 0x1e1e <__udivmod64+0x4c>
    1e66:	2e f4       	brtc	.+10     	; 0x1e72 <__udivmod64+0xa0>
    1e68:	94 01       	movw	r18, r8
    1e6a:	af 01       	movw	r20, r30
    1e6c:	be 01       	movw	r22, r28
    1e6e:	cd 01       	movw	r24, r26
    1e70:	00 0c       	add	r0, r0
    1e72:	08 95       	ret

Disassembly of section .text.libgcc:

0000264c <__negdi2>:
    264c:	60 95       	com	r22
    264e:	70 95       	com	r23
    2650:	80 95       	com	r24
    2652:	90 95       	com	r25
    2654:	30 95       	com	r19
    2656:	40 95       	com	r20
    2658:	50 95       	com	r21
    265a:	21 95       	neg	r18
    265c:	3f 4f       	sbci	r19, 0xFF	; 255
    265e:	4f 4f       	sbci	r20, 0xFF	; 255
    2660:	5f 4f       	sbci	r21, 0xFF	; 255
    2662:	6f 4f       	sbci	r22, 0xFF	; 255
    2664:	7f 4f       	sbci	r23, 0xFF	; 255
    2666:	8f 4f       	sbci	r24, 0xFF	; 255
    2668:	9f 4f       	sbci	r25, 0xFF	; 255
    266a:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000024c2 <__prologue_saves__>:
    24c2:	2f 92       	push	r2
    24c4:	3f 92       	push	r3
    24c6:	4f 92       	push	r4
    24c8:	5f 92       	push	r5
    24ca:	6f 92       	push	r6
    24cc:	7f 92       	push	r7
    24ce:	8f 92       	push	r8
    24d0:	9f 92       	push	r9
    24d2:	af 92       	push	r10
    24d4:	bf 92       	push	r11
    24d6:	cf 92       	push	r12
    24d8:	df 92       	push	r13
    24da:	ef 92       	push	r14
    24dc:	ff 92       	push	r15
    24de:	0f 93       	push	r16
    24e0:	1f 93       	push	r17
    24e2:	cf 93       	push	r28
    24e4:	df 93       	push	r29
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	ca 1b       	sub	r28, r26
    24ec:	db 0b       	sbc	r29, r27
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000024fa <__epilogue_restores__>:
    24fa:	2a 88       	ldd	r2, Y+18	; 0x12
    24fc:	39 88       	ldd	r3, Y+17	; 0x11
    24fe:	48 88       	ldd	r4, Y+16	; 0x10
    2500:	5f 84       	ldd	r5, Y+15	; 0x0f
    2502:	6e 84       	ldd	r6, Y+14	; 0x0e
    2504:	7d 84       	ldd	r7, Y+13	; 0x0d
    2506:	8c 84       	ldd	r8, Y+12	; 0x0c
    2508:	9b 84       	ldd	r9, Y+11	; 0x0b
    250a:	aa 84       	ldd	r10, Y+10	; 0x0a
    250c:	b9 84       	ldd	r11, Y+9	; 0x09
    250e:	c8 84       	ldd	r12, Y+8	; 0x08
    2510:	df 80       	ldd	r13, Y+7	; 0x07
    2512:	ee 80       	ldd	r14, Y+6	; 0x06
    2514:	fd 80       	ldd	r15, Y+5	; 0x05
    2516:	0c 81       	ldd	r16, Y+4	; 0x04
    2518:	1b 81       	ldd	r17, Y+3	; 0x03
    251a:	aa 81       	ldd	r26, Y+2	; 0x02
    251c:	b9 81       	ldd	r27, Y+1	; 0x01
    251e:	ce 0f       	add	r28, r30
    2520:	d1 1d       	adc	r29, r1
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	ed 01       	movw	r28, r26
    252e:	08 95       	ret

Disassembly of section .text.libgcc.builtins:

00002486 <__ashrdi3>:
    2486:	97 fb       	bst	r25, 7
    2488:	10 f8       	bld	r1, 0

0000248a <__lshrdi3>:
    248a:	16 94       	lsr	r1
    248c:	00 08       	sbc	r0, r0
    248e:	0f 93       	push	r16
    2490:	08 30       	cpi	r16, 0x08	; 8
    2492:	98 f0       	brcs	.+38     	; 0x24ba <__lshrdi3+0x30>
    2494:	08 50       	subi	r16, 0x08	; 8
    2496:	23 2f       	mov	r18, r19
    2498:	34 2f       	mov	r19, r20
    249a:	45 2f       	mov	r20, r21
    249c:	56 2f       	mov	r21, r22
    249e:	67 2f       	mov	r22, r23
    24a0:	78 2f       	mov	r23, r24
    24a2:	89 2f       	mov	r24, r25
    24a4:	90 2d       	mov	r25, r0
    24a6:	f4 cf       	rjmp	.-24     	; 0x2490 <__lshrdi3+0x6>
    24a8:	05 94       	asr	r0
    24aa:	97 95       	ror	r25
    24ac:	87 95       	ror	r24
    24ae:	77 95       	ror	r23
    24b0:	67 95       	ror	r22
    24b2:	57 95       	ror	r21
    24b4:	47 95       	ror	r20
    24b6:	37 95       	ror	r19
    24b8:	27 95       	ror	r18
    24ba:	0a 95       	dec	r16
    24bc:	aa f7       	brpl	.-22     	; 0x24a8 <__lshrdi3+0x1e>
    24be:	0f 91       	pop	r16
    24c0:	08 95       	ret

Disassembly of section .text.libgcc:

00002724 <__cmpdi2_s8>:
    2724:	00 24       	eor	r0, r0
    2726:	a7 fd       	sbrc	r26, 7
    2728:	00 94       	com	r0
    272a:	2a 17       	cp	r18, r26
    272c:	30 05       	cpc	r19, r0
    272e:	40 05       	cpc	r20, r0
    2730:	50 05       	cpc	r21, r0
    2732:	60 05       	cpc	r22, r0
    2734:	70 05       	cpc	r23, r0
    2736:	80 05       	cpc	r24, r0
    2738:	90 05       	cpc	r25, r0
    273a:	08 95       	ret
