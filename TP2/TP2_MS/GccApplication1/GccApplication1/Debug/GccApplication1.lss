
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800100  000011de  00001272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800224  00800224  00001396  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001396  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c57  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd3  00000000  00000000  00003203  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000101d  00000000  00000000  00003ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00004ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006af  00000000  00000000  00005268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001238  00000000  00000000  00005917  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006b4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
       4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
       8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
       c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      38:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_14>
      3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
      68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d8 e0       	ldi	r29, 0x08	; 8
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	12 e0       	ldi	r17, 0x02	; 2
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	ee ed       	ldi	r30, 0xDE	; 222
      bc:	f1 e1       	ldi	r31, 0x11	; 17
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
      c0:	05 90       	lpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a4 32       	cpi	r26, 0x24	; 36
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
      ca:	22 e0       	ldi	r18, 0x02	; 2
      cc:	a4 e2       	ldi	r26, 0x24	; 36
      ce:	b2 e0       	ldi	r27, 0x02	; 2
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	ac 33       	cpi	r26, 0x3C	; 60
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	0e 94 f6 04 	call	0x9ec	; 0x9ec <main>
      de:	0c 94 ed 08 	jmp	0x11da	; 0x11da <_exit>

000000e2 <__bad_interrupt>:
      e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <timer0_init>:
#include "mef.h"

void timer0_init()
{
    // Configurar Timer0 para interrupciones periodicas cada 10 ms
    TCCR0A = (1 << WGM01);              // Modo CTC
      e6:	82 e0       	ldi	r24, 0x02	; 2
      e8:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1 << CS02) | (1 << CS00); // Prescaler 1024
      ea:	85 e0       	ldi	r24, 0x05	; 5
      ec:	85 bd       	out	0x25, r24	; 37
    OCR0A = 155;                        // Para 10 ms con 16MHz y prescaler 1024
      ee:	8b e9       	ldi	r24, 0x9B	; 155
      f0:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A);            // Habilitar interrupcion de comparacion
      f2:	ee e6       	ldi	r30, 0x6E	; 110
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	80 81       	ld	r24, Z
      f8:	82 60       	ori	r24, 0x02	; 2
      fa:	80 83       	st	Z, r24
    sei();								// Habilitar interrupciones globales
      fc:	78 94       	sei
      fe:	08 95       	ret

00000100 <__vector_14>:
}

// interrupcion de Timer0, se ejecuta cada 10 ms
ISR(TIMER0_COMPA_vect)
{
     100:	1f 92       	push	r1
     102:	0f 92       	push	r0
     104:	0f b6       	in	r0, 0x3f	; 63
     106:	0f 92       	push	r0
     108:	11 24       	eor	r1, r1
     10a:	8f 93       	push	r24
	tick++;
     10c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
     110:	8f 5f       	subi	r24, 0xFF	; 255
     112:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__data_end>
	flag = 1;
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <flag>
	if (tick == 100)
     11c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
     120:	84 36       	cpi	r24, 0x64	; 100
     122:	39 f4       	brne	.+14     	; 0x132 <__vector_14+0x32>
	{
		tick = 0;
     124:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <__data_end>
		seg++;
     128:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <seg>
     12c:	8f 5f       	subi	r24, 0xFF	; 255
     12e:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <seg>
	}
     132:	8f 91       	pop	r24
     134:	0f 90       	pop	r0
     136:	0f be       	out	0x3f, r0	; 63
     138:	0f 90       	pop	r0
     13a:	1f 90       	pop	r1
     13c:	18 95       	reti

0000013e <LCDsendChar>:
		}

		// write character to display
		LCDsendChar(c);
	}
}
     13e:	65 b1       	in	r22, 0x05	; 5
     140:	98 2f       	mov	r25, r24
     142:	90 74       	andi	r25, 0x40	; 64
     144:	49 2f       	mov	r20, r25
     146:	50 e0       	ldi	r21, 0x00	; 0
     148:	55 95       	asr	r21
     14a:	47 95       	ror	r20
     14c:	55 95       	asr	r21
     14e:	47 95       	ror	r20
     150:	55 95       	asr	r21
     152:	47 95       	ror	r20
     154:	55 95       	asr	r21
     156:	47 95       	ror	r20
     158:	98 2f       	mov	r25, r24
     15a:	90 78       	andi	r25, 0x80	; 128
     15c:	29 2f       	mov	r18, r25
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	02 2e       	mov	r0, r18
     162:	23 2f       	mov	r18, r19
     164:	00 0c       	add	r0, r0
     166:	22 1f       	adc	r18, r18
     168:	33 0b       	sbc	r19, r19
     16a:	00 0c       	add	r0, r0
     16c:	22 1f       	adc	r18, r18
     16e:	33 1f       	adc	r19, r19
     170:	96 2f       	mov	r25, r22
     172:	99 7f       	andi	r25, 0xF9	; 249
     174:	49 2b       	or	r20, r25
     176:	24 2b       	or	r18, r20
     178:	25 b9       	out	0x05, r18	; 5
     17a:	68 b1       	in	r22, 0x08	; 8
     17c:	98 2f       	mov	r25, r24
     17e:	90 71       	andi	r25, 0x10	; 16
     180:	49 2f       	mov	r20, r25
     182:	50 e0       	ldi	r21, 0x00	; 0
     184:	55 95       	asr	r21
     186:	47 95       	ror	r20
     188:	55 95       	asr	r21
     18a:	47 95       	ror	r20
     18c:	55 95       	asr	r21
     18e:	47 95       	ror	r20
     190:	98 2f       	mov	r25, r24
     192:	90 72       	andi	r25, 0x20	; 32
     194:	29 2f       	mov	r18, r25
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	35 95       	asr	r19
     19a:	27 95       	ror	r18
     19c:	35 95       	asr	r19
     19e:	27 95       	ror	r18
     1a0:	35 95       	asr	r19
     1a2:	27 95       	ror	r18
     1a4:	96 2f       	mov	r25, r22
     1a6:	99 7f       	andi	r25, 0xF9	; 249
     1a8:	49 2b       	or	r20, r25
     1aa:	24 2b       	or	r18, r20
     1ac:	28 b9       	out	0x08, r18	; 8
     1ae:	9b b1       	in	r25, 0x0b	; 11
     1b0:	92 60       	ori	r25, 0x02	; 2
     1b2:	9b b9       	out	0x0b, r25	; 11
     1b4:	9b b1       	in	r25, 0x0b	; 11
     1b6:	91 60       	ori	r25, 0x01	; 1
     1b8:	9b b9       	out	0x0b, r25	; 11
     1ba:	25 ed       	ldi	r18, 0xD5	; 213
     1bc:	2a 95       	dec	r18
     1be:	f1 f7       	brne	.-4      	; 0x1bc <LCDsendChar+0x7e>
     1c0:	00 00       	nop
     1c2:	9b b1       	in	r25, 0x0b	; 11
     1c4:	9e 7f       	andi	r25, 0xFE	; 254
     1c6:	9b b9       	out	0x0b, r25	; 11
     1c8:	9b b1       	in	r25, 0x0b	; 11
     1ca:	9d 7f       	andi	r25, 0xFD	; 253
     1cc:	9b b9       	out	0x0b, r25	; 11
     1ce:	95 ed       	ldi	r25, 0xD5	; 213
     1d0:	9a 95       	dec	r25
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCDsendChar+0x92>
     1d4:	00 00       	nop
     1d6:	65 b1       	in	r22, 0x05	; 5
     1d8:	20 e1       	ldi	r18, 0x10	; 16
     1da:	82 9f       	mul	r24, r18
     1dc:	c0 01       	movw	r24, r0
     1de:	11 24       	eor	r1, r1
     1e0:	ac 01       	movw	r20, r24
     1e2:	40 74       	andi	r20, 0x40	; 64
     1e4:	55 27       	eor	r21, r21
     1e6:	55 95       	asr	r21
     1e8:	47 95       	ror	r20
     1ea:	55 95       	asr	r21
     1ec:	47 95       	ror	r20
     1ee:	55 95       	asr	r21
     1f0:	47 95       	ror	r20
     1f2:	55 95       	asr	r21
     1f4:	47 95       	ror	r20
     1f6:	9c 01       	movw	r18, r24
     1f8:	20 78       	andi	r18, 0x80	; 128
     1fa:	33 27       	eor	r19, r19
     1fc:	02 2e       	mov	r0, r18
     1fe:	23 2f       	mov	r18, r19
     200:	00 0c       	add	r0, r0
     202:	22 1f       	adc	r18, r18
     204:	33 0b       	sbc	r19, r19
     206:	00 0c       	add	r0, r0
     208:	22 1f       	adc	r18, r18
     20a:	33 1f       	adc	r19, r19
     20c:	36 2f       	mov	r19, r22
     20e:	39 7f       	andi	r19, 0xF9	; 249
     210:	43 2b       	or	r20, r19
     212:	24 2b       	or	r18, r20
     214:	25 b9       	out	0x05, r18	; 5
     216:	48 b1       	in	r20, 0x08	; 8
     218:	9c 01       	movw	r18, r24
     21a:	20 71       	andi	r18, 0x10	; 16
     21c:	33 27       	eor	r19, r19
     21e:	35 95       	asr	r19
     220:	27 95       	ror	r18
     222:	35 95       	asr	r19
     224:	27 95       	ror	r18
     226:	35 95       	asr	r19
     228:	27 95       	ror	r18
     22a:	80 72       	andi	r24, 0x20	; 32
     22c:	99 27       	eor	r25, r25
     22e:	95 95       	asr	r25
     230:	87 95       	ror	r24
     232:	95 95       	asr	r25
     234:	87 95       	ror	r24
     236:	95 95       	asr	r25
     238:	87 95       	ror	r24
     23a:	94 2f       	mov	r25, r20
     23c:	99 7f       	andi	r25, 0xF9	; 249
     23e:	29 2b       	or	r18, r25
     240:	82 2b       	or	r24, r18
     242:	88 b9       	out	0x08, r24	; 8
     244:	8b b1       	in	r24, 0x0b	; 11
     246:	82 60       	ori	r24, 0x02	; 2
     248:	8b b9       	out	0x0b, r24	; 11
     24a:	8b b1       	in	r24, 0x0b	; 11
     24c:	81 60       	ori	r24, 0x01	; 1
     24e:	8b b9       	out	0x0b, r24	; 11
     250:	85 ed       	ldi	r24, 0xD5	; 213
     252:	8a 95       	dec	r24
     254:	f1 f7       	brne	.-4      	; 0x252 <LCDsendChar+0x114>
     256:	00 00       	nop
     258:	8b b1       	in	r24, 0x0b	; 11
     25a:	8e 7f       	andi	r24, 0xFE	; 254
     25c:	8b b9       	out	0x0b, r24	; 11
     25e:	8b b1       	in	r24, 0x0b	; 11
     260:	8d 7f       	andi	r24, 0xFD	; 253
     262:	8b b9       	out	0x0b, r24	; 11
     264:	95 ed       	ldi	r25, 0xD5	; 213
     266:	9a 95       	dec	r25
     268:	f1 f7       	brne	.-4      	; 0x266 <LCDsendChar+0x128>
     26a:	00 00       	nop
     26c:	08 95       	ret

0000026e <LCDsendCommand>:
     26e:	65 b1       	in	r22, 0x05	; 5
     270:	98 2f       	mov	r25, r24
     272:	90 74       	andi	r25, 0x40	; 64
     274:	49 2f       	mov	r20, r25
     276:	50 e0       	ldi	r21, 0x00	; 0
     278:	55 95       	asr	r21
     27a:	47 95       	ror	r20
     27c:	55 95       	asr	r21
     27e:	47 95       	ror	r20
     280:	55 95       	asr	r21
     282:	47 95       	ror	r20
     284:	55 95       	asr	r21
     286:	47 95       	ror	r20
     288:	98 2f       	mov	r25, r24
     28a:	90 78       	andi	r25, 0x80	; 128
     28c:	29 2f       	mov	r18, r25
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	02 2e       	mov	r0, r18
     292:	23 2f       	mov	r18, r19
     294:	00 0c       	add	r0, r0
     296:	22 1f       	adc	r18, r18
     298:	33 0b       	sbc	r19, r19
     29a:	00 0c       	add	r0, r0
     29c:	22 1f       	adc	r18, r18
     29e:	33 1f       	adc	r19, r19
     2a0:	96 2f       	mov	r25, r22
     2a2:	99 7f       	andi	r25, 0xF9	; 249
     2a4:	49 2b       	or	r20, r25
     2a6:	24 2b       	or	r18, r20
     2a8:	25 b9       	out	0x05, r18	; 5
     2aa:	68 b1       	in	r22, 0x08	; 8
     2ac:	98 2f       	mov	r25, r24
     2ae:	90 71       	andi	r25, 0x10	; 16
     2b0:	49 2f       	mov	r20, r25
     2b2:	50 e0       	ldi	r21, 0x00	; 0
     2b4:	55 95       	asr	r21
     2b6:	47 95       	ror	r20
     2b8:	55 95       	asr	r21
     2ba:	47 95       	ror	r20
     2bc:	55 95       	asr	r21
     2be:	47 95       	ror	r20
     2c0:	98 2f       	mov	r25, r24
     2c2:	90 72       	andi	r25, 0x20	; 32
     2c4:	29 2f       	mov	r18, r25
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	35 95       	asr	r19
     2ca:	27 95       	ror	r18
     2cc:	35 95       	asr	r19
     2ce:	27 95       	ror	r18
     2d0:	35 95       	asr	r19
     2d2:	27 95       	ror	r18
     2d4:	96 2f       	mov	r25, r22
     2d6:	99 7f       	andi	r25, 0xF9	; 249
     2d8:	49 2b       	or	r20, r25
     2da:	24 2b       	or	r18, r20
     2dc:	28 b9       	out	0x08, r18	; 8
     2de:	9b b1       	in	r25, 0x0b	; 11
     2e0:	91 60       	ori	r25, 0x01	; 1
     2e2:	9b b9       	out	0x0b, r25	; 11
     2e4:	ef e9       	ldi	r30, 0x9F	; 159
     2e6:	ff e0       	ldi	r31, 0x0F	; 15
     2e8:	31 97       	sbiw	r30, 0x01	; 1
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCDsendCommand+0x7a>
     2ec:	00 c0       	rjmp	.+0      	; 0x2ee <LCDsendCommand+0x80>
     2ee:	00 00       	nop
     2f0:	9b b1       	in	r25, 0x0b	; 11
     2f2:	9e 7f       	andi	r25, 0xFE	; 254
     2f4:	9b b9       	out	0x0b, r25	; 11
     2f6:	ef e9       	ldi	r30, 0x9F	; 159
     2f8:	ff e0       	ldi	r31, 0x0F	; 15
     2fa:	31 97       	sbiw	r30, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCDsendCommand+0x8c>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCDsendCommand+0x92>
     300:	00 00       	nop
     302:	65 b1       	in	r22, 0x05	; 5
     304:	f0 e1       	ldi	r31, 0x10	; 16
     306:	8f 9f       	mul	r24, r31
     308:	c0 01       	movw	r24, r0
     30a:	11 24       	eor	r1, r1
     30c:	ac 01       	movw	r20, r24
     30e:	40 74       	andi	r20, 0x40	; 64
     310:	55 27       	eor	r21, r21
     312:	55 95       	asr	r21
     314:	47 95       	ror	r20
     316:	55 95       	asr	r21
     318:	47 95       	ror	r20
     31a:	55 95       	asr	r21
     31c:	47 95       	ror	r20
     31e:	55 95       	asr	r21
     320:	47 95       	ror	r20
     322:	9c 01       	movw	r18, r24
     324:	20 78       	andi	r18, 0x80	; 128
     326:	33 27       	eor	r19, r19
     328:	02 2e       	mov	r0, r18
     32a:	23 2f       	mov	r18, r19
     32c:	00 0c       	add	r0, r0
     32e:	22 1f       	adc	r18, r18
     330:	33 0b       	sbc	r19, r19
     332:	00 0c       	add	r0, r0
     334:	22 1f       	adc	r18, r18
     336:	33 1f       	adc	r19, r19
     338:	36 2f       	mov	r19, r22
     33a:	39 7f       	andi	r19, 0xF9	; 249
     33c:	43 2b       	or	r20, r19
     33e:	24 2b       	or	r18, r20
     340:	25 b9       	out	0x05, r18	; 5
     342:	48 b1       	in	r20, 0x08	; 8
     344:	9c 01       	movw	r18, r24
     346:	20 71       	andi	r18, 0x10	; 16
     348:	33 27       	eor	r19, r19
     34a:	35 95       	asr	r19
     34c:	27 95       	ror	r18
     34e:	35 95       	asr	r19
     350:	27 95       	ror	r18
     352:	35 95       	asr	r19
     354:	27 95       	ror	r18
     356:	80 72       	andi	r24, 0x20	; 32
     358:	99 27       	eor	r25, r25
     35a:	95 95       	asr	r25
     35c:	87 95       	ror	r24
     35e:	95 95       	asr	r25
     360:	87 95       	ror	r24
     362:	95 95       	asr	r25
     364:	87 95       	ror	r24
     366:	94 2f       	mov	r25, r20
     368:	99 7f       	andi	r25, 0xF9	; 249
     36a:	29 2b       	or	r18, r25
     36c:	82 2b       	or	r24, r18
     36e:	88 b9       	out	0x08, r24	; 8
     370:	8b b1       	in	r24, 0x0b	; 11
     372:	81 60       	ori	r24, 0x01	; 1
     374:	8b b9       	out	0x0b, r24	; 11
     376:	8f e9       	ldi	r24, 0x9F	; 159
     378:	9f e0       	ldi	r25, 0x0F	; 15
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <LCDsendCommand+0x10c>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <LCDsendCommand+0x112>
     380:	00 00       	nop
     382:	8b b1       	in	r24, 0x0b	; 11
     384:	8e 7f       	andi	r24, 0xFE	; 254
     386:	8b b9       	out	0x0b, r24	; 11
     388:	ef e9       	ldi	r30, 0x9F	; 159
     38a:	ff e0       	ldi	r31, 0x0F	; 15
     38c:	31 97       	sbiw	r30, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <LCDsendCommand+0x11e>
     390:	00 c0       	rjmp	.+0      	; 0x392 <LCDsendCommand+0x124>
     392:	00 00       	nop
     394:	08 95       	ret

00000396 <LCDclr>:
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	0e 94 37 01 	call	0x26e	; 0x26e <LCDsendCommand>
     39c:	08 95       	ret

0000039e <LCDhome>:
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	0e 94 37 01 	call	0x26e	; 0x26e <LCDsendCommand>
     3a4:	08 95       	ret

000003a6 <LCDstring>:
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	00 97       	sbiw	r24, 0x00	; 0
     3b0:	69 f0       	breq	.+26     	; 0x3cc <LCDstring+0x26>
     3b2:	d6 2f       	mov	r29, r22
     3b4:	8c 01       	movw	r16, r24
     3b6:	c0 e0       	ldi	r28, 0x00	; 0
     3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <LCDstring+0x22>
     3ba:	f8 01       	movw	r30, r16
     3bc:	ec 0f       	add	r30, r28
     3be:	f1 1d       	adc	r31, r1
     3c0:	80 81       	ld	r24, Z
     3c2:	0e 94 9f 00 	call	0x13e	; 0x13e <LCDsendChar>
     3c6:	cf 5f       	subi	r28, 0xFF	; 255
     3c8:	cd 17       	cp	r28, r29
     3ca:	b8 f3       	brcs	.-18     	; 0x3ba <LCDstring+0x14>
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	08 95       	ret

000003d6 <LCDGotoXY>:
     3d6:	62 30       	cpi	r22, 0x02	; 2
     3d8:	31 f0       	breq	.+12     	; 0x3e6 <LCDGotoXY+0x10>
     3da:	63 30       	cpi	r22, 0x03	; 3
     3dc:	31 f0       	breq	.+12     	; 0x3ea <LCDGotoXY+0x14>
     3de:	61 30       	cpi	r22, 0x01	; 1
     3e0:	29 f4       	brne	.+10     	; 0x3ec <LCDGotoXY+0x16>
     3e2:	80 5c       	subi	r24, 0xC0	; 192
     3e4:	03 c0       	rjmp	.+6      	; 0x3ec <LCDGotoXY+0x16>
     3e6:	8c 5e       	subi	r24, 0xEC	; 236
     3e8:	01 c0       	rjmp	.+2      	; 0x3ec <LCDGotoXY+0x16>
     3ea:	8c 5a       	subi	r24, 0xAC	; 172
     3ec:	80 68       	ori	r24, 0x80	; 128
     3ee:	0e 94 37 01 	call	0x26e	; 0x26e <LCDsendCommand>
     3f2:	08 95       	ret

000003f4 <LCDdefinechar>:
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	7c 01       	movw	r14, r24
     402:	86 2f       	mov	r24, r22
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	88 0f       	add	r24, r24
     40c:	99 1f       	adc	r25, r25
     40e:	88 0f       	add	r24, r24
     410:	99 1f       	adc	r25, r25
     412:	80 64       	ori	r24, 0x40	; 64
     414:	c0 e0       	ldi	r28, 0x00	; 0
     416:	d0 e0       	ldi	r29, 0x00	; 0
     418:	0d c0       	rjmp	.+26     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     41a:	f7 01       	movw	r30, r14
     41c:	ec 0f       	add	r30, r28
     41e:	fd 1f       	adc	r31, r29
     420:	14 91       	lpm	r17, Z
     422:	01 e0       	ldi	r16, 0x01	; 1
     424:	08 0f       	add	r16, r24
     426:	0e 94 37 01 	call	0x26e	; 0x26e <LCDsendCommand>
     42a:	81 2f       	mov	r24, r17
     42c:	0e 94 9f 00 	call	0x13e	; 0x13e <LCDsendChar>
     430:	21 96       	adiw	r28, 0x01	; 1
     432:	80 2f       	mov	r24, r16
     434:	c8 30       	cpi	r28, 0x08	; 8
     436:	d1 05       	cpc	r29, r1
     438:	80 f3       	brcs	.-32     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	08 95       	ret

00000448 <LCDinit>:
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	8f e5       	ldi	r24, 0x5F	; 95
     44e:	9a ee       	ldi	r25, 0xEA	; 234
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <LCDinit+0x8>
     454:	00 c0       	rjmp	.+0      	; 0x456 <LCDinit+0xe>
     456:	00 00       	nop
     458:	85 b1       	in	r24, 0x05	; 5
     45a:	89 7f       	andi	r24, 0xF9	; 249
     45c:	85 b9       	out	0x05, r24	; 5
     45e:	88 b1       	in	r24, 0x08	; 8
     460:	89 7f       	andi	r24, 0xF9	; 249
     462:	88 b9       	out	0x08, r24	; 8
     464:	1b b8       	out	0x0b, r1	; 11
     466:	84 b1       	in	r24, 0x04	; 4
     468:	86 60       	ori	r24, 0x06	; 6
     46a:	84 b9       	out	0x04, r24	; 4
     46c:	87 b1       	in	r24, 0x07	; 7
     46e:	86 60       	ori	r24, 0x06	; 6
     470:	87 b9       	out	0x07, r24	; 7
     472:	8a b1       	in	r24, 0x0a	; 10
     474:	83 60       	ori	r24, 0x03	; 3
     476:	8a b9       	out	0x0a, r24	; 10
     478:	85 b1       	in	r24, 0x05	; 5
     47a:	89 7f       	andi	r24, 0xF9	; 249
     47c:	85 b9       	out	0x05, r24	; 5
     47e:	88 b1       	in	r24, 0x08	; 8
     480:	86 60       	ori	r24, 0x06	; 6
     482:	88 b9       	out	0x08, r24	; 8
     484:	8b b1       	in	r24, 0x0b	; 11
     486:	81 60       	ori	r24, 0x01	; 1
     488:	8b b9       	out	0x0b, r24	; 11
     48a:	8f e9       	ldi	r24, 0x9F	; 159
     48c:	9f e0       	ldi	r25, 0x0F	; 15
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <LCDinit+0x46>
     492:	00 c0       	rjmp	.+0      	; 0x494 <LCDinit+0x4c>
     494:	00 00       	nop
     496:	8b b1       	in	r24, 0x0b	; 11
     498:	8e 7f       	andi	r24, 0xFE	; 254
     49a:	8b b9       	out	0x0b, r24	; 11
     49c:	8f e9       	ldi	r24, 0x9F	; 159
     49e:	9f e0       	ldi	r25, 0x0F	; 15
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <LCDinit+0x58>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <LCDinit+0x5e>
     4a6:	00 00       	nop
     4a8:	85 b1       	in	r24, 0x05	; 5
     4aa:	89 7f       	andi	r24, 0xF9	; 249
     4ac:	85 b9       	out	0x05, r24	; 5
     4ae:	88 b1       	in	r24, 0x08	; 8
     4b0:	86 60       	ori	r24, 0x06	; 6
     4b2:	88 b9       	out	0x08, r24	; 8
     4b4:	8b b1       	in	r24, 0x0b	; 11
     4b6:	81 60       	ori	r24, 0x01	; 1
     4b8:	8b b9       	out	0x0b, r24	; 11
     4ba:	8f e9       	ldi	r24, 0x9F	; 159
     4bc:	9f e0       	ldi	r25, 0x0F	; 15
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	f1 f7       	brne	.-4      	; 0x4be <LCDinit+0x76>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <LCDinit+0x7c>
     4c4:	00 00       	nop
     4c6:	8b b1       	in	r24, 0x0b	; 11
     4c8:	8e 7f       	andi	r24, 0xFE	; 254
     4ca:	8b b9       	out	0x0b, r24	; 11
     4cc:	8f e9       	ldi	r24, 0x9F	; 159
     4ce:	9f e0       	ldi	r25, 0x0F	; 15
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <LCDinit+0x88>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <LCDinit+0x8e>
     4d6:	00 00       	nop
     4d8:	85 b1       	in	r24, 0x05	; 5
     4da:	89 7f       	andi	r24, 0xF9	; 249
     4dc:	85 b9       	out	0x05, r24	; 5
     4de:	88 b1       	in	r24, 0x08	; 8
     4e0:	89 7f       	andi	r24, 0xF9	; 249
     4e2:	84 60       	ori	r24, 0x04	; 4
     4e4:	88 b9       	out	0x08, r24	; 8
     4e6:	8b b1       	in	r24, 0x0b	; 11
     4e8:	81 60       	ori	r24, 0x01	; 1
     4ea:	8b b9       	out	0x0b, r24	; 11
     4ec:	8f e9       	ldi	r24, 0x9F	; 159
     4ee:	9f e0       	ldi	r25, 0x0F	; 15
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <LCDinit+0xa8>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <LCDinit+0xae>
     4f6:	00 00       	nop
     4f8:	8b b1       	in	r24, 0x0b	; 11
     4fa:	8e 7f       	andi	r24, 0xFE	; 254
     4fc:	8b b9       	out	0x0b, r24	; 11
     4fe:	8f e9       	ldi	r24, 0x9F	; 159
     500:	9f e0       	ldi	r25, 0x0F	; 15
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <LCDinit+0xba>
     506:	00 c0       	rjmp	.+0      	; 0x508 <LCDinit+0xc0>
     508:	00 00       	nop
     50a:	88 e2       	ldi	r24, 0x28	; 40
     50c:	0e 94 37 01 	call	0x26e	; 0x26e <LCDsendCommand>
     510:	8c e0       	ldi	r24, 0x0C	; 12
     512:	0e 94 37 01 	call	0x26e	; 0x26e <LCDsendCommand>
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	c0 e0       	ldi	r28, 0x00	; 0
     51a:	0a c0       	rjmp	.+20     	; 0x530 <LCDinit+0xe8>
     51c:	d1 e0       	ldi	r29, 0x01	; 1
     51e:	d6 0f       	add	r29, r22
     520:	8c 2f       	mov	r24, r28
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	88 59       	subi	r24, 0x98	; 152
     526:	9f 4f       	sbci	r25, 0xFF	; 255
     528:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <LCDdefinechar>
     52c:	c8 5f       	subi	r28, 0xF8	; 248
     52e:	6d 2f       	mov	r22, r29
     530:	c0 34       	cpi	r28, 0x40	; 64
     532:	a0 f3       	brcs	.-24     	; 0x51c <LCDinit+0xd4>
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <LCD_Init>:

void LCD_Init()
{
	LCDinit();
     53a:	0e 94 24 02 	call	0x448	; 0x448 <LCDinit>
	LCDclr();
     53e:	0e 94 cb 01 	call	0x396	; 0x396 <LCDclr>
	LCDhome();
     542:	0e 94 cf 01 	call	0x39e	; 0x39e <LCDhome>
     546:	08 95       	ret

00000548 <KeypadUpdate>:
uint8_t KeypadUpdate(void)
{
    uint8_t fila;

    // Primero, ponemos todas las filas en alto (salida '1')
    PORTB |= (1 << PB0) | (1 << PB3) | (1 << PB4);
     548:	85 b1       	in	r24, 0x05	; 5
     54a:	89 61       	ori	r24, 0x19	; 25
     54c:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << PD7);
     54e:	8b b1       	in	r24, 0x0b	; 11
     550:	80 68       	ori	r24, 0x80	; 128
     552:	8b b9       	out	0x0b, r24	; 11

    for (fila = 0; fila < 4; fila++)
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	4a c0       	rjmp	.+148    	; 0x5ec <KeypadUpdate+0xa4>
    {
        // Apago la fila actual (salida '0')
        switch (fila)
     558:	81 30       	cpi	r24, 0x01	; 1
     55a:	51 f0       	breq	.+20     	; 0x570 <KeypadUpdate+0x28>
     55c:	28 f0       	brcs	.+10     	; 0x568 <KeypadUpdate+0x20>
     55e:	82 30       	cpi	r24, 0x02	; 2
     560:	59 f0       	breq	.+22     	; 0x578 <KeypadUpdate+0x30>
     562:	83 30       	cpi	r24, 0x03	; 3
     564:	69 f0       	breq	.+26     	; 0x580 <KeypadUpdate+0x38>
     566:	0f c0       	rjmp	.+30     	; 0x586 <KeypadUpdate+0x3e>
        {
        case 0:
            PORTB &= ~(1 << PB4);
     568:	95 b1       	in	r25, 0x05	; 5
     56a:	9f 7e       	andi	r25, 0xEF	; 239
     56c:	95 b9       	out	0x05, r25	; 5
            break;
     56e:	0b c0       	rjmp	.+22     	; 0x586 <KeypadUpdate+0x3e>
        case 1:
            PORTB &= ~(1 << PB3);
     570:	95 b1       	in	r25, 0x05	; 5
     572:	97 7f       	andi	r25, 0xF7	; 247
     574:	95 b9       	out	0x05, r25	; 5
            break;
     576:	07 c0       	rjmp	.+14     	; 0x586 <KeypadUpdate+0x3e>
        case 2:
            PORTB &= ~(1 << PB0);
     578:	95 b1       	in	r25, 0x05	; 5
     57a:	9e 7f       	andi	r25, 0xFE	; 254
     57c:	95 b9       	out	0x05, r25	; 5
            break;
     57e:	03 c0       	rjmp	.+6      	; 0x586 <KeypadUpdate+0x3e>
        case 3:
            PORTD &= ~(1 << PD7);
     580:	9b b1       	in	r25, 0x0b	; 11
     582:	9f 77       	andi	r25, 0x7F	; 127
     584:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     586:	95 e3       	ldi	r25, 0x35	; 53
     588:	9a 95       	dec	r25
     58a:	f1 f7       	brne	.-4      	; 0x588 <KeypadUpdate+0x40>
     58c:	00 00       	nop
            break;
        }
		_delay_us(10); // Espera un poco para estabilizar la señal
        // Escaneo las columnas
        if (!(PIND & (1 << PD3)))
     58e:	4b 99       	sbic	0x09, 3	; 9
     590:	03 c0       	rjmp	.+6      	; 0x598 <KeypadUpdate+0x50>
            return (fila * 4 + 0); // Columna 0
     592:	88 0f       	add	r24, r24
     594:	88 0f       	add	r24, r24
     596:	08 95       	ret
        if (!(PIND & (1 << PD5)))
     598:	4d 99       	sbic	0x09, 5	; 9
     59a:	04 c0       	rjmp	.+8      	; 0x5a4 <KeypadUpdate+0x5c>
            return (fila * 4 + 1); // Columna 1
     59c:	88 0f       	add	r24, r24
     59e:	88 0f       	add	r24, r24
     5a0:	8f 5f       	subi	r24, 0xFF	; 255
     5a2:	08 95       	ret
        if (!(PIND & (1 << PD4)))
     5a4:	4c 99       	sbic	0x09, 4	; 9
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <KeypadUpdate+0x68>
            return (fila * 4 + 2); // Columna 2
     5a8:	88 0f       	add	r24, r24
     5aa:	88 0f       	add	r24, r24
     5ac:	8e 5f       	subi	r24, 0xFE	; 254
     5ae:	08 95       	ret
        if (!(PIND & (1 << PD2)))
     5b0:	4a 99       	sbic	0x09, 2	; 9
     5b2:	04 c0       	rjmp	.+8      	; 0x5bc <KeypadUpdate+0x74>
            return (fila * 4 + 3); // Columna 3
     5b4:	88 0f       	add	r24, r24
     5b6:	88 0f       	add	r24, r24
     5b8:	8d 5f       	subi	r24, 0xFD	; 253
     5ba:	08 95       	ret

        // Vuelvo a poner la fila en alto antes de la siguiente iteracion
        switch (fila)
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	51 f0       	breq	.+20     	; 0x5d4 <KeypadUpdate+0x8c>
     5c0:	28 f0       	brcs	.+10     	; 0x5cc <KeypadUpdate+0x84>
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	59 f0       	breq	.+22     	; 0x5dc <KeypadUpdate+0x94>
     5c6:	83 30       	cpi	r24, 0x03	; 3
     5c8:	69 f0       	breq	.+26     	; 0x5e4 <KeypadUpdate+0x9c>
     5ca:	0f c0       	rjmp	.+30     	; 0x5ea <KeypadUpdate+0xa2>
        {
        case 0:
            PORTB |= (1 << PB4);
     5cc:	95 b1       	in	r25, 0x05	; 5
     5ce:	90 61       	ori	r25, 0x10	; 16
     5d0:	95 b9       	out	0x05, r25	; 5
            break;
     5d2:	0b c0       	rjmp	.+22     	; 0x5ea <KeypadUpdate+0xa2>
        case 1:
            PORTB |= (1 << PB3);
     5d4:	95 b1       	in	r25, 0x05	; 5
     5d6:	98 60       	ori	r25, 0x08	; 8
     5d8:	95 b9       	out	0x05, r25	; 5
            break;
     5da:	07 c0       	rjmp	.+14     	; 0x5ea <KeypadUpdate+0xa2>
        case 2:
            PORTB |= (1 << PB0);
     5dc:	95 b1       	in	r25, 0x05	; 5
     5de:	91 60       	ori	r25, 0x01	; 1
     5e0:	95 b9       	out	0x05, r25	; 5
            break;
     5e2:	03 c0       	rjmp	.+6      	; 0x5ea <KeypadUpdate+0xa2>
        case 3:
            PORTD |= (1 << PD7);
     5e4:	9b b1       	in	r25, 0x0b	; 11
     5e6:	90 68       	ori	r25, 0x80	; 128
     5e8:	9b b9       	out	0x0b, r25	; 11

    // Primero, ponemos todas las filas en alto (salida '1')
    PORTB |= (1 << PB0) | (1 << PB3) | (1 << PB4);
    PORTD |= (1 << PD7);

    for (fila = 0; fila < 4; fila++)
     5ea:	8f 5f       	subi	r24, 0xFF	; 255
     5ec:	84 30       	cpi	r24, 0x04	; 4
     5ee:	08 f4       	brcc	.+2      	; 0x5f2 <KeypadUpdate+0xaa>
     5f0:	b3 cf       	rjmp	.-154    	; 0x558 <KeypadUpdate+0x10>
        case 3:
            PORTD |= (1 << PD7);
            break;
        }
    }
    return 0xFF; // No se presiono tecla
     5f2:	8f ef       	ldi	r24, 0xFF	; 255
}
     5f4:	08 95       	ret

000005f6 <KEYPAD_Scan>:

uint8_t KEYPAD_Scan(uint8_t *pkey)
{
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	ec 01       	movw	r28, r24
    static uint8_t Old_key = 0xFF, Last_valid_key = 0xFF;
    uint8_t Key;

    Key = KeyMap[KeypadUpdate()]; // Esta funcion la tenos que implementar o conectar
     5fc:	0e 94 a4 02 	call	0x548	; 0x548 <KeypadUpdate>
     600:	e8 2f       	mov	r30, r24
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	e6 5c       	subi	r30, 0xC6	; 198
     606:	fe 4f       	sbci	r31, 0xFE	; 254
     608:	80 81       	ld	r24, Z

    if (Key == 0xFF)
     60a:	8f 3f       	cpi	r24, 0xFF	; 255
     60c:	31 f4       	brne	.+12     	; 0x61a <KEYPAD_Scan+0x24>
    {
        Old_key = 0xFF;
     60e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Old_key.1755>
        Last_valid_key = 0xFF;
     612:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Last_valid_key.1756>
        return 0;
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	10 c0       	rjmp	.+32     	; 0x63a <KEYPAD_Scan+0x44>
    }

    if (Key == Old_key)
     61a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Old_key.1755>
     61e:	89 13       	cpse	r24, r25
     620:	09 c0       	rjmp	.+18     	; 0x634 <KEYPAD_Scan+0x3e>
    {
        if (Key != Last_valid_key)
     622:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Last_valid_key.1756>
     626:	89 17       	cp	r24, r25
     628:	29 f0       	breq	.+10     	; 0x634 <KEYPAD_Scan+0x3e>
        {
            *pkey = Key;
     62a:	88 83       	st	Y, r24
            Last_valid_key = Key;
     62c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Last_valid_key.1756>
            return 1;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	03 c0       	rjmp	.+6      	; 0x63a <KEYPAD_Scan+0x44>
        }
    }

    Old_key = Key;
     634:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Old_key.1755>
    return 0;
     638:	80 e0       	ldi	r24, 0x00	; 0
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <keypad_init>:

void keypad_init(void)
{
    // Filas como salidas
    DDRB |= (1 << PB0) | (1 << PB3) | (1 << PB4);
     640:	84 b1       	in	r24, 0x04	; 4
     642:	89 61       	ori	r24, 0x19	; 25
     644:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << PD7);
     646:	8a b1       	in	r24, 0x0a	; 10
     648:	80 68       	ori	r24, 0x80	; 128
     64a:	8a b9       	out	0x0a, r24	; 10

    // Columnas como entradas con pull-up
    DDRD &= ~((1 << PD2) | (1 << PD3) | (1 << PD4) | (1 << PD5));
     64c:	8a b1       	in	r24, 0x0a	; 10
     64e:	83 7c       	andi	r24, 0xC3	; 195
     650:	8a b9       	out	0x0a, r24	; 10
    PORTB |= (1 << PB0) | (1 << PB3) | (1 << PB4);
     652:	85 b1       	in	r24, 0x05	; 5
     654:	89 61       	ori	r24, 0x19	; 25
     656:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << PD2) | (1 << PD3) | (1 << PD4) | (1 << PD5);
     658:	8b b1       	in	r24, 0x0b	; 11
     65a:	8c 63       	ori	r24, 0x3C	; 60
     65c:	8b b9       	out	0x0b, r24	; 11
     65e:	08 95       	ret

00000660 <get_random_word>:
#define CHAR_INICIO '*'
#define CHAR_CONFIRMAR '#'
#define NUM_WORDS 25

char *get_random_word(const char *dict[], uint8_t size)
{
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	8c 01       	movw	r16, r24
     668:	c6 2f       	mov	r28, r22
    return (char *)dict[rand() % size];
     66a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <rand>
     66e:	6c 2f       	mov	r22, r28
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	0e 94 1c 05 	call	0xa38	; 0xa38 <__divmodhi4>
     676:	fc 01       	movw	r30, r24
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	e0 0f       	add	r30, r16
     67e:	f1 1f       	adc	r31, r17
}
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <init_mef>:
char guess[6];          // palabra oculta
char life[7];           // simbolos de vidas restantes

void init_mef()
{
    curr_state = INICIO;
     68c:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <curr_state>
     690:	08 95       	ret

00000692 <reset_time>:
}

void reset_time(){
    seg = 0;
     692:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <seg>
    tick = 0;
     696:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <__data_end>
     69a:	08 95       	ret

0000069c <update_hp>:
}

// actualiza la barra de vidas restantes
void update_hp(){
    if (hp == 2)
     69c:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <hp>
     6a0:	82 30       	cpi	r24, 0x02	; 2
     6a2:	31 f4       	brne	.+12     	; 0x6b0 <update_hp+0x14>
    {
        life[0] = ' ';
     6a4:	e3 e3       	ldi	r30, 0x33	; 51
     6a6:	f2 e0       	ldi	r31, 0x02	; 2
     6a8:	80 e2       	ldi	r24, 0x20	; 32
     6aa:	80 83       	st	Z, r24
        life[1] = ' ';
     6ac:	81 83       	std	Z+1, r24	; 0x01
     6ae:	08 95       	ret
    }
    else if (hp == 1)
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	31 f4       	brne	.+12     	; 0x6c0 <update_hp+0x24>
    {
        life[2] = ' ';
     6b4:	e3 e3       	ldi	r30, 0x33	; 51
     6b6:	f2 e0       	ldi	r31, 0x02	; 2
     6b8:	80 e2       	ldi	r24, 0x20	; 32
     6ba:	82 83       	std	Z+2, r24	; 0x02
        life[3] = ' ';
     6bc:	83 83       	std	Z+3, r24	; 0x03
     6be:	08 95       	ret
    }
    else if (hp == 0)
     6c0:	81 11       	cpse	r24, r1
     6c2:	05 c0       	rjmp	.+10     	; 0x6ce <update_hp+0x32>
    {
        life[4] = ' ';
     6c4:	e3 e3       	ldi	r30, 0x33	; 51
     6c6:	f2 e0       	ldi	r31, 0x02	; 2
     6c8:	80 e2       	ldi	r24, 0x20	; 32
     6ca:	84 83       	std	Z+4, r24	; 0x04
        life[5] = ' ';
     6cc:	85 83       	std	Z+5, r24	; 0x05
     6ce:	08 95       	ret

000006d0 <update_mef>:
}

// actualiza el estado de la MEF
// recibe el caracter ingresado por el usuario
void update_mef(uint8_t key)
{
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
     6dc:	64 97       	sbiw	r28, 0x14	; 20
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
    flag = 0; //resetear flag, para ejecucion cada 10ms
     6e8:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <flag>
    switch (curr_state)
     6ec:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <curr_state>
     6f0:	92 30       	cpi	r25, 0x02	; 2
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <update_mef+0x26>
     6f4:	a2 c0       	rjmp	.+324    	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     6f6:	30 f4       	brcc	.+12     	; 0x704 <update_mef+0x34>
     6f8:	99 23       	and	r25, r25
     6fa:	59 f0       	breq	.+22     	; 0x712 <update_mef+0x42>
     6fc:	91 30       	cpi	r25, 0x01	; 1
     6fe:	09 f4       	brne	.+2      	; 0x702 <update_mef+0x32>
     700:	59 c0       	rjmp	.+178    	; 0x7b4 <update_mef+0xe4>
     702:	69 c1       	rjmp	.+722    	; 0x9d6 <__stack+0xd7>
     704:	93 30       	cpi	r25, 0x03	; 3
     706:	09 f4       	brne	.+2      	; 0x70a <update_mef+0x3a>
     708:	fa c0       	rjmp	.+500    	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
     70a:	94 30       	cpi	r25, 0x04	; 4
     70c:	09 f4       	brne	.+2      	; 0x710 <update_mef+0x40>
     70e:	25 c1       	rjmp	.+586    	; 0x95a <__stack+0x5b>
     710:	62 c1       	rjmp	.+708    	; 0x9d6 <__stack+0xd7>
    {
    case INICIO:
        if (firstExec)
     712:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <firstExec>
     716:	99 23       	and	r25, r25
     718:	c9 f0       	breq	.+50     	; 0x74c <update_mef+0x7c>
        {
            LCDclr();
     71a:	0e 94 cb 01 	call	0x396	; 0x396 <LCDclr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     71e:	8f e3       	ldi	r24, 0x3F	; 63
     720:	9c e9       	ldi	r25, 0x9C	; 156
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <update_mef+0x52>
     726:	00 c0       	rjmp	.+0      	; 0x728 <update_mef+0x58>
     728:	00 00       	nop
            _delay_ms(10);
            LCDstring("Bienvenido!!", 12);
     72a:	6c e0       	ldi	r22, 0x0C	; 12
     72c:	8a e4       	ldi	r24, 0x4A	; 74
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCDstring>
            LCDGotoXY(0, 1);
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCDGotoXY>
            LCDstring("Presione *", 10);
     73c:	6a e0       	ldi	r22, 0x0A	; 10
     73e:	87 e5       	ldi	r24, 0x57	; 87
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCDstring>
            firstExec = 0;
     746:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <firstExec>
     74a:	45 c1       	rjmp	.+650    	; 0x9d6 <__stack+0xd7>
        }
        else
        {
            if (key == CHAR_INICIO)
     74c:	8a 32       	cpi	r24, 0x2A	; 42
     74e:	09 f0       	breq	.+2      	; 0x752 <update_mef+0x82>
     750:	42 c1       	rjmp	.+644    	; 0x9d6 <__stack+0xd7>
            {
                // obtener semilla random, solo la primera ejecucion
                if (firstRun){
     752:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <firstRun>
     756:	88 23       	and	r24, r24
     758:	71 f0       	breq	.+28     	; 0x776 <update_mef+0xa6>
                    srand(seg * 100 + tick);
     75a:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <seg>
     75e:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	34 e6       	ldi	r19, 0x64	; 100
     766:	23 9f       	mul	r18, r19
     768:	80 0d       	add	r24, r0
     76a:	91 1d       	adc	r25, r1
     76c:	11 24       	eor	r1, r1
     76e:	0e 94 a4 05 	call	0xb48	; 0xb48 <srand>
                    firstRun = 0;
     772:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <firstRun>
                }
                strcpy(guess, "*****");
     776:	86 e0       	ldi	r24, 0x06	; 6
     778:	e1 e8       	ldi	r30, 0x81	; 129
     77a:	f1 e0       	ldi	r31, 0x01	; 1
     77c:	ad e2       	ldi	r26, 0x2D	; 45
     77e:	b2 e0       	ldi	r27, 0x02	; 2
     780:	01 90       	ld	r0, Z+
     782:	0d 92       	st	X+, r0
     784:	8a 95       	dec	r24
     786:	e1 f7       	brne	.-8      	; 0x780 <update_mef+0xb0>
                first = 1;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <first>
                hp = 3;
     78e:	93 e0       	ldi	r25, 0x03	; 3
     790:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <hp>
                pass_index = 0;
     794:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <pass_index>
                curr_state = INICIAR_JUEGO;
     798:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <curr_state>
                firstExec = 1;
     79c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <firstExec>
                password = get_random_word(dict, NUM_WORDS);
     7a0:	69 e1       	ldi	r22, 0x19	; 25
     7a2:	88 e0       	ldi	r24, 0x08	; 8
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 30 03 	call	0x660	; 0x660 <get_random_word>
     7aa:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <password+0x1>
     7ae:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <password>
     7b2:	11 c1       	rjmp	.+546    	; 0x9d6 <__stack+0xd7>
        }
        break;

    case INICIAR_JUEGO:
        // mostrar password por dos segundos
        if (first)
     7b4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <first>
     7b8:	88 23       	and	r24, r24
     7ba:	d1 f0       	breq	.+52     	; 0x7f0 <update_mef+0x120>
        {
            LCDclr();
     7bc:	0e 94 cb 01 	call	0x396	; 0x396 <LCDclr>
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	9f ec       	ldi	r25, 0xCF	; 207
     7c4:	27 e0       	ldi	r18, 0x07	; 7
     7c6:	81 50       	subi	r24, 0x01	; 1
     7c8:	90 40       	sbci	r25, 0x00	; 0
     7ca:	20 40       	sbci	r18, 0x00	; 0
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <update_mef+0xf6>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <update_mef+0x100>
     7d0:	00 00       	nop
            _delay_ms(160);
            LCDGotoXY(0, 0);
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCDGotoXY>
            LCDstring(password, 5);
     7da:	65 e0       	ldi	r22, 0x05	; 5
     7dc:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <password>
     7e0:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <password+0x1>
     7e4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCDstring>
            first = 0;
     7e8:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <first>
            reset_time();
     7ec:	0e 94 49 03 	call	0x692	; 0x692 <reset_time>
        }
        // comenzar juego
        if (seg == 2)
     7f0:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <seg>
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	09 f0       	breq	.+2      	; 0x7fa <update_mef+0x12a>
     7f8:	ee c0       	rjmp	.+476    	; 0x9d6 <__stack+0xd7>
        {
            curr_state = JUEGO;
     7fa:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <curr_state>
            LCDclr();
     7fe:	0e 94 cb 01 	call	0x396	; 0x396 <LCDclr>
            pass_index = 0;
     802:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <pass_index>
            input_char = 0;
     806:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <input_char>
            strcpy(life, "<3<3<3");
     80a:	87 e0       	ldi	r24, 0x07	; 7
     80c:	e7 e8       	ldi	r30, 0x87	; 135
     80e:	f1 e0       	ldi	r31, 0x01	; 1
     810:	a3 e3       	ldi	r26, 0x33	; 51
     812:	b2 e0       	ldi	r27, 0x02	; 2
     814:	01 90       	ld	r0, Z+
     816:	0d 92       	st	X+, r0
     818:	8a 95       	dec	r24
     81a:	e1 f7       	brne	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
            reset_time();
     81c:	0e 94 49 03 	call	0x692	; 0x692 <reset_time>
            LCDGotoXY(0, 0);
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCDGotoXY>
            LCDstring((uint8_t *)guess, 5); // Mostrar la palabra oculta
     828:	65 e0       	ldi	r22, 0x05	; 5
     82a:	8d e2       	ldi	r24, 0x2D	; 45
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCDstring>
            first = 1;
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <first>
     838:	ce c0       	rjmp	.+412    	; 0x9d6 <__stack+0xd7>
        }
        break;

    case JUEGO:
        if (key != CHAR_CONFIRMAR)
     83a:	83 32       	cpi	r24, 0x23	; 35
     83c:	89 f0       	breq	.+34     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
        {
            // si el caracter es un numero
            if (key <= '9' && key >= '0')
     83e:	90 ed       	ldi	r25, 0xD0	; 208
     840:	98 0f       	add	r25, r24
     842:	9a 30       	cpi	r25, 0x0A	; 10
     844:	08 f0       	brcs	.+2      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     846:	51 c0       	rjmp	.+162    	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
            {
                input_char = input_char * 10 + key - '0';
     848:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <input_char>
     84c:	99 0f       	add	r25, r25
     84e:	29 2f       	mov	r18, r25
     850:	22 0f       	add	r18, r18
     852:	22 0f       	add	r18, r18
     854:	92 0f       	add	r25, r18
     856:	89 0f       	add	r24, r25
     858:	80 53       	subi	r24, 0x30	; 48
     85a:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <input_char>
     85e:	45 c0       	rjmp	.+138    	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
            }
        }
        else
        {
            if (input_char == password[pass_index])
     860:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <pass_index>
     864:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <password>
     868:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <password+0x1>
     86c:	e8 0f       	add	r30, r24
     86e:	f1 1d       	adc	r31, r1
     870:	90 81       	ld	r25, Z
     872:	20 91 2b 02 	lds	r18, 0x022B	; 0x80022b <input_char>
     876:	92 13       	cpse	r25, r18
     878:	1b c0       	rjmp	.+54     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
            {
                guess[pass_index] = password[pass_index];
     87a:	e8 2f       	mov	r30, r24
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	e3 5d       	subi	r30, 0xD3	; 211
     880:	fd 4f       	sbci	r31, 0xFD	; 253
     882:	90 83       	st	Z, r25
                LCDGotoXY(pass_index, 0);
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCDGotoXY>
                LCDsendChar(password[pass_index]);
     88a:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <pass_index>
     88e:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <password>
     892:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <password+0x1>
     896:	e8 0f       	add	r30, r24
     898:	f1 1d       	adc	r31, r1
     89a:	80 81       	ld	r24, Z
     89c:	0e 94 9f 00 	call	0x13e	; 0x13e <LCDsendChar>
                pass_index++;
     8a0:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <pass_index>
     8a4:	8f 5f       	subi	r24, 0xFF	; 255
     8a6:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <pass_index>
                input_char = 0;
     8aa:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <input_char>
     8ae:	10 c0       	rjmp	.+32     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
            }
            else
            {
                hp--;
     8b0:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <hp>
     8b4:	81 50       	subi	r24, 0x01	; 1
     8b6:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <hp>
                if (hp == 0)
     8ba:	81 11       	cpse	r24, r1
     8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
                {
                    curr_state = DERROTA;
     8be:	83 e0       	ldi	r24, 0x03	; 3
     8c0:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <curr_state>
                    reset_time();
     8c4:	0e 94 49 03 	call	0x692	; 0x692 <reset_time>
                }

                update_hp();
     8c8:	0e 94 4e 03 	call	0x69c	; 0x69c <update_hp>
                input_char = 0;
     8cc:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <input_char>
            }
            if (pass_index == 5)
     8d0:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <pass_index>
     8d4:	85 30       	cpi	r24, 0x05	; 5
     8d6:	49 f4       	brne	.+18     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
            {
                curr_state = VICTORIA;
     8d8:	84 e0       	ldi	r24, 0x04	; 4
     8da:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <curr_state>
                sec_to_win = seg;
     8de:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <seg>
     8e2:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <sec_to_win>
                reset_time();
     8e6:	0e 94 49 03 	call	0x692	; 0x692 <reset_time>
            }
        }
        LCDGotoXY(9, 1);
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	89 e0       	ldi	r24, 0x09	; 9
     8ee:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCDGotoXY>
        LCDstring(life, 6); // mostrar vidas restantes
     8f2:	66 e0       	ldi	r22, 0x06	; 6
     8f4:	83 e3       	ldi	r24, 0x33	; 51
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCDstring>
        break;
     8fc:	6c c0       	rjmp	.+216    	; 0x9d6 <__stack+0xd7>

    case DERROTA:
        if (first)
     8fe:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <first>
     902:	88 23       	and	r24, r24
     904:	01 f1       	breq	.+64     	; 0x946 <__stack+0x47>
        {
            LCDclr();
     906:	0e 94 cb 01 	call	0x396	; 0x396 <LCDclr>
     90a:	3f ef       	ldi	r19, 0xFF	; 255
     90c:	8f ec       	ldi	r24, 0xCF	; 207
     90e:	97 e0       	ldi	r25, 0x07	; 7
     910:	31 50       	subi	r19, 0x01	; 1
     912:	80 40       	sbci	r24, 0x00	; 0
     914:	90 40       	sbci	r25, 0x00	; 0
     916:	e1 f7       	brne	.-8      	; 0x910 <__stack+0x11>
     918:	00 c0       	rjmp	.+0      	; 0x91a <__stack+0x1b>
     91a:	00 00       	nop
            _delay_ms(160);
            LCDstring("Derrota!", 8);
     91c:	68 e0       	ldi	r22, 0x08	; 8
     91e:	82 e6       	ldi	r24, 0x62	; 98
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCDstring>
            LCDGotoXY(0, 1);
     926:	61 e0       	ldi	r22, 0x01	; 1
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCDGotoXY>
            LCDstring(password, 5);
     92e:	65 e0       	ldi	r22, 0x05	; 5
     930:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <password>
     934:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <password+0x1>
     938:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCDstring>
            first = 0;
     93c:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <first>
            reset_time();
     940:	0e 94 49 03 	call	0x692	; 0x692 <reset_time>
     944:	48 c0       	rjmp	.+144    	; 0x9d6 <__stack+0xd7>
        }
        else
        {
            // esperamos 5 segundos para volver al inicio
            if (seg == 5)
     946:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <seg>
     94a:	85 30       	cpi	r24, 0x05	; 5
     94c:	09 f0       	breq	.+2      	; 0x950 <__stack+0x51>
     94e:	43 c0       	rjmp	.+134    	; 0x9d6 <__stack+0xd7>
            {
                curr_state = INICIO;
     950:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <curr_state>
                reset_time();
     954:	0e 94 49 03 	call	0x692	; 0x692 <reset_time>
     958:	3e c0       	rjmp	.+124    	; 0x9d6 <__stack+0xd7>
            }
        }
        break;

    case VICTORIA:
        if (first)
     95a:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <first>
     95e:	88 23       	and	r24, r24
     960:	91 f1       	breq	.+100    	; 0x9c6 <__stack+0xc7>
        {
            LCDclr();
     962:	0e 94 cb 01 	call	0x396	; 0x396 <LCDclr>
     966:	2f ef       	ldi	r18, 0xFF	; 255
     968:	3f ec       	ldi	r19, 0xCF	; 207
     96a:	87 e0       	ldi	r24, 0x07	; 7
     96c:	21 50       	subi	r18, 0x01	; 1
     96e:	30 40       	sbci	r19, 0x00	; 0
     970:	80 40       	sbci	r24, 0x00	; 0
     972:	e1 f7       	brne	.-8      	; 0x96c <__stack+0x6d>
     974:	00 c0       	rjmp	.+0      	; 0x976 <__stack+0x77>
     976:	00 00       	nop
            _delay_ms(160);
            LCDstring("Victoria!", 9);
     978:	69 e0       	ldi	r22, 0x09	; 9
     97a:	8b e6       	ldi	r24, 0x6B	; 107
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCDstring>
            LCDGotoXY(0, 1);
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCDGotoXY>
            char message[20];
            sprintf(message, "Tiempo: %ds", sec_to_win);
     98a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <sec_to_win>
     98e:	1f 92       	push	r1
     990:	8f 93       	push	r24
     992:	85 e7       	ldi	r24, 0x75	; 117
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	9f 93       	push	r25
     998:	8f 93       	push	r24
     99a:	8e 01       	movw	r16, r28
     99c:	0f 5f       	subi	r16, 0xFF	; 255
     99e:	1f 4f       	sbci	r17, 0xFF	; 255
     9a0:	1f 93       	push	r17
     9a2:	0f 93       	push	r16
     9a4:	0e 94 af 05 	call	0xb5e	; 0xb5e <sprintf>
            LCDstring(message, 11);
     9a8:	6b e0       	ldi	r22, 0x0B	; 11
     9aa:	c8 01       	movw	r24, r16
     9ac:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCDstring>
            first = 0;
     9b0:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <first>
            reset_time();
     9b4:	0e 94 49 03 	call	0x692	; 0x692 <reset_time>
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	08 c0       	rjmp	.+16     	; 0x9d6 <__stack+0xd7>
        }
        else
        {
            // esperamos 5 segundos para volver al inicio
            if (seg == 5)
     9c6:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <seg>
     9ca:	85 30       	cpi	r24, 0x05	; 5
     9cc:	21 f4       	brne	.+8      	; 0x9d6 <__stack+0xd7>
            {
                curr_state = INICIO;
     9ce:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <curr_state>
                reset_time();
     9d2:	0e 94 49 03 	call	0x692	; 0x692 <reset_time>
            }
        }
        break;
    }
     9d6:	64 96       	adiw	r28, 0x14	; 20
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <main>:
#include "keypad.h"
#include "mef.h"


int main(void)
{
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	1f 92       	push	r1
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t key;
	timer0_init();
     9f6:	0e 94 73 00 	call	0xe6	; 0xe6 <timer0_init>
	LCD_Init();
     9fa:	0e 94 9d 02 	call	0x53a	; 0x53a <LCD_Init>
	keypad_init();
     9fe:	0e 94 20 03 	call	0x640	; 0x640 <keypad_init>
	init_mef();
     a02:	0e 94 46 03 	call	0x68c	; 0x68c <init_mef>
     a06:	2f ef       	ldi	r18, 0xFF	; 255
     a08:	81 ee       	ldi	r24, 0xE1	; 225
     a0a:	94 e0       	ldi	r25, 0x04	; 4
     a0c:	21 50       	subi	r18, 0x01	; 1
     a0e:	80 40       	sbci	r24, 0x00	; 0
     a10:	90 40       	sbci	r25, 0x00	; 0
     a12:	e1 f7       	brne	.-8      	; 0xa0c <main+0x20>
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <main+0x2a>
     a16:	00 00       	nop
	_delay_ms(100); // pequeño delay para que todo se inicialice correctamente

	while (1)
	{
		if (flag){
     a18:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <flag>
     a1c:	88 23       	and	r24, r24
     a1e:	e1 f3       	breq	.-8      	; 0xa18 <main+0x2c>
			if (!KEYPAD_Scan(&key)){
     a20:	ce 01       	movw	r24, r28
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <KEYPAD_Scan>
     a28:	81 11       	cpse	r24, r1
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <main+0x44>
				key = 0xFF;
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	89 83       	std	Y+1, r24	; 0x01
			}
			update_mef(key);
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	0e 94 68 03 	call	0x6d0	; 0x6d0 <update_mef>
     a36:	f0 cf       	rjmp	.-32     	; 0xa18 <main+0x2c>

00000a38 <__divmodhi4>:
     a38:	97 fb       	bst	r25, 7
     a3a:	07 2e       	mov	r0, r23
     a3c:	16 f4       	brtc	.+4      	; 0xa42 <__divmodhi4+0xa>
     a3e:	00 94       	com	r0
     a40:	07 d0       	rcall	.+14     	; 0xa50 <__divmodhi4_neg1>
     a42:	77 fd       	sbrc	r23, 7
     a44:	09 d0       	rcall	.+18     	; 0xa58 <__divmodhi4_neg2>
     a46:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__udivmodhi4>
     a4a:	07 fc       	sbrc	r0, 7
     a4c:	05 d0       	rcall	.+10     	; 0xa58 <__divmodhi4_neg2>
     a4e:	3e f4       	brtc	.+14     	; 0xa5e <__divmodhi4_exit>

00000a50 <__divmodhi4_neg1>:
     a50:	90 95       	com	r25
     a52:	81 95       	neg	r24
     a54:	9f 4f       	sbci	r25, 0xFF	; 255
     a56:	08 95       	ret

00000a58 <__divmodhi4_neg2>:
     a58:	70 95       	com	r23
     a5a:	61 95       	neg	r22
     a5c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a5e <__divmodhi4_exit>:
     a5e:	08 95       	ret

00000a60 <__umulhisi3>:
     a60:	a2 9f       	mul	r26, r18
     a62:	b0 01       	movw	r22, r0
     a64:	b3 9f       	mul	r27, r19
     a66:	c0 01       	movw	r24, r0
     a68:	a3 9f       	mul	r26, r19
     a6a:	70 0d       	add	r23, r0
     a6c:	81 1d       	adc	r24, r1
     a6e:	11 24       	eor	r1, r1
     a70:	91 1d       	adc	r25, r1
     a72:	b2 9f       	mul	r27, r18
     a74:	70 0d       	add	r23, r0
     a76:	81 1d       	adc	r24, r1
     a78:	11 24       	eor	r1, r1
     a7a:	91 1d       	adc	r25, r1
     a7c:	08 95       	ret

00000a7e <__udivmodhi4>:
     a7e:	aa 1b       	sub	r26, r26
     a80:	bb 1b       	sub	r27, r27
     a82:	51 e1       	ldi	r21, 0x11	; 17
     a84:	07 c0       	rjmp	.+14     	; 0xa94 <__udivmodhi4_ep>

00000a86 <__udivmodhi4_loop>:
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	a6 17       	cp	r26, r22
     a8c:	b7 07       	cpc	r27, r23
     a8e:	10 f0       	brcs	.+4      	; 0xa94 <__udivmodhi4_ep>
     a90:	a6 1b       	sub	r26, r22
     a92:	b7 0b       	sbc	r27, r23

00000a94 <__udivmodhi4_ep>:
     a94:	88 1f       	adc	r24, r24
     a96:	99 1f       	adc	r25, r25
     a98:	5a 95       	dec	r21
     a9a:	a9 f7       	brne	.-22     	; 0xa86 <__udivmodhi4_loop>
     a9c:	80 95       	com	r24
     a9e:	90 95       	com	r25
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	08 95       	ret

00000aa6 <do_rand>:
     aa6:	8f 92       	push	r8
     aa8:	9f 92       	push	r9
     aaa:	af 92       	push	r10
     aac:	bf 92       	push	r11
     aae:	cf 92       	push	r12
     ab0:	df 92       	push	r13
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	ec 01       	movw	r28, r24
     abc:	68 81       	ld	r22, Y
     abe:	79 81       	ldd	r23, Y+1	; 0x01
     ac0:	8a 81       	ldd	r24, Y+2	; 0x02
     ac2:	9b 81       	ldd	r25, Y+3	; 0x03
     ac4:	61 15       	cp	r22, r1
     ac6:	71 05       	cpc	r23, r1
     ac8:	81 05       	cpc	r24, r1
     aca:	91 05       	cpc	r25, r1
     acc:	21 f4       	brne	.+8      	; 0xad6 <do_rand+0x30>
     ace:	64 e2       	ldi	r22, 0x24	; 36
     ad0:	79 ed       	ldi	r23, 0xD9	; 217
     ad2:	8b e5       	ldi	r24, 0x5B	; 91
     ad4:	97 e0       	ldi	r25, 0x07	; 7
     ad6:	2d e1       	ldi	r18, 0x1D	; 29
     ad8:	33 ef       	ldi	r19, 0xF3	; 243
     ada:	41 e0       	ldi	r20, 0x01	; 1
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__divmodsi4>
     ae2:	49 01       	movw	r8, r18
     ae4:	5a 01       	movw	r10, r20
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	a7 ea       	ldi	r26, 0xA7	; 167
     aec:	b1 e4       	ldi	r27, 0x41	; 65
     aee:	0e 94 81 08 	call	0x1102	; 0x1102 <__muluhisi3>
     af2:	6b 01       	movw	r12, r22
     af4:	7c 01       	movw	r14, r24
     af6:	ac ee       	ldi	r26, 0xEC	; 236
     af8:	b4 ef       	ldi	r27, 0xF4	; 244
     afa:	a5 01       	movw	r20, r10
     afc:	94 01       	movw	r18, r8
     afe:	0e 94 8f 08 	call	0x111e	; 0x111e <__mulohisi3>
     b02:	dc 01       	movw	r26, r24
     b04:	cb 01       	movw	r24, r22
     b06:	8c 0d       	add	r24, r12
     b08:	9d 1d       	adc	r25, r13
     b0a:	ae 1d       	adc	r26, r14
     b0c:	bf 1d       	adc	r27, r15
     b0e:	b7 ff       	sbrs	r27, 7
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <do_rand+0x72>
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	a1 09       	sbc	r26, r1
     b16:	b0 48       	sbci	r27, 0x80	; 128
     b18:	88 83       	st	Y, r24
     b1a:	99 83       	std	Y+1, r25	; 0x01
     b1c:	aa 83       	std	Y+2, r26	; 0x02
     b1e:	bb 83       	std	Y+3, r27	; 0x03
     b20:	9f 77       	andi	r25, 0x7F	; 127
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	bf 90       	pop	r11
     b30:	af 90       	pop	r10
     b32:	9f 90       	pop	r9
     b34:	8f 90       	pop	r8
     b36:	08 95       	ret

00000b38 <rand_r>:
     b38:	0e 94 53 05 	call	0xaa6	; 0xaa6 <do_rand>
     b3c:	08 95       	ret

00000b3e <rand>:
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 53 05 	call	0xaa6	; 0xaa6 <do_rand>
     b46:	08 95       	ret

00000b48 <srand>:
     b48:	a0 e0       	ldi	r26, 0x00	; 0
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     b50:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b54:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     b58:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     b5c:	08 95       	ret

00000b5e <sprintf>:
     b5e:	ae e0       	ldi	r26, 0x0E	; 14
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e5 eb       	ldi	r30, 0xB5	; 181
     b64:	f5 e0       	ldi	r31, 0x05	; 5
     b66:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <__prologue_saves__+0x1c>
     b6a:	0d 89       	ldd	r16, Y+21	; 0x15
     b6c:	1e 89       	ldd	r17, Y+22	; 0x16
     b6e:	86 e0       	ldi	r24, 0x06	; 6
     b70:	8c 83       	std	Y+4, r24	; 0x04
     b72:	1a 83       	std	Y+2, r17	; 0x02
     b74:	09 83       	std	Y+1, r16	; 0x01
     b76:	8f ef       	ldi	r24, 0xFF	; 255
     b78:	9f e7       	ldi	r25, 0x7F	; 127
     b7a:	9e 83       	std	Y+6, r25	; 0x06
     b7c:	8d 83       	std	Y+5, r24	; 0x05
     b7e:	ae 01       	movw	r20, r28
     b80:	47 5e       	subi	r20, 0xE7	; 231
     b82:	5f 4f       	sbci	r21, 0xFF	; 255
     b84:	6f 89       	ldd	r22, Y+23	; 0x17
     b86:	78 8d       	ldd	r23, Y+24	; 0x18
     b88:	ce 01       	movw	r24, r28
     b8a:	01 96       	adiw	r24, 0x01	; 1
     b8c:	0e 94 d1 05 	call	0xba2	; 0xba2 <vfprintf>
     b90:	ef 81       	ldd	r30, Y+7	; 0x07
     b92:	f8 85       	ldd	r31, Y+8	; 0x08
     b94:	e0 0f       	add	r30, r16
     b96:	f1 1f       	adc	r31, r17
     b98:	10 82       	st	Z, r1
     b9a:	2e 96       	adiw	r28, 0x0e	; 14
     b9c:	e4 e0       	ldi	r30, 0x04	; 4
     b9e:	0c 94 be 08 	jmp	0x117c	; 0x117c <__epilogue_restores__+0x1c>

00000ba2 <vfprintf>:
     ba2:	ab e0       	ldi	r26, 0x0B	; 11
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e7 ed       	ldi	r30, 0xD7	; 215
     ba8:	f5 e0       	ldi	r31, 0x05	; 5
     baa:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__prologue_saves__>
     bae:	6c 01       	movw	r12, r24
     bb0:	7b 01       	movw	r14, r22
     bb2:	8a 01       	movw	r16, r20
     bb4:	fc 01       	movw	r30, r24
     bb6:	17 82       	std	Z+7, r1	; 0x07
     bb8:	16 82       	std	Z+6, r1	; 0x06
     bba:	83 81       	ldd	r24, Z+3	; 0x03
     bbc:	81 ff       	sbrs	r24, 1
     bbe:	cc c1       	rjmp	.+920    	; 0xf58 <vfprintf+0x3b6>
     bc0:	ce 01       	movw	r24, r28
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	3c 01       	movw	r6, r24
     bc6:	f6 01       	movw	r30, r12
     bc8:	93 81       	ldd	r25, Z+3	; 0x03
     bca:	f7 01       	movw	r30, r14
     bcc:	93 fd       	sbrc	r25, 3
     bce:	85 91       	lpm	r24, Z+
     bd0:	93 ff       	sbrs	r25, 3
     bd2:	81 91       	ld	r24, Z+
     bd4:	7f 01       	movw	r14, r30
     bd6:	88 23       	and	r24, r24
     bd8:	09 f4       	brne	.+2      	; 0xbdc <vfprintf+0x3a>
     bda:	ba c1       	rjmp	.+884    	; 0xf50 <vfprintf+0x3ae>
     bdc:	85 32       	cpi	r24, 0x25	; 37
     bde:	39 f4       	brne	.+14     	; 0xbee <vfprintf+0x4c>
     be0:	93 fd       	sbrc	r25, 3
     be2:	85 91       	lpm	r24, Z+
     be4:	93 ff       	sbrs	r25, 3
     be6:	81 91       	ld	r24, Z+
     be8:	7f 01       	movw	r14, r30
     bea:	85 32       	cpi	r24, 0x25	; 37
     bec:	29 f4       	brne	.+10     	; 0xbf8 <vfprintf+0x56>
     bee:	b6 01       	movw	r22, r12
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 c8 07 	call	0xf90	; 0xf90 <fputc>
     bf6:	e7 cf       	rjmp	.-50     	; 0xbc6 <vfprintf+0x24>
     bf8:	91 2c       	mov	r9, r1
     bfa:	21 2c       	mov	r2, r1
     bfc:	31 2c       	mov	r3, r1
     bfe:	ff e1       	ldi	r31, 0x1F	; 31
     c00:	f3 15       	cp	r31, r3
     c02:	d8 f0       	brcs	.+54     	; 0xc3a <vfprintf+0x98>
     c04:	8b 32       	cpi	r24, 0x2B	; 43
     c06:	79 f0       	breq	.+30     	; 0xc26 <vfprintf+0x84>
     c08:	38 f4       	brcc	.+14     	; 0xc18 <vfprintf+0x76>
     c0a:	80 32       	cpi	r24, 0x20	; 32
     c0c:	79 f0       	breq	.+30     	; 0xc2c <vfprintf+0x8a>
     c0e:	83 32       	cpi	r24, 0x23	; 35
     c10:	a1 f4       	brne	.+40     	; 0xc3a <vfprintf+0x98>
     c12:	23 2d       	mov	r18, r3
     c14:	20 61       	ori	r18, 0x10	; 16
     c16:	1d c0       	rjmp	.+58     	; 0xc52 <vfprintf+0xb0>
     c18:	8d 32       	cpi	r24, 0x2D	; 45
     c1a:	61 f0       	breq	.+24     	; 0xc34 <vfprintf+0x92>
     c1c:	80 33       	cpi	r24, 0x30	; 48
     c1e:	69 f4       	brne	.+26     	; 0xc3a <vfprintf+0x98>
     c20:	23 2d       	mov	r18, r3
     c22:	21 60       	ori	r18, 0x01	; 1
     c24:	16 c0       	rjmp	.+44     	; 0xc52 <vfprintf+0xb0>
     c26:	83 2d       	mov	r24, r3
     c28:	82 60       	ori	r24, 0x02	; 2
     c2a:	38 2e       	mov	r3, r24
     c2c:	e3 2d       	mov	r30, r3
     c2e:	e4 60       	ori	r30, 0x04	; 4
     c30:	3e 2e       	mov	r3, r30
     c32:	2a c0       	rjmp	.+84     	; 0xc88 <vfprintf+0xe6>
     c34:	f3 2d       	mov	r31, r3
     c36:	f8 60       	ori	r31, 0x08	; 8
     c38:	1d c0       	rjmp	.+58     	; 0xc74 <vfprintf+0xd2>
     c3a:	37 fc       	sbrc	r3, 7
     c3c:	2d c0       	rjmp	.+90     	; 0xc98 <vfprintf+0xf6>
     c3e:	20 ed       	ldi	r18, 0xD0	; 208
     c40:	28 0f       	add	r18, r24
     c42:	2a 30       	cpi	r18, 0x0A	; 10
     c44:	40 f0       	brcs	.+16     	; 0xc56 <vfprintf+0xb4>
     c46:	8e 32       	cpi	r24, 0x2E	; 46
     c48:	b9 f4       	brne	.+46     	; 0xc78 <vfprintf+0xd6>
     c4a:	36 fc       	sbrc	r3, 6
     c4c:	81 c1       	rjmp	.+770    	; 0xf50 <vfprintf+0x3ae>
     c4e:	23 2d       	mov	r18, r3
     c50:	20 64       	ori	r18, 0x40	; 64
     c52:	32 2e       	mov	r3, r18
     c54:	19 c0       	rjmp	.+50     	; 0xc88 <vfprintf+0xe6>
     c56:	36 fe       	sbrs	r3, 6
     c58:	06 c0       	rjmp	.+12     	; 0xc66 <vfprintf+0xc4>
     c5a:	8a e0       	ldi	r24, 0x0A	; 10
     c5c:	98 9e       	mul	r9, r24
     c5e:	20 0d       	add	r18, r0
     c60:	11 24       	eor	r1, r1
     c62:	92 2e       	mov	r9, r18
     c64:	11 c0       	rjmp	.+34     	; 0xc88 <vfprintf+0xe6>
     c66:	ea e0       	ldi	r30, 0x0A	; 10
     c68:	2e 9e       	mul	r2, r30
     c6a:	20 0d       	add	r18, r0
     c6c:	11 24       	eor	r1, r1
     c6e:	22 2e       	mov	r2, r18
     c70:	f3 2d       	mov	r31, r3
     c72:	f0 62       	ori	r31, 0x20	; 32
     c74:	3f 2e       	mov	r3, r31
     c76:	08 c0       	rjmp	.+16     	; 0xc88 <vfprintf+0xe6>
     c78:	8c 36       	cpi	r24, 0x6C	; 108
     c7a:	21 f4       	brne	.+8      	; 0xc84 <vfprintf+0xe2>
     c7c:	83 2d       	mov	r24, r3
     c7e:	80 68       	ori	r24, 0x80	; 128
     c80:	38 2e       	mov	r3, r24
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <vfprintf+0xe6>
     c84:	88 36       	cpi	r24, 0x68	; 104
     c86:	41 f4       	brne	.+16     	; 0xc98 <vfprintf+0xf6>
     c88:	f7 01       	movw	r30, r14
     c8a:	93 fd       	sbrc	r25, 3
     c8c:	85 91       	lpm	r24, Z+
     c8e:	93 ff       	sbrs	r25, 3
     c90:	81 91       	ld	r24, Z+
     c92:	7f 01       	movw	r14, r30
     c94:	81 11       	cpse	r24, r1
     c96:	b3 cf       	rjmp	.-154    	; 0xbfe <vfprintf+0x5c>
     c98:	98 2f       	mov	r25, r24
     c9a:	9f 7d       	andi	r25, 0xDF	; 223
     c9c:	95 54       	subi	r25, 0x45	; 69
     c9e:	93 30       	cpi	r25, 0x03	; 3
     ca0:	28 f4       	brcc	.+10     	; 0xcac <vfprintf+0x10a>
     ca2:	0c 5f       	subi	r16, 0xFC	; 252
     ca4:	1f 4f       	sbci	r17, 0xFF	; 255
     ca6:	9f e3       	ldi	r25, 0x3F	; 63
     ca8:	99 83       	std	Y+1, r25	; 0x01
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <vfprintf+0x124>
     cac:	83 36       	cpi	r24, 0x63	; 99
     cae:	31 f0       	breq	.+12     	; 0xcbc <vfprintf+0x11a>
     cb0:	83 37       	cpi	r24, 0x73	; 115
     cb2:	71 f0       	breq	.+28     	; 0xcd0 <vfprintf+0x12e>
     cb4:	83 35       	cpi	r24, 0x53	; 83
     cb6:	09 f0       	breq	.+2      	; 0xcba <vfprintf+0x118>
     cb8:	59 c0       	rjmp	.+178    	; 0xd6c <vfprintf+0x1ca>
     cba:	21 c0       	rjmp	.+66     	; 0xcfe <vfprintf+0x15c>
     cbc:	f8 01       	movw	r30, r16
     cbe:	80 81       	ld	r24, Z
     cc0:	89 83       	std	Y+1, r24	; 0x01
     cc2:	0e 5f       	subi	r16, 0xFE	; 254
     cc4:	1f 4f       	sbci	r17, 0xFF	; 255
     cc6:	88 24       	eor	r8, r8
     cc8:	83 94       	inc	r8
     cca:	91 2c       	mov	r9, r1
     ccc:	53 01       	movw	r10, r6
     cce:	13 c0       	rjmp	.+38     	; 0xcf6 <vfprintf+0x154>
     cd0:	28 01       	movw	r4, r16
     cd2:	f2 e0       	ldi	r31, 0x02	; 2
     cd4:	4f 0e       	add	r4, r31
     cd6:	51 1c       	adc	r5, r1
     cd8:	f8 01       	movw	r30, r16
     cda:	a0 80       	ld	r10, Z
     cdc:	b1 80       	ldd	r11, Z+1	; 0x01
     cde:	36 fe       	sbrs	r3, 6
     ce0:	03 c0       	rjmp	.+6      	; 0xce8 <vfprintf+0x146>
     ce2:	69 2d       	mov	r22, r9
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <vfprintf+0x14a>
     ce8:	6f ef       	ldi	r22, 0xFF	; 255
     cea:	7f ef       	ldi	r23, 0xFF	; 255
     cec:	c5 01       	movw	r24, r10
     cee:	0e 94 bd 07 	call	0xf7a	; 0xf7a <strnlen>
     cf2:	4c 01       	movw	r8, r24
     cf4:	82 01       	movw	r16, r4
     cf6:	f3 2d       	mov	r31, r3
     cf8:	ff 77       	andi	r31, 0x7F	; 127
     cfa:	3f 2e       	mov	r3, r31
     cfc:	16 c0       	rjmp	.+44     	; 0xd2a <vfprintf+0x188>
     cfe:	28 01       	movw	r4, r16
     d00:	22 e0       	ldi	r18, 0x02	; 2
     d02:	42 0e       	add	r4, r18
     d04:	51 1c       	adc	r5, r1
     d06:	f8 01       	movw	r30, r16
     d08:	a0 80       	ld	r10, Z
     d0a:	b1 80       	ldd	r11, Z+1	; 0x01
     d0c:	36 fe       	sbrs	r3, 6
     d0e:	03 c0       	rjmp	.+6      	; 0xd16 <vfprintf+0x174>
     d10:	69 2d       	mov	r22, r9
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <vfprintf+0x178>
     d16:	6f ef       	ldi	r22, 0xFF	; 255
     d18:	7f ef       	ldi	r23, 0xFF	; 255
     d1a:	c5 01       	movw	r24, r10
     d1c:	0e 94 b2 07 	call	0xf64	; 0xf64 <strnlen_P>
     d20:	4c 01       	movw	r8, r24
     d22:	f3 2d       	mov	r31, r3
     d24:	f0 68       	ori	r31, 0x80	; 128
     d26:	3f 2e       	mov	r3, r31
     d28:	82 01       	movw	r16, r4
     d2a:	33 fc       	sbrc	r3, 3
     d2c:	1b c0       	rjmp	.+54     	; 0xd64 <vfprintf+0x1c2>
     d2e:	82 2d       	mov	r24, r2
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	88 16       	cp	r8, r24
     d34:	99 06       	cpc	r9, r25
     d36:	b0 f4       	brcc	.+44     	; 0xd64 <vfprintf+0x1c2>
     d38:	b6 01       	movw	r22, r12
     d3a:	80 e2       	ldi	r24, 0x20	; 32
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 c8 07 	call	0xf90	; 0xf90 <fputc>
     d42:	2a 94       	dec	r2
     d44:	f4 cf       	rjmp	.-24     	; 0xd2e <vfprintf+0x18c>
     d46:	f5 01       	movw	r30, r10
     d48:	37 fc       	sbrc	r3, 7
     d4a:	85 91       	lpm	r24, Z+
     d4c:	37 fe       	sbrs	r3, 7
     d4e:	81 91       	ld	r24, Z+
     d50:	5f 01       	movw	r10, r30
     d52:	b6 01       	movw	r22, r12
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 c8 07 	call	0xf90	; 0xf90 <fputc>
     d5a:	21 10       	cpse	r2, r1
     d5c:	2a 94       	dec	r2
     d5e:	21 e0       	ldi	r18, 0x01	; 1
     d60:	82 1a       	sub	r8, r18
     d62:	91 08       	sbc	r9, r1
     d64:	81 14       	cp	r8, r1
     d66:	91 04       	cpc	r9, r1
     d68:	71 f7       	brne	.-36     	; 0xd46 <vfprintf+0x1a4>
     d6a:	e8 c0       	rjmp	.+464    	; 0xf3c <vfprintf+0x39a>
     d6c:	84 36       	cpi	r24, 0x64	; 100
     d6e:	11 f0       	breq	.+4      	; 0xd74 <vfprintf+0x1d2>
     d70:	89 36       	cpi	r24, 0x69	; 105
     d72:	41 f5       	brne	.+80     	; 0xdc4 <vfprintf+0x222>
     d74:	f8 01       	movw	r30, r16
     d76:	37 fe       	sbrs	r3, 7
     d78:	07 c0       	rjmp	.+14     	; 0xd88 <vfprintf+0x1e6>
     d7a:	60 81       	ld	r22, Z
     d7c:	71 81       	ldd	r23, Z+1	; 0x01
     d7e:	82 81       	ldd	r24, Z+2	; 0x02
     d80:	93 81       	ldd	r25, Z+3	; 0x03
     d82:	0c 5f       	subi	r16, 0xFC	; 252
     d84:	1f 4f       	sbci	r17, 0xFF	; 255
     d86:	08 c0       	rjmp	.+16     	; 0xd98 <vfprintf+0x1f6>
     d88:	60 81       	ld	r22, Z
     d8a:	71 81       	ldd	r23, Z+1	; 0x01
     d8c:	07 2e       	mov	r0, r23
     d8e:	00 0c       	add	r0, r0
     d90:	88 0b       	sbc	r24, r24
     d92:	99 0b       	sbc	r25, r25
     d94:	0e 5f       	subi	r16, 0xFE	; 254
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	f3 2d       	mov	r31, r3
     d9a:	ff 76       	andi	r31, 0x6F	; 111
     d9c:	3f 2e       	mov	r3, r31
     d9e:	97 ff       	sbrs	r25, 7
     da0:	09 c0       	rjmp	.+18     	; 0xdb4 <vfprintf+0x212>
     da2:	90 95       	com	r25
     da4:	80 95       	com	r24
     da6:	70 95       	com	r23
     da8:	61 95       	neg	r22
     daa:	7f 4f       	sbci	r23, 0xFF	; 255
     dac:	8f 4f       	sbci	r24, 0xFF	; 255
     dae:	9f 4f       	sbci	r25, 0xFF	; 255
     db0:	f0 68       	ori	r31, 0x80	; 128
     db2:	3f 2e       	mov	r3, r31
     db4:	2a e0       	ldi	r18, 0x0A	; 10
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	a3 01       	movw	r20, r6
     dba:	0e 94 04 08 	call	0x1008	; 0x1008 <__ultoa_invert>
     dbe:	88 2e       	mov	r8, r24
     dc0:	86 18       	sub	r8, r6
     dc2:	45 c0       	rjmp	.+138    	; 0xe4e <vfprintf+0x2ac>
     dc4:	85 37       	cpi	r24, 0x75	; 117
     dc6:	31 f4       	brne	.+12     	; 0xdd4 <vfprintf+0x232>
     dc8:	23 2d       	mov	r18, r3
     dca:	2f 7e       	andi	r18, 0xEF	; 239
     dcc:	b2 2e       	mov	r11, r18
     dce:	2a e0       	ldi	r18, 0x0A	; 10
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	25 c0       	rjmp	.+74     	; 0xe1e <vfprintf+0x27c>
     dd4:	93 2d       	mov	r25, r3
     dd6:	99 7f       	andi	r25, 0xF9	; 249
     dd8:	b9 2e       	mov	r11, r25
     dda:	8f 36       	cpi	r24, 0x6F	; 111
     ddc:	c1 f0       	breq	.+48     	; 0xe0e <vfprintf+0x26c>
     dde:	18 f4       	brcc	.+6      	; 0xde6 <vfprintf+0x244>
     de0:	88 35       	cpi	r24, 0x58	; 88
     de2:	79 f0       	breq	.+30     	; 0xe02 <vfprintf+0x260>
     de4:	b5 c0       	rjmp	.+362    	; 0xf50 <vfprintf+0x3ae>
     de6:	80 37       	cpi	r24, 0x70	; 112
     de8:	19 f0       	breq	.+6      	; 0xdf0 <vfprintf+0x24e>
     dea:	88 37       	cpi	r24, 0x78	; 120
     dec:	21 f0       	breq	.+8      	; 0xdf6 <vfprintf+0x254>
     dee:	b0 c0       	rjmp	.+352    	; 0xf50 <vfprintf+0x3ae>
     df0:	e9 2f       	mov	r30, r25
     df2:	e0 61       	ori	r30, 0x10	; 16
     df4:	be 2e       	mov	r11, r30
     df6:	b4 fe       	sbrs	r11, 4
     df8:	0d c0       	rjmp	.+26     	; 0xe14 <vfprintf+0x272>
     dfa:	fb 2d       	mov	r31, r11
     dfc:	f4 60       	ori	r31, 0x04	; 4
     dfe:	bf 2e       	mov	r11, r31
     e00:	09 c0       	rjmp	.+18     	; 0xe14 <vfprintf+0x272>
     e02:	34 fe       	sbrs	r3, 4
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <vfprintf+0x278>
     e06:	29 2f       	mov	r18, r25
     e08:	26 60       	ori	r18, 0x06	; 6
     e0a:	b2 2e       	mov	r11, r18
     e0c:	06 c0       	rjmp	.+12     	; 0xe1a <vfprintf+0x278>
     e0e:	28 e0       	ldi	r18, 0x08	; 8
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	05 c0       	rjmp	.+10     	; 0xe1e <vfprintf+0x27c>
     e14:	20 e1       	ldi	r18, 0x10	; 16
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <vfprintf+0x27c>
     e1a:	20 e1       	ldi	r18, 0x10	; 16
     e1c:	32 e0       	ldi	r19, 0x02	; 2
     e1e:	f8 01       	movw	r30, r16
     e20:	b7 fe       	sbrs	r11, 7
     e22:	07 c0       	rjmp	.+14     	; 0xe32 <vfprintf+0x290>
     e24:	60 81       	ld	r22, Z
     e26:	71 81       	ldd	r23, Z+1	; 0x01
     e28:	82 81       	ldd	r24, Z+2	; 0x02
     e2a:	93 81       	ldd	r25, Z+3	; 0x03
     e2c:	0c 5f       	subi	r16, 0xFC	; 252
     e2e:	1f 4f       	sbci	r17, 0xFF	; 255
     e30:	06 c0       	rjmp	.+12     	; 0xe3e <vfprintf+0x29c>
     e32:	60 81       	ld	r22, Z
     e34:	71 81       	ldd	r23, Z+1	; 0x01
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 5f       	subi	r16, 0xFE	; 254
     e3c:	1f 4f       	sbci	r17, 0xFF	; 255
     e3e:	a3 01       	movw	r20, r6
     e40:	0e 94 04 08 	call	0x1008	; 0x1008 <__ultoa_invert>
     e44:	88 2e       	mov	r8, r24
     e46:	86 18       	sub	r8, r6
     e48:	fb 2d       	mov	r31, r11
     e4a:	ff 77       	andi	r31, 0x7F	; 127
     e4c:	3f 2e       	mov	r3, r31
     e4e:	36 fe       	sbrs	r3, 6
     e50:	0d c0       	rjmp	.+26     	; 0xe6c <vfprintf+0x2ca>
     e52:	23 2d       	mov	r18, r3
     e54:	2e 7f       	andi	r18, 0xFE	; 254
     e56:	a2 2e       	mov	r10, r18
     e58:	89 14       	cp	r8, r9
     e5a:	58 f4       	brcc	.+22     	; 0xe72 <vfprintf+0x2d0>
     e5c:	34 fe       	sbrs	r3, 4
     e5e:	0b c0       	rjmp	.+22     	; 0xe76 <vfprintf+0x2d4>
     e60:	32 fc       	sbrc	r3, 2
     e62:	09 c0       	rjmp	.+18     	; 0xe76 <vfprintf+0x2d4>
     e64:	83 2d       	mov	r24, r3
     e66:	8e 7e       	andi	r24, 0xEE	; 238
     e68:	a8 2e       	mov	r10, r24
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <vfprintf+0x2d4>
     e6c:	b8 2c       	mov	r11, r8
     e6e:	a3 2c       	mov	r10, r3
     e70:	03 c0       	rjmp	.+6      	; 0xe78 <vfprintf+0x2d6>
     e72:	b8 2c       	mov	r11, r8
     e74:	01 c0       	rjmp	.+2      	; 0xe78 <vfprintf+0x2d6>
     e76:	b9 2c       	mov	r11, r9
     e78:	a4 fe       	sbrs	r10, 4
     e7a:	0f c0       	rjmp	.+30     	; 0xe9a <vfprintf+0x2f8>
     e7c:	fe 01       	movw	r30, r28
     e7e:	e8 0d       	add	r30, r8
     e80:	f1 1d       	adc	r31, r1
     e82:	80 81       	ld	r24, Z
     e84:	80 33       	cpi	r24, 0x30	; 48
     e86:	21 f4       	brne	.+8      	; 0xe90 <vfprintf+0x2ee>
     e88:	9a 2d       	mov	r25, r10
     e8a:	99 7e       	andi	r25, 0xE9	; 233
     e8c:	a9 2e       	mov	r10, r25
     e8e:	09 c0       	rjmp	.+18     	; 0xea2 <vfprintf+0x300>
     e90:	a2 fe       	sbrs	r10, 2
     e92:	06 c0       	rjmp	.+12     	; 0xea0 <vfprintf+0x2fe>
     e94:	b3 94       	inc	r11
     e96:	b3 94       	inc	r11
     e98:	04 c0       	rjmp	.+8      	; 0xea2 <vfprintf+0x300>
     e9a:	8a 2d       	mov	r24, r10
     e9c:	86 78       	andi	r24, 0x86	; 134
     e9e:	09 f0       	breq	.+2      	; 0xea2 <vfprintf+0x300>
     ea0:	b3 94       	inc	r11
     ea2:	a3 fc       	sbrc	r10, 3
     ea4:	11 c0       	rjmp	.+34     	; 0xec8 <vfprintf+0x326>
     ea6:	a0 fe       	sbrs	r10, 0
     ea8:	06 c0       	rjmp	.+12     	; 0xeb6 <vfprintf+0x314>
     eaa:	b2 14       	cp	r11, r2
     eac:	88 f4       	brcc	.+34     	; 0xed0 <vfprintf+0x32e>
     eae:	28 0c       	add	r2, r8
     eb0:	92 2c       	mov	r9, r2
     eb2:	9b 18       	sub	r9, r11
     eb4:	0e c0       	rjmp	.+28     	; 0xed2 <vfprintf+0x330>
     eb6:	b2 14       	cp	r11, r2
     eb8:	60 f4       	brcc	.+24     	; 0xed2 <vfprintf+0x330>
     eba:	b6 01       	movw	r22, r12
     ebc:	80 e2       	ldi	r24, 0x20	; 32
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 c8 07 	call	0xf90	; 0xf90 <fputc>
     ec4:	b3 94       	inc	r11
     ec6:	f7 cf       	rjmp	.-18     	; 0xeb6 <vfprintf+0x314>
     ec8:	b2 14       	cp	r11, r2
     eca:	18 f4       	brcc	.+6      	; 0xed2 <vfprintf+0x330>
     ecc:	2b 18       	sub	r2, r11
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <vfprintf+0x332>
     ed0:	98 2c       	mov	r9, r8
     ed2:	21 2c       	mov	r2, r1
     ed4:	a4 fe       	sbrs	r10, 4
     ed6:	10 c0       	rjmp	.+32     	; 0xef8 <vfprintf+0x356>
     ed8:	b6 01       	movw	r22, r12
     eda:	80 e3       	ldi	r24, 0x30	; 48
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 c8 07 	call	0xf90	; 0xf90 <fputc>
     ee2:	a2 fe       	sbrs	r10, 2
     ee4:	17 c0       	rjmp	.+46     	; 0xf14 <vfprintf+0x372>
     ee6:	a1 fc       	sbrc	r10, 1
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <vfprintf+0x34e>
     eea:	88 e7       	ldi	r24, 0x78	; 120
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <vfprintf+0x352>
     ef0:	88 e5       	ldi	r24, 0x58	; 88
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	b6 01       	movw	r22, r12
     ef6:	0c c0       	rjmp	.+24     	; 0xf10 <vfprintf+0x36e>
     ef8:	8a 2d       	mov	r24, r10
     efa:	86 78       	andi	r24, 0x86	; 134
     efc:	59 f0       	breq	.+22     	; 0xf14 <vfprintf+0x372>
     efe:	a1 fe       	sbrs	r10, 1
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <vfprintf+0x364>
     f02:	8b e2       	ldi	r24, 0x2B	; 43
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <vfprintf+0x366>
     f06:	80 e2       	ldi	r24, 0x20	; 32
     f08:	a7 fc       	sbrc	r10, 7
     f0a:	8d e2       	ldi	r24, 0x2D	; 45
     f0c:	b6 01       	movw	r22, r12
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 c8 07 	call	0xf90	; 0xf90 <fputc>
     f14:	89 14       	cp	r8, r9
     f16:	38 f4       	brcc	.+14     	; 0xf26 <vfprintf+0x384>
     f18:	b6 01       	movw	r22, r12
     f1a:	80 e3       	ldi	r24, 0x30	; 48
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 c8 07 	call	0xf90	; 0xf90 <fputc>
     f22:	9a 94       	dec	r9
     f24:	f7 cf       	rjmp	.-18     	; 0xf14 <vfprintf+0x372>
     f26:	8a 94       	dec	r8
     f28:	f3 01       	movw	r30, r6
     f2a:	e8 0d       	add	r30, r8
     f2c:	f1 1d       	adc	r31, r1
     f2e:	80 81       	ld	r24, Z
     f30:	b6 01       	movw	r22, r12
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 c8 07 	call	0xf90	; 0xf90 <fputc>
     f38:	81 10       	cpse	r8, r1
     f3a:	f5 cf       	rjmp	.-22     	; 0xf26 <vfprintf+0x384>
     f3c:	22 20       	and	r2, r2
     f3e:	09 f4       	brne	.+2      	; 0xf42 <vfprintf+0x3a0>
     f40:	42 ce       	rjmp	.-892    	; 0xbc6 <vfprintf+0x24>
     f42:	b6 01       	movw	r22, r12
     f44:	80 e2       	ldi	r24, 0x20	; 32
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 c8 07 	call	0xf90	; 0xf90 <fputc>
     f4c:	2a 94       	dec	r2
     f4e:	f6 cf       	rjmp	.-20     	; 0xf3c <vfprintf+0x39a>
     f50:	f6 01       	movw	r30, r12
     f52:	86 81       	ldd	r24, Z+6	; 0x06
     f54:	97 81       	ldd	r25, Z+7	; 0x07
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <vfprintf+0x3ba>
     f58:	8f ef       	ldi	r24, 0xFF	; 255
     f5a:	9f ef       	ldi	r25, 0xFF	; 255
     f5c:	2b 96       	adiw	r28, 0x0b	; 11
     f5e:	e2 e1       	ldi	r30, 0x12	; 18
     f60:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__epilogue_restores__>

00000f64 <strnlen_P>:
     f64:	fc 01       	movw	r30, r24
     f66:	05 90       	lpm	r0, Z+
     f68:	61 50       	subi	r22, 0x01	; 1
     f6a:	70 40       	sbci	r23, 0x00	; 0
     f6c:	01 10       	cpse	r0, r1
     f6e:	d8 f7       	brcc	.-10     	; 0xf66 <strnlen_P+0x2>
     f70:	80 95       	com	r24
     f72:	90 95       	com	r25
     f74:	8e 0f       	add	r24, r30
     f76:	9f 1f       	adc	r25, r31
     f78:	08 95       	ret

00000f7a <strnlen>:
     f7a:	fc 01       	movw	r30, r24
     f7c:	61 50       	subi	r22, 0x01	; 1
     f7e:	70 40       	sbci	r23, 0x00	; 0
     f80:	01 90       	ld	r0, Z+
     f82:	01 10       	cpse	r0, r1
     f84:	d8 f7       	brcc	.-10     	; 0xf7c <strnlen+0x2>
     f86:	80 95       	com	r24
     f88:	90 95       	com	r25
     f8a:	8e 0f       	add	r24, r30
     f8c:	9f 1f       	adc	r25, r31
     f8e:	08 95       	ret

00000f90 <fputc>:
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	fb 01       	movw	r30, r22
     f9a:	23 81       	ldd	r18, Z+3	; 0x03
     f9c:	21 fd       	sbrc	r18, 1
     f9e:	03 c0       	rjmp	.+6      	; 0xfa6 <fputc+0x16>
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	9f ef       	ldi	r25, 0xFF	; 255
     fa4:	2c c0       	rjmp	.+88     	; 0xffe <fputc+0x6e>
     fa6:	22 ff       	sbrs	r18, 2
     fa8:	16 c0       	rjmp	.+44     	; 0xfd6 <fputc+0x46>
     faa:	46 81       	ldd	r20, Z+6	; 0x06
     fac:	57 81       	ldd	r21, Z+7	; 0x07
     fae:	24 81       	ldd	r18, Z+4	; 0x04
     fb0:	35 81       	ldd	r19, Z+5	; 0x05
     fb2:	42 17       	cp	r20, r18
     fb4:	53 07       	cpc	r21, r19
     fb6:	44 f4       	brge	.+16     	; 0xfc8 <fputc+0x38>
     fb8:	a0 81       	ld	r26, Z
     fba:	b1 81       	ldd	r27, Z+1	; 0x01
     fbc:	9d 01       	movw	r18, r26
     fbe:	2f 5f       	subi	r18, 0xFF	; 255
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
     fc2:	31 83       	std	Z+1, r19	; 0x01
     fc4:	20 83       	st	Z, r18
     fc6:	8c 93       	st	X, r24
     fc8:	26 81       	ldd	r18, Z+6	; 0x06
     fca:	37 81       	ldd	r19, Z+7	; 0x07
     fcc:	2f 5f       	subi	r18, 0xFF	; 255
     fce:	3f 4f       	sbci	r19, 0xFF	; 255
     fd0:	37 83       	std	Z+7, r19	; 0x07
     fd2:	26 83       	std	Z+6, r18	; 0x06
     fd4:	14 c0       	rjmp	.+40     	; 0xffe <fputc+0x6e>
     fd6:	8b 01       	movw	r16, r22
     fd8:	ec 01       	movw	r28, r24
     fda:	fb 01       	movw	r30, r22
     fdc:	00 84       	ldd	r0, Z+8	; 0x08
     fde:	f1 85       	ldd	r31, Z+9	; 0x09
     fe0:	e0 2d       	mov	r30, r0
     fe2:	09 95       	icall
     fe4:	89 2b       	or	r24, r25
     fe6:	e1 f6       	brne	.-72     	; 0xfa0 <fputc+0x10>
     fe8:	d8 01       	movw	r26, r16
     fea:	16 96       	adiw	r26, 0x06	; 6
     fec:	8d 91       	ld	r24, X+
     fee:	9c 91       	ld	r25, X
     ff0:	17 97       	sbiw	r26, 0x07	; 7
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	17 96       	adiw	r26, 0x07	; 7
     ff6:	9c 93       	st	X, r25
     ff8:	8e 93       	st	-X, r24
     ffa:	16 97       	sbiw	r26, 0x06	; 6
     ffc:	ce 01       	movw	r24, r28
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	08 95       	ret

00001008 <__ultoa_invert>:
    1008:	fa 01       	movw	r30, r20
    100a:	aa 27       	eor	r26, r26
    100c:	28 30       	cpi	r18, 0x08	; 8
    100e:	51 f1       	breq	.+84     	; 0x1064 <__ultoa_invert+0x5c>
    1010:	20 31       	cpi	r18, 0x10	; 16
    1012:	81 f1       	breq	.+96     	; 0x1074 <__ultoa_invert+0x6c>
    1014:	e8 94       	clt
    1016:	6f 93       	push	r22
    1018:	6e 7f       	andi	r22, 0xFE	; 254
    101a:	6e 5f       	subi	r22, 0xFE	; 254
    101c:	7f 4f       	sbci	r23, 0xFF	; 255
    101e:	8f 4f       	sbci	r24, 0xFF	; 255
    1020:	9f 4f       	sbci	r25, 0xFF	; 255
    1022:	af 4f       	sbci	r26, 0xFF	; 255
    1024:	b1 e0       	ldi	r27, 0x01	; 1
    1026:	3e d0       	rcall	.+124    	; 0x10a4 <__ultoa_invert+0x9c>
    1028:	b4 e0       	ldi	r27, 0x04	; 4
    102a:	3c d0       	rcall	.+120    	; 0x10a4 <__ultoa_invert+0x9c>
    102c:	67 0f       	add	r22, r23
    102e:	78 1f       	adc	r23, r24
    1030:	89 1f       	adc	r24, r25
    1032:	9a 1f       	adc	r25, r26
    1034:	a1 1d       	adc	r26, r1
    1036:	68 0f       	add	r22, r24
    1038:	79 1f       	adc	r23, r25
    103a:	8a 1f       	adc	r24, r26
    103c:	91 1d       	adc	r25, r1
    103e:	a1 1d       	adc	r26, r1
    1040:	6a 0f       	add	r22, r26
    1042:	71 1d       	adc	r23, r1
    1044:	81 1d       	adc	r24, r1
    1046:	91 1d       	adc	r25, r1
    1048:	a1 1d       	adc	r26, r1
    104a:	20 d0       	rcall	.+64     	; 0x108c <__ultoa_invert+0x84>
    104c:	09 f4       	brne	.+2      	; 0x1050 <__ultoa_invert+0x48>
    104e:	68 94       	set
    1050:	3f 91       	pop	r19
    1052:	2a e0       	ldi	r18, 0x0A	; 10
    1054:	26 9f       	mul	r18, r22
    1056:	11 24       	eor	r1, r1
    1058:	30 19       	sub	r19, r0
    105a:	30 5d       	subi	r19, 0xD0	; 208
    105c:	31 93       	st	Z+, r19
    105e:	de f6       	brtc	.-74     	; 0x1016 <__ultoa_invert+0xe>
    1060:	cf 01       	movw	r24, r30
    1062:	08 95       	ret
    1064:	46 2f       	mov	r20, r22
    1066:	47 70       	andi	r20, 0x07	; 7
    1068:	40 5d       	subi	r20, 0xD0	; 208
    106a:	41 93       	st	Z+, r20
    106c:	b3 e0       	ldi	r27, 0x03	; 3
    106e:	0f d0       	rcall	.+30     	; 0x108e <__ultoa_invert+0x86>
    1070:	c9 f7       	brne	.-14     	; 0x1064 <__ultoa_invert+0x5c>
    1072:	f6 cf       	rjmp	.-20     	; 0x1060 <__ultoa_invert+0x58>
    1074:	46 2f       	mov	r20, r22
    1076:	4f 70       	andi	r20, 0x0F	; 15
    1078:	40 5d       	subi	r20, 0xD0	; 208
    107a:	4a 33       	cpi	r20, 0x3A	; 58
    107c:	18 f0       	brcs	.+6      	; 0x1084 <__ultoa_invert+0x7c>
    107e:	49 5d       	subi	r20, 0xD9	; 217
    1080:	31 fd       	sbrc	r19, 1
    1082:	40 52       	subi	r20, 0x20	; 32
    1084:	41 93       	st	Z+, r20
    1086:	02 d0       	rcall	.+4      	; 0x108c <__ultoa_invert+0x84>
    1088:	a9 f7       	brne	.-22     	; 0x1074 <__ultoa_invert+0x6c>
    108a:	ea cf       	rjmp	.-44     	; 0x1060 <__ultoa_invert+0x58>
    108c:	b4 e0       	ldi	r27, 0x04	; 4
    108e:	a6 95       	lsr	r26
    1090:	97 95       	ror	r25
    1092:	87 95       	ror	r24
    1094:	77 95       	ror	r23
    1096:	67 95       	ror	r22
    1098:	ba 95       	dec	r27
    109a:	c9 f7       	brne	.-14     	; 0x108e <__ultoa_invert+0x86>
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	61 05       	cpc	r22, r1
    10a0:	71 05       	cpc	r23, r1
    10a2:	08 95       	ret
    10a4:	9b 01       	movw	r18, r22
    10a6:	ac 01       	movw	r20, r24
    10a8:	0a 2e       	mov	r0, r26
    10aa:	06 94       	lsr	r0
    10ac:	57 95       	ror	r21
    10ae:	47 95       	ror	r20
    10b0:	37 95       	ror	r19
    10b2:	27 95       	ror	r18
    10b4:	ba 95       	dec	r27
    10b6:	c9 f7       	brne	.-14     	; 0x10aa <__ultoa_invert+0xa2>
    10b8:	62 0f       	add	r22, r18
    10ba:	73 1f       	adc	r23, r19
    10bc:	84 1f       	adc	r24, r20
    10be:	95 1f       	adc	r25, r21
    10c0:	a0 1d       	adc	r26, r0
    10c2:	08 95       	ret

000010c4 <__divmodsi4>:
    10c4:	05 2e       	mov	r0, r21
    10c6:	97 fb       	bst	r25, 7
    10c8:	1e f4       	brtc	.+6      	; 0x10d0 <__divmodsi4+0xc>
    10ca:	00 94       	com	r0
    10cc:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__negsi2>
    10d0:	57 fd       	sbrc	r21, 7
    10d2:	07 d0       	rcall	.+14     	; 0x10e2 <__divmodsi4_neg2>
    10d4:	0e 94 cb 08 	call	0x1196	; 0x1196 <__udivmodsi4>
    10d8:	07 fc       	sbrc	r0, 7
    10da:	03 d0       	rcall	.+6      	; 0x10e2 <__divmodsi4_neg2>
    10dc:	4e f4       	brtc	.+18     	; 0x10f0 <__divmodsi4_exit>
    10de:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__negsi2>

000010e2 <__divmodsi4_neg2>:
    10e2:	50 95       	com	r21
    10e4:	40 95       	com	r20
    10e6:	30 95       	com	r19
    10e8:	21 95       	neg	r18
    10ea:	3f 4f       	sbci	r19, 0xFF	; 255
    10ec:	4f 4f       	sbci	r20, 0xFF	; 255
    10ee:	5f 4f       	sbci	r21, 0xFF	; 255

000010f0 <__divmodsi4_exit>:
    10f0:	08 95       	ret

000010f2 <__negsi2>:
    10f2:	90 95       	com	r25
    10f4:	80 95       	com	r24
    10f6:	70 95       	com	r23
    10f8:	61 95       	neg	r22
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	8f 4f       	sbci	r24, 0xFF	; 255
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	08 95       	ret

00001102 <__muluhisi3>:
    1102:	0e 94 30 05 	call	0xa60	; 0xa60 <__umulhisi3>
    1106:	a5 9f       	mul	r26, r21
    1108:	90 0d       	add	r25, r0
    110a:	b4 9f       	mul	r27, r20
    110c:	90 0d       	add	r25, r0
    110e:	a4 9f       	mul	r26, r20
    1110:	80 0d       	add	r24, r0
    1112:	91 1d       	adc	r25, r1
    1114:	11 24       	eor	r1, r1
    1116:	08 95       	ret

00001118 <__mulshisi3>:
    1118:	b7 ff       	sbrs	r27, 7
    111a:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__muluhisi3>

0000111e <__mulohisi3>:
    111e:	0e 94 81 08 	call	0x1102	; 0x1102 <__muluhisi3>
    1122:	82 1b       	sub	r24, r18
    1124:	93 0b       	sbc	r25, r19
    1126:	08 95       	ret

00001128 <__prologue_saves__>:
    1128:	2f 92       	push	r2
    112a:	3f 92       	push	r3
    112c:	4f 92       	push	r4
    112e:	5f 92       	push	r5
    1130:	6f 92       	push	r6
    1132:	7f 92       	push	r7
    1134:	8f 92       	push	r8
    1136:	9f 92       	push	r9
    1138:	af 92       	push	r10
    113a:	bf 92       	push	r11
    113c:	cf 92       	push	r12
    113e:	df 92       	push	r13
    1140:	ef 92       	push	r14
    1142:	ff 92       	push	r15
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	ca 1b       	sub	r28, r26
    1152:	db 0b       	sbc	r29, r27
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	09 94       	ijmp

00001160 <__epilogue_restores__>:
    1160:	2a 88       	ldd	r2, Y+18	; 0x12
    1162:	39 88       	ldd	r3, Y+17	; 0x11
    1164:	48 88       	ldd	r4, Y+16	; 0x10
    1166:	5f 84       	ldd	r5, Y+15	; 0x0f
    1168:	6e 84       	ldd	r6, Y+14	; 0x0e
    116a:	7d 84       	ldd	r7, Y+13	; 0x0d
    116c:	8c 84       	ldd	r8, Y+12	; 0x0c
    116e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1170:	aa 84       	ldd	r10, Y+10	; 0x0a
    1172:	b9 84       	ldd	r11, Y+9	; 0x09
    1174:	c8 84       	ldd	r12, Y+8	; 0x08
    1176:	df 80       	ldd	r13, Y+7	; 0x07
    1178:	ee 80       	ldd	r14, Y+6	; 0x06
    117a:	fd 80       	ldd	r15, Y+5	; 0x05
    117c:	0c 81       	ldd	r16, Y+4	; 0x04
    117e:	1b 81       	ldd	r17, Y+3	; 0x03
    1180:	aa 81       	ldd	r26, Y+2	; 0x02
    1182:	b9 81       	ldd	r27, Y+1	; 0x01
    1184:	ce 0f       	add	r28, r30
    1186:	d1 1d       	adc	r29, r1
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	ed 01       	movw	r28, r26
    1194:	08 95       	ret

00001196 <__udivmodsi4>:
    1196:	a1 e2       	ldi	r26, 0x21	; 33
    1198:	1a 2e       	mov	r1, r26
    119a:	aa 1b       	sub	r26, r26
    119c:	bb 1b       	sub	r27, r27
    119e:	fd 01       	movw	r30, r26
    11a0:	0d c0       	rjmp	.+26     	; 0x11bc <__udivmodsi4_ep>

000011a2 <__udivmodsi4_loop>:
    11a2:	aa 1f       	adc	r26, r26
    11a4:	bb 1f       	adc	r27, r27
    11a6:	ee 1f       	adc	r30, r30
    11a8:	ff 1f       	adc	r31, r31
    11aa:	a2 17       	cp	r26, r18
    11ac:	b3 07       	cpc	r27, r19
    11ae:	e4 07       	cpc	r30, r20
    11b0:	f5 07       	cpc	r31, r21
    11b2:	20 f0       	brcs	.+8      	; 0x11bc <__udivmodsi4_ep>
    11b4:	a2 1b       	sub	r26, r18
    11b6:	b3 0b       	sbc	r27, r19
    11b8:	e4 0b       	sbc	r30, r20
    11ba:	f5 0b       	sbc	r31, r21

000011bc <__udivmodsi4_ep>:
    11bc:	66 1f       	adc	r22, r22
    11be:	77 1f       	adc	r23, r23
    11c0:	88 1f       	adc	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	1a 94       	dec	r1
    11c6:	69 f7       	brne	.-38     	; 0x11a2 <__udivmodsi4_loop>
    11c8:	60 95       	com	r22
    11ca:	70 95       	com	r23
    11cc:	80 95       	com	r24
    11ce:	90 95       	com	r25
    11d0:	9b 01       	movw	r18, r22
    11d2:	ac 01       	movw	r20, r24
    11d4:	bd 01       	movw	r22, r26
    11d6:	cf 01       	movw	r24, r30
    11d8:	08 95       	ret

000011da <_exit>:
    11da:	f8 94       	cli

000011dc <__stop_program>:
    11dc:	ff cf       	rjmp	.-2      	; 0x11dc <__stop_program>
