
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  00000af2  00000b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080020e  0080020e  00000c94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001984  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b75  00000000  00000000  000027d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e13  00000000  00000000  0000334d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00004160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d7  00000000  00000000  00004484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000120c  00000000  00000000  00004b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005d67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__vector_14>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	12 e0       	ldi	r17, 0x02	; 2
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e2 ef       	ldi	r30, 0xF2	; 242
  bc:	fa e0       	ldi	r31, 0x0A	; 10
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	ae 30       	cpi	r26, 0x0E	; 14
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	22 e0       	ldi	r18, 0x02	; 2
  cc:	ae e0       	ldi	r26, 0x0E	; 14
  ce:	b2 e0       	ldi	r27, 0x02	; 2
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a7 31       	cpi	r26, 0x17	; 23
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 27 03 	call	0x64e	; 0x64e <main>
  de:	0c 94 77 05 	jmp	0xaee	; 0xaee <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <KeypadUpdate>:
uint8_t KeypadUpdate(void)
{
    uint8_t fila, col;

    // Primero, ponemos todas las filas en alto (salida '1')
    PORTB |= (1 << PB0) | (1 << PB3) | (1 << PB4);
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	89 61       	ori	r24, 0x19	; 25
  ea:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << PD7);
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	8b b9       	out	0x0b, r24	; 11

    for (fila = 0; fila < 4; fila++){
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	46 c0       	rjmp	.+140    	; 0x182 <KeypadUpdate+0x9c>
        // Apago la fila actual (salida '0')
        switch (fila)
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	51 f0       	breq	.+20     	; 0x10e <KeypadUpdate+0x28>
  fa:	28 f0       	brcs	.+10     	; 0x106 <KeypadUpdate+0x20>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	59 f0       	breq	.+22     	; 0x116 <KeypadUpdate+0x30>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	69 f0       	breq	.+26     	; 0x11e <KeypadUpdate+0x38>
 104:	0f c0       	rjmp	.+30     	; 0x124 <KeypadUpdate+0x3e>
        {
        case 0:
            PORTB &= ~(1 << PB4);
 106:	95 b1       	in	r25, 0x05	; 5
 108:	9f 7e       	andi	r25, 0xEF	; 239
 10a:	95 b9       	out	0x05, r25	; 5
            break;
 10c:	0b c0       	rjmp	.+22     	; 0x124 <KeypadUpdate+0x3e>
        case 1:
            PORTB &= ~(1 << PB3);
 10e:	95 b1       	in	r25, 0x05	; 5
 110:	97 7f       	andi	r25, 0xF7	; 247
 112:	95 b9       	out	0x05, r25	; 5
            break;
 114:	07 c0       	rjmp	.+14     	; 0x124 <KeypadUpdate+0x3e>
        case 2:
            PORTB &= ~(1 << PB0);
 116:	95 b1       	in	r25, 0x05	; 5
 118:	9e 7f       	andi	r25, 0xFE	; 254
 11a:	95 b9       	out	0x05, r25	; 5
            break;
 11c:	03 c0       	rjmp	.+6      	; 0x124 <KeypadUpdate+0x3e>
        case 3:
            PORTD &= ~(1 << PD7);
 11e:	9b b1       	in	r25, 0x0b	; 11
 120:	9f 77       	andi	r25, 0x7F	; 127
 122:	9b b9       	out	0x0b, r25	; 11
            break;
        }

        // Escaneo las columnas
        if (!(PIND & (1 << PD3)))
 124:	4b 99       	sbic	0x09, 3	; 9
 126:	03 c0       	rjmp	.+6      	; 0x12e <KeypadUpdate+0x48>
            return (fila * 4 + 0); // Columna 0
 128:	88 0f       	add	r24, r24
 12a:	88 0f       	add	r24, r24
 12c:	08 95       	ret
        if (!(PIND & (1 << PD5)))
 12e:	4d 99       	sbic	0x09, 5	; 9
 130:	04 c0       	rjmp	.+8      	; 0x13a <KeypadUpdate+0x54>
            return (fila * 4 + 1); // Columna 1
 132:	88 0f       	add	r24, r24
 134:	88 0f       	add	r24, r24
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	08 95       	ret
        if (!(PIND & (1 << PD4)))
 13a:	4c 99       	sbic	0x09, 4	; 9
 13c:	04 c0       	rjmp	.+8      	; 0x146 <KeypadUpdate+0x60>
            return (fila * 4 + 2); // Columna 2
 13e:	88 0f       	add	r24, r24
 140:	88 0f       	add	r24, r24
 142:	8e 5f       	subi	r24, 0xFE	; 254
 144:	08 95       	ret
        if (!(PIND & (1 << PD2)))
 146:	4a 99       	sbic	0x09, 2	; 9
 148:	04 c0       	rjmp	.+8      	; 0x152 <KeypadUpdate+0x6c>
            return (fila * 4 + 3); // Columna 3
 14a:	88 0f       	add	r24, r24
 14c:	88 0f       	add	r24, r24
 14e:	8d 5f       	subi	r24, 0xFD	; 253
 150:	08 95       	ret

        // Vuelvo a poner la fila en alto antes de la siguiente iteracion
        switch (fila)
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	51 f0       	breq	.+20     	; 0x16a <KeypadUpdate+0x84>
 156:	28 f0       	brcs	.+10     	; 0x162 <KeypadUpdate+0x7c>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	59 f0       	breq	.+22     	; 0x172 <KeypadUpdate+0x8c>
 15c:	83 30       	cpi	r24, 0x03	; 3
 15e:	69 f0       	breq	.+26     	; 0x17a <KeypadUpdate+0x94>
 160:	0f c0       	rjmp	.+30     	; 0x180 <KeypadUpdate+0x9a>
        {
        case 0:
            PORTB |= (1 << PB4);
 162:	95 b1       	in	r25, 0x05	; 5
 164:	90 61       	ori	r25, 0x10	; 16
 166:	95 b9       	out	0x05, r25	; 5
            break;
 168:	0b c0       	rjmp	.+22     	; 0x180 <KeypadUpdate+0x9a>
        case 1:
            PORTB |= (1 << PB3);
 16a:	95 b1       	in	r25, 0x05	; 5
 16c:	98 60       	ori	r25, 0x08	; 8
 16e:	95 b9       	out	0x05, r25	; 5
            break;
 170:	07 c0       	rjmp	.+14     	; 0x180 <KeypadUpdate+0x9a>
        case 2:
            PORTB |= (1 << PB0);
 172:	95 b1       	in	r25, 0x05	; 5
 174:	91 60       	ori	r25, 0x01	; 1
 176:	95 b9       	out	0x05, r25	; 5
            break;
 178:	03 c0       	rjmp	.+6      	; 0x180 <KeypadUpdate+0x9a>
        case 3:
            PORTD |= (1 << PD7);
 17a:	9b b1       	in	r25, 0x0b	; 11
 17c:	90 68       	ori	r25, 0x80	; 128
 17e:	9b b9       	out	0x0b, r25	; 11

    // Primero, ponemos todas las filas en alto (salida '1')
    PORTB |= (1 << PB0) | (1 << PB3) | (1 << PB4);
    PORTD |= (1 << PD7);

    for (fila = 0; fila < 4; fila++){
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	84 30       	cpi	r24, 0x04	; 4
 184:	08 f4       	brcc	.+2      	; 0x188 <KeypadUpdate+0xa2>
 186:	b7 cf       	rjmp	.-146    	; 0xf6 <KeypadUpdate+0x10>
        case 3:
            PORTD |= (1 << PD7);
            break;
        }
    }
    return 0xFF; // No se presiono tecla
 188:	8f ef       	ldi	r24, 0xFF	; 255
}
 18a:	08 95       	ret

0000018c <KEYPAD_Scan>:

uint8_t KEYPAD_Scan(uint8_t *pkey){
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
    static uint8_t Old_key = 0xFF, Last_valid_key = 0xFF;
    uint8_t Key;

    Key = KeypadUpdate(); // Esta funcion la tenos que implementar o conectar
 192:	0e 94 73 00 	call	0xe6	; 0xe6 <KeypadUpdate>

    if (Key == 0xFF){
 196:	8f 3f       	cpi	r24, 0xFF	; 255
 198:	31 f4       	brne	.+12     	; 0x1a6 <KEYPAD_Scan+0x1a>
        Old_key = 0xFF;
 19a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Old_key.1628>
        Last_valid_key = 0xFF;
 19e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Last_valid_key.1629>
        return 0;
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	10 c0       	rjmp	.+32     	; 0x1c6 <KEYPAD_Scan+0x3a>
    }

    if (Key == Old_key){
 1a6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Old_key.1628>
 1aa:	89 13       	cpse	r24, r25
 1ac:	09 c0       	rjmp	.+18     	; 0x1c0 <KEYPAD_Scan+0x34>
        if (Key != Last_valid_key){
 1ae:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Last_valid_key.1629>
 1b2:	89 17       	cp	r24, r25
 1b4:	29 f0       	breq	.+10     	; 0x1c0 <KEYPAD_Scan+0x34>
            *pkey = Key;
 1b6:	88 83       	st	Y, r24
            Last_valid_key = Key;
 1b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Last_valid_key.1629>
            return 1;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <KEYPAD_Scan+0x3a>
        }
    }

    Old_key = Key;
 1c0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Old_key.1628>
    return 0;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <keypad_init>:

void keypad_init(void){
    // Filas como salidas
    DDRB |= (1 << PB0) | (1 << PB3) | (1 << PB4);
 1cc:	84 b1       	in	r24, 0x04	; 4
 1ce:	89 61       	ori	r24, 0x19	; 25
 1d0:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << PD7);
 1d2:	8a b1       	in	r24, 0x0a	; 10
 1d4:	80 68       	ori	r24, 0x80	; 128
 1d6:	8a b9       	out	0x0a, r24	; 10

    // Columnas como entradas con pull-up
    DDRD &= ~((1 << PD2) | (1 << PD3) | (1 << PD4) | (1 << PD5));
 1d8:	8a b1       	in	r24, 0x0a	; 10
 1da:	83 7c       	andi	r24, 0xC3	; 195
 1dc:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << PD2) | (1 << PD3) | (1 << PD4) | (1 << PD5);
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	8c 63       	ori	r24, 0x3C	; 60
 1e2:	8b b9       	out	0x0b, r24	; 11
 1e4:	08 95       	ret

000001e6 <LCDsendChar>:
		}

		// write character to display
		LCDsendChar(c);
	}
}
 1e6:	65 b1       	in	r22, 0x05	; 5
 1e8:	98 2f       	mov	r25, r24
 1ea:	90 74       	andi	r25, 0x40	; 64
 1ec:	49 2f       	mov	r20, r25
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	55 95       	asr	r21
 1f2:	47 95       	ror	r20
 1f4:	55 95       	asr	r21
 1f6:	47 95       	ror	r20
 1f8:	55 95       	asr	r21
 1fa:	47 95       	ror	r20
 1fc:	55 95       	asr	r21
 1fe:	47 95       	ror	r20
 200:	98 2f       	mov	r25, r24
 202:	90 78       	andi	r25, 0x80	; 128
 204:	29 2f       	mov	r18, r25
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	02 2e       	mov	r0, r18
 20a:	23 2f       	mov	r18, r19
 20c:	00 0c       	add	r0, r0
 20e:	22 1f       	adc	r18, r18
 210:	33 0b       	sbc	r19, r19
 212:	00 0c       	add	r0, r0
 214:	22 1f       	adc	r18, r18
 216:	33 1f       	adc	r19, r19
 218:	96 2f       	mov	r25, r22
 21a:	99 7f       	andi	r25, 0xF9	; 249
 21c:	49 2b       	or	r20, r25
 21e:	24 2b       	or	r18, r20
 220:	25 b9       	out	0x05, r18	; 5
 222:	68 b1       	in	r22, 0x08	; 8
 224:	98 2f       	mov	r25, r24
 226:	90 71       	andi	r25, 0x10	; 16
 228:	49 2f       	mov	r20, r25
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	55 95       	asr	r21
 22e:	47 95       	ror	r20
 230:	55 95       	asr	r21
 232:	47 95       	ror	r20
 234:	55 95       	asr	r21
 236:	47 95       	ror	r20
 238:	98 2f       	mov	r25, r24
 23a:	90 72       	andi	r25, 0x20	; 32
 23c:	29 2f       	mov	r18, r25
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	35 95       	asr	r19
 242:	27 95       	ror	r18
 244:	35 95       	asr	r19
 246:	27 95       	ror	r18
 248:	35 95       	asr	r19
 24a:	27 95       	ror	r18
 24c:	96 2f       	mov	r25, r22
 24e:	99 7f       	andi	r25, 0xF9	; 249
 250:	49 2b       	or	r20, r25
 252:	24 2b       	or	r18, r20
 254:	28 b9       	out	0x08, r18	; 8
 256:	9b b1       	in	r25, 0x0b	; 11
 258:	92 60       	ori	r25, 0x02	; 2
 25a:	9b b9       	out	0x0b, r25	; 11
 25c:	9b b1       	in	r25, 0x0b	; 11
 25e:	91 60       	ori	r25, 0x01	; 1
 260:	9b b9       	out	0x0b, r25	; 11
 262:	25 ed       	ldi	r18, 0xD5	; 213
 264:	2a 95       	dec	r18
 266:	f1 f7       	brne	.-4      	; 0x264 <LCDsendChar+0x7e>
 268:	00 00       	nop
 26a:	9b b1       	in	r25, 0x0b	; 11
 26c:	9e 7f       	andi	r25, 0xFE	; 254
 26e:	9b b9       	out	0x0b, r25	; 11
 270:	9b b1       	in	r25, 0x0b	; 11
 272:	9d 7f       	andi	r25, 0xFD	; 253
 274:	9b b9       	out	0x0b, r25	; 11
 276:	95 ed       	ldi	r25, 0xD5	; 213
 278:	9a 95       	dec	r25
 27a:	f1 f7       	brne	.-4      	; 0x278 <LCDsendChar+0x92>
 27c:	00 00       	nop
 27e:	65 b1       	in	r22, 0x05	; 5
 280:	20 e1       	ldi	r18, 0x10	; 16
 282:	82 9f       	mul	r24, r18
 284:	c0 01       	movw	r24, r0
 286:	11 24       	eor	r1, r1
 288:	ac 01       	movw	r20, r24
 28a:	40 74       	andi	r20, 0x40	; 64
 28c:	55 27       	eor	r21, r21
 28e:	55 95       	asr	r21
 290:	47 95       	ror	r20
 292:	55 95       	asr	r21
 294:	47 95       	ror	r20
 296:	55 95       	asr	r21
 298:	47 95       	ror	r20
 29a:	55 95       	asr	r21
 29c:	47 95       	ror	r20
 29e:	9c 01       	movw	r18, r24
 2a0:	20 78       	andi	r18, 0x80	; 128
 2a2:	33 27       	eor	r19, r19
 2a4:	02 2e       	mov	r0, r18
 2a6:	23 2f       	mov	r18, r19
 2a8:	00 0c       	add	r0, r0
 2aa:	22 1f       	adc	r18, r18
 2ac:	33 0b       	sbc	r19, r19
 2ae:	00 0c       	add	r0, r0
 2b0:	22 1f       	adc	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	36 2f       	mov	r19, r22
 2b6:	39 7f       	andi	r19, 0xF9	; 249
 2b8:	43 2b       	or	r20, r19
 2ba:	24 2b       	or	r18, r20
 2bc:	25 b9       	out	0x05, r18	; 5
 2be:	48 b1       	in	r20, 0x08	; 8
 2c0:	9c 01       	movw	r18, r24
 2c2:	20 71       	andi	r18, 0x10	; 16
 2c4:	33 27       	eor	r19, r19
 2c6:	35 95       	asr	r19
 2c8:	27 95       	ror	r18
 2ca:	35 95       	asr	r19
 2cc:	27 95       	ror	r18
 2ce:	35 95       	asr	r19
 2d0:	27 95       	ror	r18
 2d2:	80 72       	andi	r24, 0x20	; 32
 2d4:	99 27       	eor	r25, r25
 2d6:	95 95       	asr	r25
 2d8:	87 95       	ror	r24
 2da:	95 95       	asr	r25
 2dc:	87 95       	ror	r24
 2de:	95 95       	asr	r25
 2e0:	87 95       	ror	r24
 2e2:	94 2f       	mov	r25, r20
 2e4:	99 7f       	andi	r25, 0xF9	; 249
 2e6:	29 2b       	or	r18, r25
 2e8:	82 2b       	or	r24, r18
 2ea:	88 b9       	out	0x08, r24	; 8
 2ec:	8b b1       	in	r24, 0x0b	; 11
 2ee:	82 60       	ori	r24, 0x02	; 2
 2f0:	8b b9       	out	0x0b, r24	; 11
 2f2:	8b b1       	in	r24, 0x0b	; 11
 2f4:	81 60       	ori	r24, 0x01	; 1
 2f6:	8b b9       	out	0x0b, r24	; 11
 2f8:	85 ed       	ldi	r24, 0xD5	; 213
 2fa:	8a 95       	dec	r24
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCDsendChar+0x114>
 2fe:	00 00       	nop
 300:	8b b1       	in	r24, 0x0b	; 11
 302:	8e 7f       	andi	r24, 0xFE	; 254
 304:	8b b9       	out	0x0b, r24	; 11
 306:	8b b1       	in	r24, 0x0b	; 11
 308:	8d 7f       	andi	r24, 0xFD	; 253
 30a:	8b b9       	out	0x0b, r24	; 11
 30c:	95 ed       	ldi	r25, 0xD5	; 213
 30e:	9a 95       	dec	r25
 310:	f1 f7       	brne	.-4      	; 0x30e <LCDsendChar+0x128>
 312:	00 00       	nop
 314:	08 95       	ret

00000316 <LCDsendCommand>:
 316:	65 b1       	in	r22, 0x05	; 5
 318:	98 2f       	mov	r25, r24
 31a:	90 74       	andi	r25, 0x40	; 64
 31c:	49 2f       	mov	r20, r25
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	55 95       	asr	r21
 322:	47 95       	ror	r20
 324:	55 95       	asr	r21
 326:	47 95       	ror	r20
 328:	55 95       	asr	r21
 32a:	47 95       	ror	r20
 32c:	55 95       	asr	r21
 32e:	47 95       	ror	r20
 330:	98 2f       	mov	r25, r24
 332:	90 78       	andi	r25, 0x80	; 128
 334:	29 2f       	mov	r18, r25
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	02 2e       	mov	r0, r18
 33a:	23 2f       	mov	r18, r19
 33c:	00 0c       	add	r0, r0
 33e:	22 1f       	adc	r18, r18
 340:	33 0b       	sbc	r19, r19
 342:	00 0c       	add	r0, r0
 344:	22 1f       	adc	r18, r18
 346:	33 1f       	adc	r19, r19
 348:	96 2f       	mov	r25, r22
 34a:	99 7f       	andi	r25, 0xF9	; 249
 34c:	49 2b       	or	r20, r25
 34e:	24 2b       	or	r18, r20
 350:	25 b9       	out	0x05, r18	; 5
 352:	68 b1       	in	r22, 0x08	; 8
 354:	98 2f       	mov	r25, r24
 356:	90 71       	andi	r25, 0x10	; 16
 358:	49 2f       	mov	r20, r25
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	55 95       	asr	r21
 35e:	47 95       	ror	r20
 360:	55 95       	asr	r21
 362:	47 95       	ror	r20
 364:	55 95       	asr	r21
 366:	47 95       	ror	r20
 368:	98 2f       	mov	r25, r24
 36a:	90 72       	andi	r25, 0x20	; 32
 36c:	29 2f       	mov	r18, r25
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	35 95       	asr	r19
 372:	27 95       	ror	r18
 374:	35 95       	asr	r19
 376:	27 95       	ror	r18
 378:	35 95       	asr	r19
 37a:	27 95       	ror	r18
 37c:	96 2f       	mov	r25, r22
 37e:	99 7f       	andi	r25, 0xF9	; 249
 380:	49 2b       	or	r20, r25
 382:	24 2b       	or	r18, r20
 384:	28 b9       	out	0x08, r18	; 8
 386:	9b b1       	in	r25, 0x0b	; 11
 388:	91 60       	ori	r25, 0x01	; 1
 38a:	9b b9       	out	0x0b, r25	; 11
 38c:	ef e9       	ldi	r30, 0x9F	; 159
 38e:	ff e0       	ldi	r31, 0x0F	; 15
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCDsendCommand+0x7a>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCDsendCommand+0x80>
 396:	00 00       	nop
 398:	9b b1       	in	r25, 0x0b	; 11
 39a:	9e 7f       	andi	r25, 0xFE	; 254
 39c:	9b b9       	out	0x0b, r25	; 11
 39e:	ef e9       	ldi	r30, 0x9F	; 159
 3a0:	ff e0       	ldi	r31, 0x0F	; 15
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCDsendCommand+0x8c>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCDsendCommand+0x92>
 3a8:	00 00       	nop
 3aa:	65 b1       	in	r22, 0x05	; 5
 3ac:	f0 e1       	ldi	r31, 0x10	; 16
 3ae:	8f 9f       	mul	r24, r31
 3b0:	c0 01       	movw	r24, r0
 3b2:	11 24       	eor	r1, r1
 3b4:	ac 01       	movw	r20, r24
 3b6:	40 74       	andi	r20, 0x40	; 64
 3b8:	55 27       	eor	r21, r21
 3ba:	55 95       	asr	r21
 3bc:	47 95       	ror	r20
 3be:	55 95       	asr	r21
 3c0:	47 95       	ror	r20
 3c2:	55 95       	asr	r21
 3c4:	47 95       	ror	r20
 3c6:	55 95       	asr	r21
 3c8:	47 95       	ror	r20
 3ca:	9c 01       	movw	r18, r24
 3cc:	20 78       	andi	r18, 0x80	; 128
 3ce:	33 27       	eor	r19, r19
 3d0:	02 2e       	mov	r0, r18
 3d2:	23 2f       	mov	r18, r19
 3d4:	00 0c       	add	r0, r0
 3d6:	22 1f       	adc	r18, r18
 3d8:	33 0b       	sbc	r19, r19
 3da:	00 0c       	add	r0, r0
 3dc:	22 1f       	adc	r18, r18
 3de:	33 1f       	adc	r19, r19
 3e0:	36 2f       	mov	r19, r22
 3e2:	39 7f       	andi	r19, 0xF9	; 249
 3e4:	43 2b       	or	r20, r19
 3e6:	24 2b       	or	r18, r20
 3e8:	25 b9       	out	0x05, r18	; 5
 3ea:	48 b1       	in	r20, 0x08	; 8
 3ec:	9c 01       	movw	r18, r24
 3ee:	20 71       	andi	r18, 0x10	; 16
 3f0:	33 27       	eor	r19, r19
 3f2:	35 95       	asr	r19
 3f4:	27 95       	ror	r18
 3f6:	35 95       	asr	r19
 3f8:	27 95       	ror	r18
 3fa:	35 95       	asr	r19
 3fc:	27 95       	ror	r18
 3fe:	80 72       	andi	r24, 0x20	; 32
 400:	99 27       	eor	r25, r25
 402:	95 95       	asr	r25
 404:	87 95       	ror	r24
 406:	95 95       	asr	r25
 408:	87 95       	ror	r24
 40a:	95 95       	asr	r25
 40c:	87 95       	ror	r24
 40e:	94 2f       	mov	r25, r20
 410:	99 7f       	andi	r25, 0xF9	; 249
 412:	29 2b       	or	r18, r25
 414:	82 2b       	or	r24, r18
 416:	88 b9       	out	0x08, r24	; 8
 418:	8b b1       	in	r24, 0x0b	; 11
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	8b b9       	out	0x0b, r24	; 11
 41e:	8f e9       	ldi	r24, 0x9F	; 159
 420:	9f e0       	ldi	r25, 0x0F	; 15
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	8b b1       	in	r24, 0x0b	; 11
 42c:	8e 7f       	andi	r24, 0xFE	; 254
 42e:	8b b9       	out	0x0b, r24	; 11
 430:	ef e9       	ldi	r30, 0x9F	; 159
 432:	ff e0       	ldi	r31, 0x0F	; 15
 434:	31 97       	sbiw	r30, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
 43c:	08 95       	ret

0000043e <LCDclr>:
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 8b 01 	call	0x316	; 0x316 <LCDsendCommand>
 444:	08 95       	ret

00000446 <LCDhome>:
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	0e 94 8b 01 	call	0x316	; 0x316 <LCDsendCommand>
 44c:	08 95       	ret

0000044e <LCDstring>:
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	00 97       	sbiw	r24, 0x00	; 0
 458:	69 f0       	breq	.+26     	; 0x474 <LCDstring+0x26>
 45a:	d6 2f       	mov	r29, r22
 45c:	8c 01       	movw	r16, r24
 45e:	c0 e0       	ldi	r28, 0x00	; 0
 460:	07 c0       	rjmp	.+14     	; 0x470 <LCDstring+0x22>
 462:	f8 01       	movw	r30, r16
 464:	ec 0f       	add	r30, r28
 466:	f1 1d       	adc	r31, r1
 468:	80 81       	ld	r24, Z
 46a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCDsendChar>
 46e:	cf 5f       	subi	r28, 0xFF	; 255
 470:	cd 17       	cp	r28, r29
 472:	b8 f3       	brcs	.-18     	; 0x462 <LCDstring+0x14>
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	08 95       	ret

0000047e <LCDGotoXY>:
 47e:	62 30       	cpi	r22, 0x02	; 2
 480:	31 f0       	breq	.+12     	; 0x48e <LCDGotoXY+0x10>
 482:	63 30       	cpi	r22, 0x03	; 3
 484:	31 f0       	breq	.+12     	; 0x492 <LCDGotoXY+0x14>
 486:	61 30       	cpi	r22, 0x01	; 1
 488:	29 f4       	brne	.+10     	; 0x494 <LCDGotoXY+0x16>
 48a:	80 5c       	subi	r24, 0xC0	; 192
 48c:	03 c0       	rjmp	.+6      	; 0x494 <LCDGotoXY+0x16>
 48e:	8c 5e       	subi	r24, 0xEC	; 236
 490:	01 c0       	rjmp	.+2      	; 0x494 <LCDGotoXY+0x16>
 492:	8c 5a       	subi	r24, 0xAC	; 172
 494:	80 68       	ori	r24, 0x80	; 128
 496:	0e 94 8b 01 	call	0x316	; 0x316 <LCDsendCommand>
 49a:	08 95       	ret

0000049c <LCDdefinechar>:
 49c:	ef 92       	push	r14
 49e:	ff 92       	push	r15
 4a0:	0f 93       	push	r16
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	7c 01       	movw	r14, r24
 4aa:	86 2f       	mov	r24, r22
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	80 64       	ori	r24, 0x40	; 64
 4bc:	c0 e0       	ldi	r28, 0x00	; 0
 4be:	d0 e0       	ldi	r29, 0x00	; 0
 4c0:	0d c0       	rjmp	.+26     	; 0x4dc <LCDdefinechar+0x40>
 4c2:	f7 01       	movw	r30, r14
 4c4:	ec 0f       	add	r30, r28
 4c6:	fd 1f       	adc	r31, r29
 4c8:	14 91       	lpm	r17, Z
 4ca:	01 e0       	ldi	r16, 0x01	; 1
 4cc:	08 0f       	add	r16, r24
 4ce:	0e 94 8b 01 	call	0x316	; 0x316 <LCDsendCommand>
 4d2:	81 2f       	mov	r24, r17
 4d4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCDsendChar>
 4d8:	21 96       	adiw	r28, 0x01	; 1
 4da:	80 2f       	mov	r24, r16
 4dc:	c8 30       	cpi	r28, 0x08	; 8
 4de:	d1 05       	cpc	r29, r1
 4e0:	80 f3       	brcs	.-32     	; 0x4c2 <LCDdefinechar+0x26>
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	1f 91       	pop	r17
 4e8:	0f 91       	pop	r16
 4ea:	ff 90       	pop	r15
 4ec:	ef 90       	pop	r14
 4ee:	08 95       	ret

000004f0 <LCDinit>:
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	8f e5       	ldi	r24, 0x5F	; 95
 4f6:	9a ee       	ldi	r25, 0xEA	; 234
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <LCDinit+0x8>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <LCDinit+0xe>
 4fe:	00 00       	nop
 500:	85 b1       	in	r24, 0x05	; 5
 502:	89 7f       	andi	r24, 0xF9	; 249
 504:	85 b9       	out	0x05, r24	; 5
 506:	88 b1       	in	r24, 0x08	; 8
 508:	89 7f       	andi	r24, 0xF9	; 249
 50a:	88 b9       	out	0x08, r24	; 8
 50c:	1b b8       	out	0x0b, r1	; 11
 50e:	84 b1       	in	r24, 0x04	; 4
 510:	86 60       	ori	r24, 0x06	; 6
 512:	84 b9       	out	0x04, r24	; 4
 514:	87 b1       	in	r24, 0x07	; 7
 516:	86 60       	ori	r24, 0x06	; 6
 518:	87 b9       	out	0x07, r24	; 7
 51a:	8a b1       	in	r24, 0x0a	; 10
 51c:	83 60       	ori	r24, 0x03	; 3
 51e:	8a b9       	out	0x0a, r24	; 10
 520:	85 b1       	in	r24, 0x05	; 5
 522:	89 7f       	andi	r24, 0xF9	; 249
 524:	85 b9       	out	0x05, r24	; 5
 526:	88 b1       	in	r24, 0x08	; 8
 528:	86 60       	ori	r24, 0x06	; 6
 52a:	88 b9       	out	0x08, r24	; 8
 52c:	8b b1       	in	r24, 0x0b	; 11
 52e:	81 60       	ori	r24, 0x01	; 1
 530:	8b b9       	out	0x0b, r24	; 11
 532:	8f e9       	ldi	r24, 0x9F	; 159
 534:	9f e0       	ldi	r25, 0x0F	; 15
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <LCDinit+0x46>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <LCDinit+0x4c>
 53c:	00 00       	nop
 53e:	8b b1       	in	r24, 0x0b	; 11
 540:	8e 7f       	andi	r24, 0xFE	; 254
 542:	8b b9       	out	0x0b, r24	; 11
 544:	8f e9       	ldi	r24, 0x9F	; 159
 546:	9f e0       	ldi	r25, 0x0F	; 15
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <LCDinit+0x58>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <LCDinit+0x5e>
 54e:	00 00       	nop
 550:	85 b1       	in	r24, 0x05	; 5
 552:	89 7f       	andi	r24, 0xF9	; 249
 554:	85 b9       	out	0x05, r24	; 5
 556:	88 b1       	in	r24, 0x08	; 8
 558:	86 60       	ori	r24, 0x06	; 6
 55a:	88 b9       	out	0x08, r24	; 8
 55c:	8b b1       	in	r24, 0x0b	; 11
 55e:	81 60       	ori	r24, 0x01	; 1
 560:	8b b9       	out	0x0b, r24	; 11
 562:	8f e9       	ldi	r24, 0x9F	; 159
 564:	9f e0       	ldi	r25, 0x0F	; 15
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <LCDinit+0x76>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <LCDinit+0x7c>
 56c:	00 00       	nop
 56e:	8b b1       	in	r24, 0x0b	; 11
 570:	8e 7f       	andi	r24, 0xFE	; 254
 572:	8b b9       	out	0x0b, r24	; 11
 574:	8f e9       	ldi	r24, 0x9F	; 159
 576:	9f e0       	ldi	r25, 0x0F	; 15
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	f1 f7       	brne	.-4      	; 0x578 <LCDinit+0x88>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <LCDinit+0x8e>
 57e:	00 00       	nop
 580:	85 b1       	in	r24, 0x05	; 5
 582:	89 7f       	andi	r24, 0xF9	; 249
 584:	85 b9       	out	0x05, r24	; 5
 586:	88 b1       	in	r24, 0x08	; 8
 588:	89 7f       	andi	r24, 0xF9	; 249
 58a:	84 60       	ori	r24, 0x04	; 4
 58c:	88 b9       	out	0x08, r24	; 8
 58e:	8b b1       	in	r24, 0x0b	; 11
 590:	81 60       	ori	r24, 0x01	; 1
 592:	8b b9       	out	0x0b, r24	; 11
 594:	8f e9       	ldi	r24, 0x9F	; 159
 596:	9f e0       	ldi	r25, 0x0F	; 15
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <LCDinit+0xa8>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <LCDinit+0xae>
 59e:	00 00       	nop
 5a0:	8b b1       	in	r24, 0x0b	; 11
 5a2:	8e 7f       	andi	r24, 0xFE	; 254
 5a4:	8b b9       	out	0x0b, r24	; 11
 5a6:	8f e9       	ldi	r24, 0x9F	; 159
 5a8:	9f e0       	ldi	r25, 0x0F	; 15
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <LCDinit+0xba>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <LCDinit+0xc0>
 5b0:	00 00       	nop
 5b2:	88 e2       	ldi	r24, 0x28	; 40
 5b4:	0e 94 8b 01 	call	0x316	; 0x316 <LCDsendCommand>
 5b8:	8c e0       	ldi	r24, 0x0C	; 12
 5ba:	0e 94 8b 01 	call	0x316	; 0x316 <LCDsendCommand>
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	c0 e0       	ldi	r28, 0x00	; 0
 5c2:	0a c0       	rjmp	.+20     	; 0x5d8 <LCDinit+0xe8>
 5c4:	d1 e0       	ldi	r29, 0x01	; 1
 5c6:	d6 0f       	add	r29, r22
 5c8:	8c 2f       	mov	r24, r28
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	88 59       	subi	r24, 0x98	; 152
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	0e 94 4e 02 	call	0x49c	; 0x49c <LCDdefinechar>
 5d4:	c8 5f       	subi	r28, 0xF8	; 248
 5d6:	6d 2f       	mov	r22, r29
 5d8:	c0 34       	cpi	r28, 0x40	; 64
 5da:	a0 f3       	brcs	.-24     	; 0x5c4 <LCDinit+0xd4>
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	08 95       	ret

000005e2 <LCD_Init>:

void LCD_Init()
{
	LCDinit();
 5e2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCDinit>
	LCDclr();
 5e6:	0e 94 1f 02 	call	0x43e	; 0x43e <LCDclr>
	LCDhome();
 5ea:	0e 94 23 02 	call	0x446	; 0x446 <LCDhome>
 5ee:	08 95       	ret

000005f0 <get_random_word>:
	"Valor", "Verde", "YnHRz", "hARdD", "silla"};

uint8_t es_letra(char input)
{
	return (input > "1" && input < "9");
}
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	8c 01       	movw	r16, r24
 5f8:	c6 2f       	mov	r28, r22
 5fa:	0e 94 13 05 	call	0xa26	; 0xa26 <rand>
 5fe:	6c 2f       	mov	r22, r28
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	0e 94 90 04 	call	0x920	; 0x920 <__divmodhi4>
 606:	fc 01       	movw	r30, r24
 608:	ff 27       	eor	r31, r31
 60a:	ee 0f       	add	r30, r30
 60c:	ff 1f       	adc	r31, r31
 60e:	e0 0f       	add	r30, r16
 610:	f1 1f       	adc	r31, r17
 612:	80 81       	ld	r24, Z
 614:	91 81       	ldd	r25, Z+1	; 0x01
 616:	cf 91       	pop	r28
 618:	1f 91       	pop	r17
 61a:	0f 91       	pop	r16
 61c:	08 95       	ret

0000061e <update_input_number>:

void update_input_number(uint8_t *numero_ingresado, uint8_t key)
{
 61e:	dc 01       	movw	r26, r24
	if (key < 16)
 620:	60 31       	cpi	r22, 0x10	; 16
 622:	a0 f4       	brcc	.+40     	; 0x64c <update_input_number+0x2e>
	{
		char letra = KeyMap[key];
 624:	e6 2f       	mov	r30, r22
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	e2 50       	subi	r30, 0x02	; 2
 62a:	fe 4f       	sbci	r31, 0xFE	; 254
 62c:	90 81       	ld	r25, Z
		if (letra != TECLA_CONFIRMAR)
 62e:	93 32       	cpi	r25, 0x23	; 35
 630:	69 f0       	breq	.+26     	; 0x64c <update_input_number+0x2e>
		{
			// asumimos que sólo se permiten números
			if (letra >= '0' && letra <= '9')
 632:	80 ed       	ldi	r24, 0xD0	; 208
 634:	89 0f       	add	r24, r25
 636:	8a 30       	cpi	r24, 0x0A	; 10
 638:	48 f4       	brcc	.+18     	; 0x64c <update_input_number+0x2e>
			{
				*numero_ingresado = (*numero_ingresado * 10) + (letra - '0');
 63a:	8c 91       	ld	r24, X
 63c:	88 0f       	add	r24, r24
 63e:	28 2f       	mov	r18, r24
 640:	22 0f       	add	r18, r18
 642:	22 0f       	add	r18, r18
 644:	82 0f       	add	r24, r18
 646:	98 0f       	add	r25, r24
 648:	90 53       	subi	r25, 0x30	; 48
 64a:	9c 93       	st	X, r25
 64c:	08 95       	ret

0000064e <main>:
		}
	}
}

int main(void)
{
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	1f 92       	push	r1
 654:	cd b7       	in	r28, 0x3d	; 61
 656:	de b7       	in	r29, 0x3e	; 62
	timer0_init();
 658:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <timer0_init>
	sei();
 65c:	78 94       	sei
	LCD_Init();
 65e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 662:	2f ef       	ldi	r18, 0xFF	; 255
 664:	83 ec       	ldi	r24, 0xC3	; 195
 666:	99 e0       	ldi	r25, 0x09	; 9
 668:	21 50       	subi	r18, 0x01	; 1
 66a:	80 40       	sbci	r24, 0x00	; 0
 66c:	90 40       	sbci	r25, 0x00	; 0
 66e:	e1 f7       	brne	.-8      	; 0x668 <main+0x1a>
 670:	00 c0       	rjmp	.+0      	; 0x672 <main+0x24>
 672:	00 00       	nop
	_delay_ms(200);
	keypad_init();
 674:	0e 94 e6 00 	call	0x1cc	; 0x1cc <keypad_init>
	uint8_t key;

	while (1)
	{
		if (tick)
 678:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <tick>
 67c:	88 23       	and	r24, r24
 67e:	e1 f3       	breq	.-8      	; 0x678 <main+0x2a>
		{
			tick = 0; // Reiniciar flag
 680:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <tick>
			contador_ticks_estado++;
 684:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <contador_ticks_estado>
 688:	8f 5f       	subi	r24, 0xFF	; 255
 68a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <contador_ticks_estado>

			switch (estado_actual)
 68e:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <estado_actual>
 692:	92 30       	cpi	r25, 0x02	; 2
 694:	09 f4       	brne	.+2      	; 0x698 <main+0x4a>
 696:	8b c0       	rjmp	.+278    	; 0x7ae <main+0x160>
 698:	30 f4       	brcc	.+12     	; 0x6a6 <main+0x58>
 69a:	99 23       	and	r25, r25
 69c:	59 f0       	breq	.+22     	; 0x6b4 <main+0x66>
 69e:	91 30       	cpi	r25, 0x01	; 1
 6a0:	09 f4       	brne	.+2      	; 0x6a4 <main+0x56>
 6a2:	41 c0       	rjmp	.+130    	; 0x726 <main+0xd8>
 6a4:	e9 cf       	rjmp	.-46     	; 0x678 <main+0x2a>
 6a6:	93 30       	cpi	r25, 0x03	; 3
 6a8:	09 f4       	brne	.+2      	; 0x6ac <main+0x5e>
 6aa:	e2 c0       	rjmp	.+452    	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 6ac:	94 30       	cpi	r25, 0x04	; 4
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <main+0x64>
 6b0:	f9 c0       	rjmp	.+498    	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 6b2:	e2 cf       	rjmp	.-60     	; 0x678 <main+0x2a>
			{
			case INICIO:
				if (contador_ticks_estado == 1)
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	d9 f4       	brne	.+54     	; 0x6ee <main+0xa0>
				{
					// pantalla bienvenido
					LCDclr();
 6b8:	0e 94 1f 02 	call	0x43e	; 0x43e <LCDclr>
 6bc:	8f e3       	ldi	r24, 0x3F	; 63
 6be:	9f e1       	ldi	r25, 0x1F	; 31
 6c0:	01 97       	sbiw	r24, 0x01	; 1
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <main+0x72>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <main+0x78>
 6c6:	00 00       	nop
					_delay_ms(2);
					LCDstring((uint8_t *)"Bienvenido!!", 12);
 6c8:	6c e0       	ldi	r22, 0x0C	; 12
 6ca:	8e e3       	ldi	r24, 0x3E	; 62
 6cc:	91 e0       	ldi	r25, 0x01	; 1
 6ce:	0e 94 27 02 	call	0x44e	; 0x44e <LCDstring>
					LCDGotoXY(0, 1);
 6d2:	61 e0       	ldi	r22, 0x01	; 1
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	0e 94 3f 02 	call	0x47e	; 0x47e <LCDGotoXY>
					LCDstring((uint8_t *)"Presione *", 10);
 6da:	6a e0       	ldi	r22, 0x0A	; 10
 6dc:	8b e4       	ldi	r24, 0x4B	; 75
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	0e 94 27 02 	call	0x44e	; 0x44e <LCDstring>

					// indice actual de la contrasenia a ingresar

					pos_password = 0;
 6e4:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <pos_password>
					vidas = 3;
 6e8:	83 e0       	ldi	r24, 0x03	; 3
 6ea:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <vidas>
				}

				if (KEYPAD_Scan(&key))
 6ee:	ce 01       	movw	r24, r28
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	0e 94 c6 00 	call	0x18c	; 0x18c <KEYPAD_Scan>
 6f6:	88 23       	and	r24, r24
 6f8:	71 f0       	breq	.+28     	; 0x716 <main+0xc8>
				{
					if (key < 16 && KeyMap[key] == TECLA_INICIO)
 6fa:	e9 81       	ldd	r30, Y+1	; 0x01
 6fc:	e0 31       	cpi	r30, 0x10	; 16
 6fe:	58 f4       	brcc	.+22     	; 0x716 <main+0xc8>
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	e2 50       	subi	r30, 0x02	; 2
 704:	fe 4f       	sbci	r31, 0xFE	; 254
 706:	80 81       	ld	r24, Z
 708:	8a 32       	cpi	r24, 0x2A	; 42
 70a:	29 f4       	brne	.+10     	; 0x716 <main+0xc8>
					{
						estado_actual = INICIO_JUEGO;
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <estado_actual>
						contador_ticks_estado = 0;
 712:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <contador_ticks_estado>
					}
				}

				if (contador_ticks_estado >= 20) // 2 segundos (20 ticks de 100ms)
 716:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <contador_ticks_estado>
 71a:	84 31       	cpi	r24, 0x14	; 20
 71c:	08 f4       	brcc	.+2      	; 0x720 <main+0xd2>
 71e:	ac cf       	rjmp	.-168    	; 0x678 <main+0x2a>
					contador_ticks_estado = 0;	 // reiniciar ventana
 720:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <contador_ticks_estado>
 724:	a9 cf       	rjmp	.-174    	; 0x678 <main+0x2a>
				break;

			case INICIO_JUEGO:
				if (contador_ticks_estado == 1 && mostrar_palabra)
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	e9 f4       	brne	.+58     	; 0x764 <main+0x116>
 72a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <mostrar_palabra>
 72e:	88 23       	and	r24, r24
 730:	c9 f0       	breq	.+50     	; 0x764 <main+0x116>
				{
					LCDclr();
 732:	0e 94 1f 02 	call	0x43e	; 0x43e <LCDclr>
 736:	9f ef       	ldi	r25, 0xFF	; 255
 738:	20 e7       	ldi	r18, 0x70	; 112
 73a:	82 e0       	ldi	r24, 0x02	; 2
 73c:	91 50       	subi	r25, 0x01	; 1
 73e:	20 40       	sbci	r18, 0x00	; 0
 740:	80 40       	sbci	r24, 0x00	; 0
 742:	e1 f7       	brne	.-8      	; 0x73c <main+0xee>
 744:	00 c0       	rjmp	.+0      	; 0x746 <main+0xf8>
 746:	00 00       	nop
					_delay_ms(50);
					curr_word = get_random_word(diccionario, WORDS_SIZE);
 748:	69 e1       	ldi	r22, 0x19	; 25
 74a:	86 e0       	ldi	r24, 0x06	; 6
 74c:	91 e0       	ldi	r25, 0x01	; 1
 74e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <get_random_word>
 752:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <curr_word+0x1>
 756:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <curr_word>
					LCDstring((uint8_t *)curr_word, 5); // Mostrarla
 75a:	65 e0       	ldi	r22, 0x05	; 5
 75c:	0e 94 27 02 	call	0x44e	; 0x44e <LCDstring>
					mostrar_palabra = 0;
 760:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <mostrar_palabra>
				}

				if (contador_ticks_estado >= 20 && !mostrar_palabra)
 764:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <contador_ticks_estado>
 768:	84 31       	cpi	r24, 0x14	; 20
 76a:	08 f4       	brcc	.+2      	; 0x76e <main+0x120>
 76c:	85 cf       	rjmp	.-246    	; 0x678 <main+0x2a>
 76e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <mostrar_palabra>
 772:	81 11       	cpse	r24, r1
 774:	81 cf       	rjmp	.-254    	; 0x678 <main+0x2a>
				{			  // Despues de 2 segundos
					LCDclr(); // Borrar palabra
 776:	0e 94 1f 02 	call	0x43e	; 0x43e <LCDclr>
 77a:	9f ef       	ldi	r25, 0xFF	; 255
 77c:	20 e7       	ldi	r18, 0x70	; 112
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	91 50       	subi	r25, 0x01	; 1
 782:	20 40       	sbci	r18, 0x00	; 0
 784:	80 40       	sbci	r24, 0x00	; 0
 786:	e1 f7       	brne	.-8      	; 0x780 <main+0x132>
 788:	00 c0       	rjmp	.+0      	; 0x78a <main+0x13c>
 78a:	00 00       	nop
					_delay_ms(50);
					contador_ticks_estado = 0;
 78c:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <contador_ticks_estado>
					caracter = curr_word[pos_password]; // Obtener el caracter a ingresar
 790:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <pos_password>
 794:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <curr_word>
 798:	f0 91 16 02 	lds	r31, 0x0216	; 0x800216 <curr_word+0x1>
 79c:	e8 0f       	add	r30, r24
 79e:	f1 1d       	adc	r31, r1
 7a0:	80 81       	ld	r24, Z
 7a2:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <caracter>
					estado_actual = JUEGO;				// Cambiar a estado de juego
 7a6:	82 e0       	ldi	r24, 0x02	; 2
 7a8:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <estado_actual>
 7ac:	65 cf       	rjmp	.-310    	; 0x678 <main+0x2a>
				}
				break;

			case JUEGO:
				if (pos_password < 5)
 7ae:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <pos_password>
 7b2:	85 30       	cpi	r24, 0x05	; 5
 7b4:	08 f0       	brcs	.+2      	; 0x7b8 <main+0x16a>
 7b6:	60 cf       	rjmp	.-320    	; 0x678 <main+0x2a>
				{
					if (KEYPAD_Scan(&key))
 7b8:	ce 01       	movw	r24, r28
 7ba:	01 96       	adiw	r24, 0x01	; 1
 7bc:	0e 94 c6 00 	call	0x18c	; 0x18c <KEYPAD_Scan>
 7c0:	88 23       	and	r24, r24
 7c2:	09 f4       	brne	.+2      	; 0x7c6 <main+0x178>
 7c4:	59 cf       	rjmp	.-334    	; 0x678 <main+0x2a>
					{
						if (key < 16)
 7c6:	69 81       	ldd	r22, Y+1	; 0x01
 7c8:	60 31       	cpi	r22, 0x10	; 16
 7ca:	78 f4       	brcc	.+30     	; 0x7ea <main+0x19c>
						{
							if (KeyMap[key] != TECLA_CONFIRMAR)
 7cc:	e6 2f       	mov	r30, r22
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	e2 50       	subi	r30, 0x02	; 2
 7d2:	fe 4f       	sbci	r31, 0xFE	; 254
 7d4:	80 81       	ld	r24, Z
 7d6:	83 32       	cpi	r24, 0x23	; 35
 7d8:	41 f0       	breq	.+16     	; 0x7ea <main+0x19c>
							{
								if (pos_password)
 7da:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <pos_password>
 7de:	88 23       	and	r24, r24
 7e0:	21 f0       	breq	.+8      	; 0x7ea <main+0x19c>
									update_input_number(&numero_ingresado, key);
 7e2:	8e e0       	ldi	r24, 0x0E	; 14
 7e4:	92 e0       	ldi	r25, 0x02	; 2
 7e6:	0e 94 0f 03 	call	0x61e	; 0x61e <update_input_number>
							}
						}
						if (key < 16 && KeyMap[key] == TECLA_CONFIRMAR)
 7ea:	69 81       	ldd	r22, Y+1	; 0x01
 7ec:	60 31       	cpi	r22, 0x10	; 16
 7ee:	d8 f5       	brcc	.+118    	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 7f0:	e6 2f       	mov	r30, r22
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	e2 50       	subi	r30, 0x02	; 2
 7f6:	fe 4f       	sbci	r31, 0xFE	; 254
 7f8:	80 81       	ld	r24, Z
 7fa:	83 32       	cpi	r24, 0x23	; 35
 7fc:	a1 f5       	brne	.+104    	; 0x866 <__DATA_REGION_LENGTH__+0x66>
						{
							// letra incorrecta
							if (numero_ingresado != caracter)
 7fe:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <__data_end>
 802:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <caracter>
 806:	98 17       	cp	r25, r24
 808:	59 f0       	breq	.+22     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
							{
								vidas--;
 80a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <vidas>
 80e:	81 50       	subi	r24, 0x01	; 1
 810:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <vidas>
								if (vidas == 0)
 814:	81 11       	cpse	r24, r1
 816:	22 c0       	rjmp	.+68     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
								{
									estado_actual = PERDISTE;
 818:	83 e0       	ldi	r24, 0x03	; 3
 81a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <estado_actual>
 81e:	1e c0       	rjmp	.+60     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
								}
							}
							else
							// letra correcta
							{
								if (pos_password == 5)
 820:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <pos_password>
 824:	85 30       	cpi	r24, 0x05	; 5
 826:	29 f4       	brne	.+10     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
								{
									estado_actual = GANASTE;
 828:	94 e0       	ldi	r25, 0x04	; 4
 82a:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <estado_actual>
									contador_ticks_estado = 0;
 82e:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <contador_ticks_estado>
								}
								pos_password++;
 832:	8f 5f       	subi	r24, 0xFF	; 255
 834:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <pos_password>
								LCDGotoXY(pos_password, 0);
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	0e 94 3f 02 	call	0x47e	; 0x47e <LCDGotoXY>
								LCDsendChar(caracter);				// Mostrar el caracter a ingresar
 83e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <caracter>
 842:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCDsendChar>
								caracter = curr_word[pos_password]; // Obtener el caracter a ingresar
 846:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <pos_password>
 84a:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <curr_word>
 84e:	f0 91 16 02 	lds	r31, 0x0216	; 0x800216 <curr_word+0x1>
 852:	e8 0f       	add	r30, r24
 854:	f1 1d       	adc	r31, r1
 856:	80 81       	ld	r24, Z
 858:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <caracter>
							}
							numero_ingresado = 0; // Reiniciar el ingreso de caracteres
 85c:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__data_end>
							contador_ticks_estado = 0;
 860:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <contador_ticks_estado>
 864:	09 cf       	rjmp	.-494    	; 0x678 <main+0x2a>
						}
						else
						{
							update_input_number(&numero_ingresado, key);
 866:	8e e0       	ldi	r24, 0x0E	; 14
 868:	92 e0       	ldi	r25, 0x02	; 2
 86a:	0e 94 0f 03 	call	0x61e	; 0x61e <update_input_number>
 86e:	04 cf       	rjmp	.-504    	; 0x678 <main+0x2a>
					}
				}
				break;

			case PERDISTE:
				if (contador_ticks_estado == 1)
 870:	81 30       	cpi	r24, 0x01	; 1
 872:	69 f4       	brne	.+26     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
				{
					LCDclr();
 874:	0e 94 1f 02 	call	0x43e	; 0x43e <LCDclr>
 878:	8f e3       	ldi	r24, 0x3F	; 63
 87a:	9f e1       	ldi	r25, 0x1F	; 31
 87c:	01 97       	sbiw	r24, 0x01	; 1
 87e:	f1 f7       	brne	.-4      	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 880:	00 c0       	rjmp	.+0      	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 882:	00 00       	nop
					_delay_ms(2);
					LCDstring((uint8_t *)"Perdiste", 8);
 884:	68 e0       	ldi	r22, 0x08	; 8
 886:	86 e5       	ldi	r24, 0x56	; 86
 888:	91 e0       	ldi	r25, 0x01	; 1
 88a:	0e 94 27 02 	call	0x44e	; 0x44e <LCDstring>
				}
				if (contador_ticks_estado >= 20)
 88e:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <contador_ticks_estado>
 892:	84 31       	cpi	r24, 0x14	; 20
 894:	20 f0       	brcs	.+8      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
				{
					estado_actual = INICIO;
 896:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <estado_actual>
					contador_ticks_estado = 0;
 89a:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <contador_ticks_estado>
				}
				pos_password = 0;
 89e:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <pos_password>
				break;
 8a2:	ea ce       	rjmp	.-556    	; 0x678 <main+0x2a>

			case GANASTE:
				if (contador_ticks_estado == 1)
 8a4:	81 30       	cpi	r24, 0x01	; 1
 8a6:	69 f4       	brne	.+26     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
				{
					LCDclr();
 8a8:	0e 94 1f 02 	call	0x43e	; 0x43e <LCDclr>
 8ac:	8f e3       	ldi	r24, 0x3F	; 63
 8ae:	9f e1       	ldi	r25, 0x1F	; 31
 8b0:	01 97       	sbiw	r24, 0x01	; 1
 8b2:	f1 f7       	brne	.-4      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8b6:	00 00       	nop
					_delay_ms(2);
					LCDstring((uint8_t *)"Victoria", 8);
 8b8:	68 e0       	ldi	r22, 0x08	; 8
 8ba:	8f e5       	ldi	r24, 0x5F	; 95
 8bc:	91 e0       	ldi	r25, 0x01	; 1
 8be:	0e 94 27 02 	call	0x44e	; 0x44e <LCDstring>
				}
				if (contador_ticks_estado >= 20)
 8c2:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <contador_ticks_estado>
 8c6:	84 31       	cpi	r24, 0x14	; 20
 8c8:	20 f0       	brcs	.+8      	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
				{
					estado_actual = INICIO;
 8ca:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <estado_actual>
					contador_ticks_estado = 0;
 8ce:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <contador_ticks_estado>
				}
				pos_password = 0;
 8d2:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <pos_password>
				break;
 8d6:	d0 ce       	rjmp	.-608    	; 0x678 <main+0x2a>

000008d8 <timer0_init>:
volatile uint8_t tick = 0;

void timer0_init(void)
{
    // Configurar Timer0 para interrupciones periodicas cada 10 ms
    TCCR0A = (1 << WGM01);              // Modo CTC
 8d8:	82 e0       	ldi	r24, 0x02	; 2
 8da:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1 << CS01) | (1 << CS00); // Prescaler 64
 8dc:	83 e0       	ldi	r24, 0x03	; 3
 8de:	85 bd       	out	0x25, r24	; 37
    OCR0A = 249;                        // Para 1 ms con 16MHz y prescaler 64
 8e0:	89 ef       	ldi	r24, 0xF9	; 249
 8e2:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A);            // Habilitar interrupcion de comparacion
 8e4:	ee e6       	ldi	r30, 0x6E	; 110
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	80 81       	ld	r24, Z
 8ea:	82 60       	ori	r24, 0x02	; 2
 8ec:	80 83       	st	Z, r24
 8ee:	08 95       	ret

000008f0 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)
{
 8f0:	1f 92       	push	r1
 8f2:	0f 92       	push	r0
 8f4:	0f b6       	in	r0, 0x3f	; 63
 8f6:	0f 92       	push	r0
 8f8:	11 24       	eor	r1, r1
 8fa:	8f 93       	push	r24
    static uint8_t contador_ticks = 0;
    contador_ticks++;
 8fc:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <contador_ticks.1613>
 900:	8f 5f       	subi	r24, 0xFF	; 255
 902:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <contador_ticks.1613>

    if (contador_ticks >= 200)
 906:	88 3c       	cpi	r24, 0xC8	; 200
 908:	28 f0       	brcs	.+10     	; 0x914 <__stack+0x15>
    {
        // 10 ms * 10 = 2000 ms{
        contador_ticks = 0;
 90a:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <contador_ticks.1613>
        tick = 1; // Se cumple un "tick" de la MEF cada 2000 ms
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <tick>
        // cada 2 seg
    }
 914:	8f 91       	pop	r24
 916:	0f 90       	pop	r0
 918:	0f be       	out	0x3f, r0	; 63
 91a:	0f 90       	pop	r0
 91c:	1f 90       	pop	r1
 91e:	18 95       	reti

00000920 <__divmodhi4>:
 920:	97 fb       	bst	r25, 7
 922:	07 2e       	mov	r0, r23
 924:	16 f4       	brtc	.+4      	; 0x92a <__divmodhi4+0xa>
 926:	00 94       	com	r0
 928:	07 d0       	rcall	.+14     	; 0x938 <__divmodhi4_neg1>
 92a:	77 fd       	sbrc	r23, 7
 92c:	09 d0       	rcall	.+18     	; 0x940 <__divmodhi4_neg2>
 92e:	0e 94 b3 04 	call	0x966	; 0x966 <__udivmodhi4>
 932:	07 fc       	sbrc	r0, 7
 934:	05 d0       	rcall	.+10     	; 0x940 <__divmodhi4_neg2>
 936:	3e f4       	brtc	.+14     	; 0x946 <__divmodhi4_exit>

00000938 <__divmodhi4_neg1>:
 938:	90 95       	com	r25
 93a:	81 95       	neg	r24
 93c:	9f 4f       	sbci	r25, 0xFF	; 255
 93e:	08 95       	ret

00000940 <__divmodhi4_neg2>:
 940:	70 95       	com	r23
 942:	61 95       	neg	r22
 944:	7f 4f       	sbci	r23, 0xFF	; 255

00000946 <__divmodhi4_exit>:
 946:	08 95       	ret

00000948 <__umulhisi3>:
 948:	a2 9f       	mul	r26, r18
 94a:	b0 01       	movw	r22, r0
 94c:	b3 9f       	mul	r27, r19
 94e:	c0 01       	movw	r24, r0
 950:	a3 9f       	mul	r26, r19
 952:	70 0d       	add	r23, r0
 954:	81 1d       	adc	r24, r1
 956:	11 24       	eor	r1, r1
 958:	91 1d       	adc	r25, r1
 95a:	b2 9f       	mul	r27, r18
 95c:	70 0d       	add	r23, r0
 95e:	81 1d       	adc	r24, r1
 960:	11 24       	eor	r1, r1
 962:	91 1d       	adc	r25, r1
 964:	08 95       	ret

00000966 <__udivmodhi4>:
 966:	aa 1b       	sub	r26, r26
 968:	bb 1b       	sub	r27, r27
 96a:	51 e1       	ldi	r21, 0x11	; 17
 96c:	07 c0       	rjmp	.+14     	; 0x97c <__udivmodhi4_ep>

0000096e <__udivmodhi4_loop>:
 96e:	aa 1f       	adc	r26, r26
 970:	bb 1f       	adc	r27, r27
 972:	a6 17       	cp	r26, r22
 974:	b7 07       	cpc	r27, r23
 976:	10 f0       	brcs	.+4      	; 0x97c <__udivmodhi4_ep>
 978:	a6 1b       	sub	r26, r22
 97a:	b7 0b       	sbc	r27, r23

0000097c <__udivmodhi4_ep>:
 97c:	88 1f       	adc	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	5a 95       	dec	r21
 982:	a9 f7       	brne	.-22     	; 0x96e <__udivmodhi4_loop>
 984:	80 95       	com	r24
 986:	90 95       	com	r25
 988:	bc 01       	movw	r22, r24
 98a:	cd 01       	movw	r24, r26
 98c:	08 95       	ret

0000098e <do_rand>:
 98e:	8f 92       	push	r8
 990:	9f 92       	push	r9
 992:	af 92       	push	r10
 994:	bf 92       	push	r11
 996:	cf 92       	push	r12
 998:	df 92       	push	r13
 99a:	ef 92       	push	r14
 99c:	ff 92       	push	r15
 99e:	cf 93       	push	r28
 9a0:	df 93       	push	r29
 9a2:	ec 01       	movw	r28, r24
 9a4:	68 81       	ld	r22, Y
 9a6:	79 81       	ldd	r23, Y+1	; 0x01
 9a8:	8a 81       	ldd	r24, Y+2	; 0x02
 9aa:	9b 81       	ldd	r25, Y+3	; 0x03
 9ac:	61 15       	cp	r22, r1
 9ae:	71 05       	cpc	r23, r1
 9b0:	81 05       	cpc	r24, r1
 9b2:	91 05       	cpc	r25, r1
 9b4:	21 f4       	brne	.+8      	; 0x9be <do_rand+0x30>
 9b6:	64 e2       	ldi	r22, 0x24	; 36
 9b8:	79 ed       	ldi	r23, 0xD9	; 217
 9ba:	8b e5       	ldi	r24, 0x5B	; 91
 9bc:	97 e0       	ldi	r25, 0x07	; 7
 9be:	2d e1       	ldi	r18, 0x1D	; 29
 9c0:	33 ef       	ldi	r19, 0xF3	; 243
 9c2:	41 e0       	ldi	r20, 0x01	; 1
 9c4:	50 e0       	ldi	r21, 0x00	; 0
 9c6:	0e 94 23 05 	call	0xa46	; 0xa46 <__divmodsi4>
 9ca:	49 01       	movw	r8, r18
 9cc:	5a 01       	movw	r10, r20
 9ce:	9b 01       	movw	r18, r22
 9d0:	ac 01       	movw	r20, r24
 9d2:	a7 ea       	ldi	r26, 0xA7	; 167
 9d4:	b1 e4       	ldi	r27, 0x41	; 65
 9d6:	0e 94 42 05 	call	0xa84	; 0xa84 <__muluhisi3>
 9da:	6b 01       	movw	r12, r22
 9dc:	7c 01       	movw	r14, r24
 9de:	ac ee       	ldi	r26, 0xEC	; 236
 9e0:	b4 ef       	ldi	r27, 0xF4	; 244
 9e2:	a5 01       	movw	r20, r10
 9e4:	94 01       	movw	r18, r8
 9e6:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__mulohisi3>
 9ea:	dc 01       	movw	r26, r24
 9ec:	cb 01       	movw	r24, r22
 9ee:	8c 0d       	add	r24, r12
 9f0:	9d 1d       	adc	r25, r13
 9f2:	ae 1d       	adc	r26, r14
 9f4:	bf 1d       	adc	r27, r15
 9f6:	b7 ff       	sbrs	r27, 7
 9f8:	03 c0       	rjmp	.+6      	; 0xa00 <do_rand+0x72>
 9fa:	01 97       	sbiw	r24, 0x01	; 1
 9fc:	a1 09       	sbc	r26, r1
 9fe:	b0 48       	sbci	r27, 0x80	; 128
 a00:	88 83       	st	Y, r24
 a02:	99 83       	std	Y+1, r25	; 0x01
 a04:	aa 83       	std	Y+2, r26	; 0x02
 a06:	bb 83       	std	Y+3, r27	; 0x03
 a08:	9f 77       	andi	r25, 0x7F	; 127
 a0a:	df 91       	pop	r29
 a0c:	cf 91       	pop	r28
 a0e:	ff 90       	pop	r15
 a10:	ef 90       	pop	r14
 a12:	df 90       	pop	r13
 a14:	cf 90       	pop	r12
 a16:	bf 90       	pop	r11
 a18:	af 90       	pop	r10
 a1a:	9f 90       	pop	r9
 a1c:	8f 90       	pop	r8
 a1e:	08 95       	ret

00000a20 <rand_r>:
 a20:	0e 94 c7 04 	call	0x98e	; 0x98e <do_rand>
 a24:	08 95       	ret

00000a26 <rand>:
 a26:	80 e0       	ldi	r24, 0x00	; 0
 a28:	91 e0       	ldi	r25, 0x01	; 1
 a2a:	0e 94 c7 04 	call	0x98e	; 0x98e <do_rand>
 a2e:	08 95       	ret

00000a30 <srand>:
 a30:	a0 e0       	ldi	r26, 0x00	; 0
 a32:	b0 e0       	ldi	r27, 0x00	; 0
 a34:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 a38:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 a3c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 a40:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 a44:	08 95       	ret

00000a46 <__divmodsi4>:
 a46:	05 2e       	mov	r0, r21
 a48:	97 fb       	bst	r25, 7
 a4a:	1e f4       	brtc	.+6      	; 0xa52 <__divmodsi4+0xc>
 a4c:	00 94       	com	r0
 a4e:	0e 94 3a 05 	call	0xa74	; 0xa74 <__negsi2>
 a52:	57 fd       	sbrc	r21, 7
 a54:	07 d0       	rcall	.+14     	; 0xa64 <__divmodsi4_neg2>
 a56:	0e 94 55 05 	call	0xaaa	; 0xaaa <__udivmodsi4>
 a5a:	07 fc       	sbrc	r0, 7
 a5c:	03 d0       	rcall	.+6      	; 0xa64 <__divmodsi4_neg2>
 a5e:	4e f4       	brtc	.+18     	; 0xa72 <__divmodsi4_exit>
 a60:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__negsi2>

00000a64 <__divmodsi4_neg2>:
 a64:	50 95       	com	r21
 a66:	40 95       	com	r20
 a68:	30 95       	com	r19
 a6a:	21 95       	neg	r18
 a6c:	3f 4f       	sbci	r19, 0xFF	; 255
 a6e:	4f 4f       	sbci	r20, 0xFF	; 255
 a70:	5f 4f       	sbci	r21, 0xFF	; 255

00000a72 <__divmodsi4_exit>:
 a72:	08 95       	ret

00000a74 <__negsi2>:
 a74:	90 95       	com	r25
 a76:	80 95       	com	r24
 a78:	70 95       	com	r23
 a7a:	61 95       	neg	r22
 a7c:	7f 4f       	sbci	r23, 0xFF	; 255
 a7e:	8f 4f       	sbci	r24, 0xFF	; 255
 a80:	9f 4f       	sbci	r25, 0xFF	; 255
 a82:	08 95       	ret

00000a84 <__muluhisi3>:
 a84:	0e 94 a4 04 	call	0x948	; 0x948 <__umulhisi3>
 a88:	a5 9f       	mul	r26, r21
 a8a:	90 0d       	add	r25, r0
 a8c:	b4 9f       	mul	r27, r20
 a8e:	90 0d       	add	r25, r0
 a90:	a4 9f       	mul	r26, r20
 a92:	80 0d       	add	r24, r0
 a94:	91 1d       	adc	r25, r1
 a96:	11 24       	eor	r1, r1
 a98:	08 95       	ret

00000a9a <__mulshisi3>:
 a9a:	b7 ff       	sbrs	r27, 7
 a9c:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__muluhisi3>

00000aa0 <__mulohisi3>:
 aa0:	0e 94 42 05 	call	0xa84	; 0xa84 <__muluhisi3>
 aa4:	82 1b       	sub	r24, r18
 aa6:	93 0b       	sbc	r25, r19
 aa8:	08 95       	ret

00000aaa <__udivmodsi4>:
 aaa:	a1 e2       	ldi	r26, 0x21	; 33
 aac:	1a 2e       	mov	r1, r26
 aae:	aa 1b       	sub	r26, r26
 ab0:	bb 1b       	sub	r27, r27
 ab2:	fd 01       	movw	r30, r26
 ab4:	0d c0       	rjmp	.+26     	; 0xad0 <__udivmodsi4_ep>

00000ab6 <__udivmodsi4_loop>:
 ab6:	aa 1f       	adc	r26, r26
 ab8:	bb 1f       	adc	r27, r27
 aba:	ee 1f       	adc	r30, r30
 abc:	ff 1f       	adc	r31, r31
 abe:	a2 17       	cp	r26, r18
 ac0:	b3 07       	cpc	r27, r19
 ac2:	e4 07       	cpc	r30, r20
 ac4:	f5 07       	cpc	r31, r21
 ac6:	20 f0       	brcs	.+8      	; 0xad0 <__udivmodsi4_ep>
 ac8:	a2 1b       	sub	r26, r18
 aca:	b3 0b       	sbc	r27, r19
 acc:	e4 0b       	sbc	r30, r20
 ace:	f5 0b       	sbc	r31, r21

00000ad0 <__udivmodsi4_ep>:
 ad0:	66 1f       	adc	r22, r22
 ad2:	77 1f       	adc	r23, r23
 ad4:	88 1f       	adc	r24, r24
 ad6:	99 1f       	adc	r25, r25
 ad8:	1a 94       	dec	r1
 ada:	69 f7       	brne	.-38     	; 0xab6 <__udivmodsi4_loop>
 adc:	60 95       	com	r22
 ade:	70 95       	com	r23
 ae0:	80 95       	com	r24
 ae2:	90 95       	com	r25
 ae4:	9b 01       	movw	r18, r22
 ae6:	ac 01       	movw	r20, r24
 ae8:	bd 01       	movw	r22, r26
 aea:	cf 01       	movw	r24, r30
 aec:	08 95       	ret

00000aee <_exit>:
 aee:	f8 94       	cli

00000af0 <__stop_program>:
 af0:	ff cf       	rjmp	.-2      	; 0xaf0 <__stop_program>
