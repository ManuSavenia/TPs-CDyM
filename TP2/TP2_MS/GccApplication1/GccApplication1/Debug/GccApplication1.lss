
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000124  00800100  000011e2  00001276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800224  00800224  0000139a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000139a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bde  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf0  00000000  00000000  0000317e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc8  00000000  00000000  00003e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  00004e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000717  00000000  00000000  000051a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000132a  00000000  00000000  000058b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006be1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
       4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
       8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
       c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      38:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__vector_14>
      3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
      64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>

00000068 <LcdCustomChar>:
      68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d8 e0       	ldi	r29, 0x08	; 8
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	12 e0       	ldi	r17, 0x02	; 2
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	e2 ee       	ldi	r30, 0xE2	; 226
      bc:	f1 e1       	ldi	r31, 0x11	; 17
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
      c0:	05 90       	lpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a4 32       	cpi	r26, 0x24	; 36
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
      ca:	22 e0       	ldi	r18, 0x02	; 2
      cc:	a4 e2       	ldi	r26, 0x24	; 36
      ce:	b2 e0       	ldi	r27, 0x02	; 2
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	ad 33       	cpi	r26, 0x3D	; 61
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	0e 94 c7 04 	call	0x98e	; 0x98e <main>
      de:	0c 94 ef 08 	jmp	0x11de	; 0x11de <_exit>

000000e2 <__bad_interrupt>:
      e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <timer0_init>:
#include "timer.h"

void timer0_init()
{
    // Configurar Timer0 para interrupciones periodicas cada 10 ms
    TCCR0A = (1 << WGM01);              // Modo CTC
      e6:	82 e0       	ldi	r24, 0x02	; 2
      e8:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1 << CS01) | (1 << CS00); // Prescaler 64
      ea:	83 e0       	ldi	r24, 0x03	; 3
      ec:	85 bd       	out	0x25, r24	; 37
    OCR0A = 249;                        // Para 1 ms con 16MHz y prescaler 64
      ee:	89 ef       	ldi	r24, 0xF9	; 249
      f0:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A);            // Habilitar interrupcion de comparacion
      f2:	ee e6       	ldi	r30, 0x6E	; 110
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	80 81       	ld	r24, Z
      f8:	82 60       	ori	r24, 0x02	; 2
      fa:	80 83       	st	Z, r24
    sei();
      fc:	78 94       	sei
      fe:	08 95       	ret

00000100 <LCDsendChar>:
     100:	65 b1       	in	r22, 0x05	; 5
     102:	98 2f       	mov	r25, r24
     104:	90 74       	andi	r25, 0x40	; 64
     106:	49 2f       	mov	r20, r25
     108:	50 e0       	ldi	r21, 0x00	; 0
     10a:	55 95       	asr	r21
     10c:	47 95       	ror	r20
     10e:	55 95       	asr	r21
     110:	47 95       	ror	r20
     112:	55 95       	asr	r21
     114:	47 95       	ror	r20
     116:	55 95       	asr	r21
     118:	47 95       	ror	r20
     11a:	98 2f       	mov	r25, r24
     11c:	90 78       	andi	r25, 0x80	; 128
     11e:	29 2f       	mov	r18, r25
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	02 2e       	mov	r0, r18
     124:	23 2f       	mov	r18, r19
     126:	00 0c       	add	r0, r0
     128:	22 1f       	adc	r18, r18
     12a:	33 0b       	sbc	r19, r19
     12c:	00 0c       	add	r0, r0
     12e:	22 1f       	adc	r18, r18
     130:	33 1f       	adc	r19, r19
     132:	96 2f       	mov	r25, r22
     134:	99 7f       	andi	r25, 0xF9	; 249
     136:	49 2b       	or	r20, r25
     138:	24 2b       	or	r18, r20
     13a:	25 b9       	out	0x05, r18	; 5
     13c:	68 b1       	in	r22, 0x08	; 8
     13e:	98 2f       	mov	r25, r24
     140:	90 71       	andi	r25, 0x10	; 16
     142:	49 2f       	mov	r20, r25
     144:	50 e0       	ldi	r21, 0x00	; 0
     146:	55 95       	asr	r21
     148:	47 95       	ror	r20
     14a:	55 95       	asr	r21
     14c:	47 95       	ror	r20
     14e:	55 95       	asr	r21
     150:	47 95       	ror	r20
     152:	98 2f       	mov	r25, r24
     154:	90 72       	andi	r25, 0x20	; 32
     156:	29 2f       	mov	r18, r25
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	35 95       	asr	r19
     15c:	27 95       	ror	r18
     15e:	35 95       	asr	r19
     160:	27 95       	ror	r18
     162:	35 95       	asr	r19
     164:	27 95       	ror	r18
     166:	96 2f       	mov	r25, r22
     168:	99 7f       	andi	r25, 0xF9	; 249
     16a:	49 2b       	or	r20, r25
     16c:	24 2b       	or	r18, r20
     16e:	28 b9       	out	0x08, r18	; 8
     170:	9b b1       	in	r25, 0x0b	; 11
     172:	92 60       	ori	r25, 0x02	; 2
     174:	9b b9       	out	0x0b, r25	; 11
     176:	9b b1       	in	r25, 0x0b	; 11
     178:	91 60       	ori	r25, 0x01	; 1
     17a:	9b b9       	out	0x0b, r25	; 11
     17c:	25 ed       	ldi	r18, 0xD5	; 213
     17e:	2a 95       	dec	r18
     180:	f1 f7       	brne	.-4      	; 0x17e <LCDsendChar+0x7e>
     182:	00 00       	nop
     184:	9b b1       	in	r25, 0x0b	; 11
     186:	9e 7f       	andi	r25, 0xFE	; 254
     188:	9b b9       	out	0x0b, r25	; 11
     18a:	9b b1       	in	r25, 0x0b	; 11
     18c:	9d 7f       	andi	r25, 0xFD	; 253
     18e:	9b b9       	out	0x0b, r25	; 11
     190:	95 ed       	ldi	r25, 0xD5	; 213
     192:	9a 95       	dec	r25
     194:	f1 f7       	brne	.-4      	; 0x192 <LCDsendChar+0x92>
     196:	00 00       	nop
     198:	65 b1       	in	r22, 0x05	; 5
     19a:	20 e1       	ldi	r18, 0x10	; 16
     19c:	82 9f       	mul	r24, r18
     19e:	c0 01       	movw	r24, r0
     1a0:	11 24       	eor	r1, r1
     1a2:	ac 01       	movw	r20, r24
     1a4:	40 74       	andi	r20, 0x40	; 64
     1a6:	55 27       	eor	r21, r21
     1a8:	55 95       	asr	r21
     1aa:	47 95       	ror	r20
     1ac:	55 95       	asr	r21
     1ae:	47 95       	ror	r20
     1b0:	55 95       	asr	r21
     1b2:	47 95       	ror	r20
     1b4:	55 95       	asr	r21
     1b6:	47 95       	ror	r20
     1b8:	9c 01       	movw	r18, r24
     1ba:	20 78       	andi	r18, 0x80	; 128
     1bc:	33 27       	eor	r19, r19
     1be:	02 2e       	mov	r0, r18
     1c0:	23 2f       	mov	r18, r19
     1c2:	00 0c       	add	r0, r0
     1c4:	22 1f       	adc	r18, r18
     1c6:	33 0b       	sbc	r19, r19
     1c8:	00 0c       	add	r0, r0
     1ca:	22 1f       	adc	r18, r18
     1cc:	33 1f       	adc	r19, r19
     1ce:	36 2f       	mov	r19, r22
     1d0:	39 7f       	andi	r19, 0xF9	; 249
     1d2:	43 2b       	or	r20, r19
     1d4:	24 2b       	or	r18, r20
     1d6:	25 b9       	out	0x05, r18	; 5
     1d8:	48 b1       	in	r20, 0x08	; 8
     1da:	9c 01       	movw	r18, r24
     1dc:	20 71       	andi	r18, 0x10	; 16
     1de:	33 27       	eor	r19, r19
     1e0:	35 95       	asr	r19
     1e2:	27 95       	ror	r18
     1e4:	35 95       	asr	r19
     1e6:	27 95       	ror	r18
     1e8:	35 95       	asr	r19
     1ea:	27 95       	ror	r18
     1ec:	80 72       	andi	r24, 0x20	; 32
     1ee:	99 27       	eor	r25, r25
     1f0:	95 95       	asr	r25
     1f2:	87 95       	ror	r24
     1f4:	95 95       	asr	r25
     1f6:	87 95       	ror	r24
     1f8:	95 95       	asr	r25
     1fa:	87 95       	ror	r24
     1fc:	94 2f       	mov	r25, r20
     1fe:	99 7f       	andi	r25, 0xF9	; 249
     200:	29 2b       	or	r18, r25
     202:	82 2b       	or	r24, r18
     204:	88 b9       	out	0x08, r24	; 8
     206:	8b b1       	in	r24, 0x0b	; 11
     208:	82 60       	ori	r24, 0x02	; 2
     20a:	8b b9       	out	0x0b, r24	; 11
     20c:	8b b1       	in	r24, 0x0b	; 11
     20e:	81 60       	ori	r24, 0x01	; 1
     210:	8b b9       	out	0x0b, r24	; 11
     212:	85 ed       	ldi	r24, 0xD5	; 213
     214:	8a 95       	dec	r24
     216:	f1 f7       	brne	.-4      	; 0x214 <LCDsendChar+0x114>
     218:	00 00       	nop
     21a:	8b b1       	in	r24, 0x0b	; 11
     21c:	8e 7f       	andi	r24, 0xFE	; 254
     21e:	8b b9       	out	0x0b, r24	; 11
     220:	8b b1       	in	r24, 0x0b	; 11
     222:	8d 7f       	andi	r24, 0xFD	; 253
     224:	8b b9       	out	0x0b, r24	; 11
     226:	95 ed       	ldi	r25, 0xD5	; 213
     228:	9a 95       	dec	r25
     22a:	f1 f7       	brne	.-4      	; 0x228 <LCDsendChar+0x128>
     22c:	00 00       	nop
     22e:	08 95       	ret

00000230 <LCDsendCommand>:
     230:	65 b1       	in	r22, 0x05	; 5
     232:	98 2f       	mov	r25, r24
     234:	90 74       	andi	r25, 0x40	; 64
     236:	49 2f       	mov	r20, r25
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	55 95       	asr	r21
     23c:	47 95       	ror	r20
     23e:	55 95       	asr	r21
     240:	47 95       	ror	r20
     242:	55 95       	asr	r21
     244:	47 95       	ror	r20
     246:	55 95       	asr	r21
     248:	47 95       	ror	r20
     24a:	98 2f       	mov	r25, r24
     24c:	90 78       	andi	r25, 0x80	; 128
     24e:	29 2f       	mov	r18, r25
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	02 2e       	mov	r0, r18
     254:	23 2f       	mov	r18, r19
     256:	00 0c       	add	r0, r0
     258:	22 1f       	adc	r18, r18
     25a:	33 0b       	sbc	r19, r19
     25c:	00 0c       	add	r0, r0
     25e:	22 1f       	adc	r18, r18
     260:	33 1f       	adc	r19, r19
     262:	96 2f       	mov	r25, r22
     264:	99 7f       	andi	r25, 0xF9	; 249
     266:	49 2b       	or	r20, r25
     268:	24 2b       	or	r18, r20
     26a:	25 b9       	out	0x05, r18	; 5
     26c:	68 b1       	in	r22, 0x08	; 8
     26e:	98 2f       	mov	r25, r24
     270:	90 71       	andi	r25, 0x10	; 16
     272:	49 2f       	mov	r20, r25
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	55 95       	asr	r21
     278:	47 95       	ror	r20
     27a:	55 95       	asr	r21
     27c:	47 95       	ror	r20
     27e:	55 95       	asr	r21
     280:	47 95       	ror	r20
     282:	98 2f       	mov	r25, r24
     284:	90 72       	andi	r25, 0x20	; 32
     286:	29 2f       	mov	r18, r25
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	35 95       	asr	r19
     28c:	27 95       	ror	r18
     28e:	35 95       	asr	r19
     290:	27 95       	ror	r18
     292:	35 95       	asr	r19
     294:	27 95       	ror	r18
     296:	96 2f       	mov	r25, r22
     298:	99 7f       	andi	r25, 0xF9	; 249
     29a:	49 2b       	or	r20, r25
     29c:	24 2b       	or	r18, r20
     29e:	28 b9       	out	0x08, r18	; 8
     2a0:	9b b1       	in	r25, 0x0b	; 11
     2a2:	91 60       	ori	r25, 0x01	; 1
     2a4:	9b b9       	out	0x0b, r25	; 11
     2a6:	ef e9       	ldi	r30, 0x9F	; 159
     2a8:	ff e0       	ldi	r31, 0x0F	; 15
     2aa:	31 97       	sbiw	r30, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCDsendCommand+0x7a>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCDsendCommand+0x80>
     2b0:	00 00       	nop
     2b2:	9b b1       	in	r25, 0x0b	; 11
     2b4:	9e 7f       	andi	r25, 0xFE	; 254
     2b6:	9b b9       	out	0x0b, r25	; 11
     2b8:	ef e9       	ldi	r30, 0x9F	; 159
     2ba:	ff e0       	ldi	r31, 0x0F	; 15
     2bc:	31 97       	sbiw	r30, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <LCDsendCommand+0x8c>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCDsendCommand+0x92>
     2c2:	00 00       	nop
     2c4:	65 b1       	in	r22, 0x05	; 5
     2c6:	f0 e1       	ldi	r31, 0x10	; 16
     2c8:	8f 9f       	mul	r24, r31
     2ca:	c0 01       	movw	r24, r0
     2cc:	11 24       	eor	r1, r1
     2ce:	ac 01       	movw	r20, r24
     2d0:	40 74       	andi	r20, 0x40	; 64
     2d2:	55 27       	eor	r21, r21
     2d4:	55 95       	asr	r21
     2d6:	47 95       	ror	r20
     2d8:	55 95       	asr	r21
     2da:	47 95       	ror	r20
     2dc:	55 95       	asr	r21
     2de:	47 95       	ror	r20
     2e0:	55 95       	asr	r21
     2e2:	47 95       	ror	r20
     2e4:	9c 01       	movw	r18, r24
     2e6:	20 78       	andi	r18, 0x80	; 128
     2e8:	33 27       	eor	r19, r19
     2ea:	02 2e       	mov	r0, r18
     2ec:	23 2f       	mov	r18, r19
     2ee:	00 0c       	add	r0, r0
     2f0:	22 1f       	adc	r18, r18
     2f2:	33 0b       	sbc	r19, r19
     2f4:	00 0c       	add	r0, r0
     2f6:	22 1f       	adc	r18, r18
     2f8:	33 1f       	adc	r19, r19
     2fa:	36 2f       	mov	r19, r22
     2fc:	39 7f       	andi	r19, 0xF9	; 249
     2fe:	43 2b       	or	r20, r19
     300:	24 2b       	or	r18, r20
     302:	25 b9       	out	0x05, r18	; 5
     304:	48 b1       	in	r20, 0x08	; 8
     306:	9c 01       	movw	r18, r24
     308:	20 71       	andi	r18, 0x10	; 16
     30a:	33 27       	eor	r19, r19
     30c:	35 95       	asr	r19
     30e:	27 95       	ror	r18
     310:	35 95       	asr	r19
     312:	27 95       	ror	r18
     314:	35 95       	asr	r19
     316:	27 95       	ror	r18
     318:	80 72       	andi	r24, 0x20	; 32
     31a:	99 27       	eor	r25, r25
     31c:	95 95       	asr	r25
     31e:	87 95       	ror	r24
     320:	95 95       	asr	r25
     322:	87 95       	ror	r24
     324:	95 95       	asr	r25
     326:	87 95       	ror	r24
     328:	94 2f       	mov	r25, r20
     32a:	99 7f       	andi	r25, 0xF9	; 249
     32c:	29 2b       	or	r18, r25
     32e:	82 2b       	or	r24, r18
     330:	88 b9       	out	0x08, r24	; 8
     332:	8b b1       	in	r24, 0x0b	; 11
     334:	81 60       	ori	r24, 0x01	; 1
     336:	8b b9       	out	0x0b, r24	; 11
     338:	8f e9       	ldi	r24, 0x9F	; 159
     33a:	9f e0       	ldi	r25, 0x0F	; 15
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <LCDsendCommand+0x10c>
     340:	00 c0       	rjmp	.+0      	; 0x342 <LCDsendCommand+0x112>
     342:	00 00       	nop
     344:	8b b1       	in	r24, 0x0b	; 11
     346:	8e 7f       	andi	r24, 0xFE	; 254
     348:	8b b9       	out	0x0b, r24	; 11
     34a:	ef e9       	ldi	r30, 0x9F	; 159
     34c:	ff e0       	ldi	r31, 0x0F	; 15
     34e:	31 97       	sbiw	r30, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <LCDsendCommand+0x11e>
     352:	00 c0       	rjmp	.+0      	; 0x354 <LCDsendCommand+0x124>
     354:	00 00       	nop
     356:	08 95       	ret

00000358 <LCDclr>:
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendCommand>
     35e:	08 95       	ret

00000360 <LCDhome>:
     360:	82 e0       	ldi	r24, 0x02	; 2
     362:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendCommand>
     366:	08 95       	ret

00000368 <LCDstring>:
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	00 97       	sbiw	r24, 0x00	; 0
     372:	69 f0       	breq	.+26     	; 0x38e <LCDstring+0x26>
     374:	d6 2f       	mov	r29, r22
     376:	8c 01       	movw	r16, r24
     378:	c0 e0       	ldi	r28, 0x00	; 0
     37a:	07 c0       	rjmp	.+14     	; 0x38a <LCDstring+0x22>
     37c:	f8 01       	movw	r30, r16
     37e:	ec 0f       	add	r30, r28
     380:	f1 1d       	adc	r31, r1
     382:	80 81       	ld	r24, Z
     384:	0e 94 80 00 	call	0x100	; 0x100 <LCDsendChar>
     388:	cf 5f       	subi	r28, 0xFF	; 255
     38a:	cd 17       	cp	r28, r29
     38c:	b8 f3       	brcs	.-18     	; 0x37c <LCDstring+0x14>
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	08 95       	ret

00000398 <LCDGotoXY>:
     398:	62 30       	cpi	r22, 0x02	; 2
     39a:	31 f0       	breq	.+12     	; 0x3a8 <LCDGotoXY+0x10>
     39c:	63 30       	cpi	r22, 0x03	; 3
     39e:	31 f0       	breq	.+12     	; 0x3ac <LCDGotoXY+0x14>
     3a0:	61 30       	cpi	r22, 0x01	; 1
     3a2:	29 f4       	brne	.+10     	; 0x3ae <LCDGotoXY+0x16>
     3a4:	80 5c       	subi	r24, 0xC0	; 192
     3a6:	03 c0       	rjmp	.+6      	; 0x3ae <LCDGotoXY+0x16>
     3a8:	8c 5e       	subi	r24, 0xEC	; 236
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <LCDGotoXY+0x16>
     3ac:	8c 5a       	subi	r24, 0xAC	; 172
     3ae:	80 68       	ori	r24, 0x80	; 128
     3b0:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendCommand>
     3b4:	08 95       	ret

000003b6 <LCDdefinechar>:
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	7c 01       	movw	r14, r24
     3c4:	86 2f       	mov	r24, r22
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	88 0f       	add	r24, r24
     3ce:	99 1f       	adc	r25, r25
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	80 64       	ori	r24, 0x40	; 64
     3d6:	c0 e0       	ldi	r28, 0x00	; 0
     3d8:	d0 e0       	ldi	r29, 0x00	; 0
     3da:	0d c0       	rjmp	.+26     	; 0x3f6 <LCDdefinechar+0x40>
     3dc:	f7 01       	movw	r30, r14
     3de:	ec 0f       	add	r30, r28
     3e0:	fd 1f       	adc	r31, r29
     3e2:	14 91       	lpm	r17, Z
     3e4:	01 e0       	ldi	r16, 0x01	; 1
     3e6:	08 0f       	add	r16, r24
     3e8:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendCommand>
     3ec:	81 2f       	mov	r24, r17
     3ee:	0e 94 80 00 	call	0x100	; 0x100 <LCDsendChar>
     3f2:	21 96       	adiw	r28, 0x01	; 1
     3f4:	80 2f       	mov	r24, r16
     3f6:	c8 30       	cpi	r28, 0x08	; 8
     3f8:	d1 05       	cpc	r29, r1
     3fa:	80 f3       	brcs	.-32     	; 0x3dc <LCDdefinechar+0x26>
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	08 95       	ret

0000040a <LCDinit>:
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	8f e5       	ldi	r24, 0x5F	; 95
     410:	9a ee       	ldi	r25, 0xEA	; 234
     412:	01 97       	sbiw	r24, 0x01	; 1
     414:	f1 f7       	brne	.-4      	; 0x412 <LCDinit+0x8>
     416:	00 c0       	rjmp	.+0      	; 0x418 <LCDinit+0xe>
     418:	00 00       	nop
     41a:	85 b1       	in	r24, 0x05	; 5
     41c:	89 7f       	andi	r24, 0xF9	; 249
     41e:	85 b9       	out	0x05, r24	; 5
     420:	88 b1       	in	r24, 0x08	; 8
     422:	89 7f       	andi	r24, 0xF9	; 249
     424:	88 b9       	out	0x08, r24	; 8
     426:	1b b8       	out	0x0b, r1	; 11
     428:	84 b1       	in	r24, 0x04	; 4
     42a:	86 60       	ori	r24, 0x06	; 6
     42c:	84 b9       	out	0x04, r24	; 4
     42e:	87 b1       	in	r24, 0x07	; 7
     430:	86 60       	ori	r24, 0x06	; 6
     432:	87 b9       	out	0x07, r24	; 7
     434:	8a b1       	in	r24, 0x0a	; 10
     436:	83 60       	ori	r24, 0x03	; 3
     438:	8a b9       	out	0x0a, r24	; 10
     43a:	85 b1       	in	r24, 0x05	; 5
     43c:	89 7f       	andi	r24, 0xF9	; 249
     43e:	85 b9       	out	0x05, r24	; 5
     440:	88 b1       	in	r24, 0x08	; 8
     442:	86 60       	ori	r24, 0x06	; 6
     444:	88 b9       	out	0x08, r24	; 8
     446:	8b b1       	in	r24, 0x0b	; 11
     448:	81 60       	ori	r24, 0x01	; 1
     44a:	8b b9       	out	0x0b, r24	; 11
     44c:	8f e9       	ldi	r24, 0x9F	; 159
     44e:	9f e0       	ldi	r25, 0x0F	; 15
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <LCDinit+0x46>
     454:	00 c0       	rjmp	.+0      	; 0x456 <LCDinit+0x4c>
     456:	00 00       	nop
     458:	8b b1       	in	r24, 0x0b	; 11
     45a:	8e 7f       	andi	r24, 0xFE	; 254
     45c:	8b b9       	out	0x0b, r24	; 11
     45e:	8f e9       	ldi	r24, 0x9F	; 159
     460:	9f e0       	ldi	r25, 0x0F	; 15
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <LCDinit+0x58>
     466:	00 c0       	rjmp	.+0      	; 0x468 <LCDinit+0x5e>
     468:	00 00       	nop
     46a:	85 b1       	in	r24, 0x05	; 5
     46c:	89 7f       	andi	r24, 0xF9	; 249
     46e:	85 b9       	out	0x05, r24	; 5
     470:	88 b1       	in	r24, 0x08	; 8
     472:	86 60       	ori	r24, 0x06	; 6
     474:	88 b9       	out	0x08, r24	; 8
     476:	8b b1       	in	r24, 0x0b	; 11
     478:	81 60       	ori	r24, 0x01	; 1
     47a:	8b b9       	out	0x0b, r24	; 11
     47c:	8f e9       	ldi	r24, 0x9F	; 159
     47e:	9f e0       	ldi	r25, 0x0F	; 15
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	f1 f7       	brne	.-4      	; 0x480 <LCDinit+0x76>
     484:	00 c0       	rjmp	.+0      	; 0x486 <LCDinit+0x7c>
     486:	00 00       	nop
     488:	8b b1       	in	r24, 0x0b	; 11
     48a:	8e 7f       	andi	r24, 0xFE	; 254
     48c:	8b b9       	out	0x0b, r24	; 11
     48e:	8f e9       	ldi	r24, 0x9F	; 159
     490:	9f e0       	ldi	r25, 0x0F	; 15
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <LCDinit+0x88>
     496:	00 c0       	rjmp	.+0      	; 0x498 <LCDinit+0x8e>
     498:	00 00       	nop
     49a:	85 b1       	in	r24, 0x05	; 5
     49c:	89 7f       	andi	r24, 0xF9	; 249
     49e:	85 b9       	out	0x05, r24	; 5
     4a0:	88 b1       	in	r24, 0x08	; 8
     4a2:	89 7f       	andi	r24, 0xF9	; 249
     4a4:	84 60       	ori	r24, 0x04	; 4
     4a6:	88 b9       	out	0x08, r24	; 8
     4a8:	8b b1       	in	r24, 0x0b	; 11
     4aa:	81 60       	ori	r24, 0x01	; 1
     4ac:	8b b9       	out	0x0b, r24	; 11
     4ae:	8f e9       	ldi	r24, 0x9F	; 159
     4b0:	9f e0       	ldi	r25, 0x0F	; 15
     4b2:	01 97       	sbiw	r24, 0x01	; 1
     4b4:	f1 f7       	brne	.-4      	; 0x4b2 <LCDinit+0xa8>
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCDinit+0xae>
     4b8:	00 00       	nop
     4ba:	8b b1       	in	r24, 0x0b	; 11
     4bc:	8e 7f       	andi	r24, 0xFE	; 254
     4be:	8b b9       	out	0x0b, r24	; 11
     4c0:	8f e9       	ldi	r24, 0x9F	; 159
     4c2:	9f e0       	ldi	r25, 0x0F	; 15
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <LCDinit+0xba>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <LCDinit+0xc0>
     4ca:	00 00       	nop
     4cc:	88 e2       	ldi	r24, 0x28	; 40
     4ce:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendCommand>
     4d2:	8c e0       	ldi	r24, 0x0C	; 12
     4d4:	0e 94 18 01 	call	0x230	; 0x230 <LCDsendCommand>
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	c0 e0       	ldi	r28, 0x00	; 0
     4dc:	0a c0       	rjmp	.+20     	; 0x4f2 <LCDinit+0xe8>
     4de:	d1 e0       	ldi	r29, 0x01	; 1
     4e0:	d6 0f       	add	r29, r22
     4e2:	8c 2f       	mov	r24, r28
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	88 59       	subi	r24, 0x98	; 152
     4e8:	9f 4f       	sbci	r25, 0xFF	; 255
     4ea:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCDdefinechar>
     4ee:	c8 5f       	subi	r28, 0xF8	; 248
     4f0:	6d 2f       	mov	r22, r29
     4f2:	c0 34       	cpi	r28, 0x40	; 64
     4f4:	a0 f3       	brcs	.-24     	; 0x4de <LCDinit+0xd4>
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <LCD_Init>:
     4fc:	0e 94 05 02 	call	0x40a	; 0x40a <LCDinit>
     500:	0e 94 ac 01 	call	0x358	; 0x358 <LCDclr>
     504:	0e 94 b0 01 	call	0x360	; 0x360 <LCDhome>
     508:	08 95       	ret

0000050a <KeypadUpdate>:
uint8_t KeypadUpdate(void)
{
    uint8_t fila, col;

    // Primero, ponemos todas las filas en alto (salida '1')
    PORTB |= (1 << PB0) | (1 << PB3) | (1 << PB4);
     50a:	85 b1       	in	r24, 0x05	; 5
     50c:	89 61       	ori	r24, 0x19	; 25
     50e:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << PD7);
     510:	8b b1       	in	r24, 0x0b	; 11
     512:	80 68       	ori	r24, 0x80	; 128
     514:	8b b9       	out	0x0b, r24	; 11

    for (fila = 0; fila < 4; fila++)
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	4a c0       	rjmp	.+148    	; 0x5ae <KeypadUpdate+0xa4>
    {
        // Apago la fila actual (salida '0')
        switch (fila)
     51a:	81 30       	cpi	r24, 0x01	; 1
     51c:	51 f0       	breq	.+20     	; 0x532 <KeypadUpdate+0x28>
     51e:	28 f0       	brcs	.+10     	; 0x52a <KeypadUpdate+0x20>
     520:	82 30       	cpi	r24, 0x02	; 2
     522:	59 f0       	breq	.+22     	; 0x53a <KeypadUpdate+0x30>
     524:	83 30       	cpi	r24, 0x03	; 3
     526:	69 f0       	breq	.+26     	; 0x542 <KeypadUpdate+0x38>
     528:	0f c0       	rjmp	.+30     	; 0x548 <KeypadUpdate+0x3e>
        {
        case 0:
            PORTB &= ~(1 << PB4);
     52a:	95 b1       	in	r25, 0x05	; 5
     52c:	9f 7e       	andi	r25, 0xEF	; 239
     52e:	95 b9       	out	0x05, r25	; 5
            break;
     530:	0b c0       	rjmp	.+22     	; 0x548 <KeypadUpdate+0x3e>
        case 1:
            PORTB &= ~(1 << PB3);
     532:	95 b1       	in	r25, 0x05	; 5
     534:	97 7f       	andi	r25, 0xF7	; 247
     536:	95 b9       	out	0x05, r25	; 5
            break;
     538:	07 c0       	rjmp	.+14     	; 0x548 <KeypadUpdate+0x3e>
        case 2:
            PORTB &= ~(1 << PB0);
     53a:	95 b1       	in	r25, 0x05	; 5
     53c:	9e 7f       	andi	r25, 0xFE	; 254
     53e:	95 b9       	out	0x05, r25	; 5
            break;
     540:	03 c0       	rjmp	.+6      	; 0x548 <KeypadUpdate+0x3e>
        case 3:
            PORTD &= ~(1 << PD7);
     542:	9b b1       	in	r25, 0x0b	; 11
     544:	9f 77       	andi	r25, 0x7F	; 127
     546:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     548:	9a e1       	ldi	r25, 0x1A	; 26
     54a:	9a 95       	dec	r25
     54c:	f1 f7       	brne	.-4      	; 0x54a <KeypadUpdate+0x40>
     54e:	00 c0       	rjmp	.+0      	; 0x550 <KeypadUpdate+0x46>
            break;
        }
		_delay_us(5);
        // Escaneo las columnas
        if (!(PIND & (1 << PD3)))
     550:	4b 99       	sbic	0x09, 3	; 9
     552:	03 c0       	rjmp	.+6      	; 0x55a <KeypadUpdate+0x50>
            return (fila * 4 + 0); // Columna 0
     554:	88 0f       	add	r24, r24
     556:	88 0f       	add	r24, r24
     558:	08 95       	ret
        if (!(PIND & (1 << PD5)))
     55a:	4d 99       	sbic	0x09, 5	; 9
     55c:	04 c0       	rjmp	.+8      	; 0x566 <KeypadUpdate+0x5c>
            return (fila * 4 + 1); // Columna 1
     55e:	88 0f       	add	r24, r24
     560:	88 0f       	add	r24, r24
     562:	8f 5f       	subi	r24, 0xFF	; 255
     564:	08 95       	ret
        if (!(PIND & (1 << PD4)))
     566:	4c 99       	sbic	0x09, 4	; 9
     568:	04 c0       	rjmp	.+8      	; 0x572 <KeypadUpdate+0x68>
            return (fila * 4 + 2); // Columna 2
     56a:	88 0f       	add	r24, r24
     56c:	88 0f       	add	r24, r24
     56e:	8e 5f       	subi	r24, 0xFE	; 254
     570:	08 95       	ret
        if (!(PIND & (1 << PD2)))
     572:	4a 99       	sbic	0x09, 2	; 9
     574:	04 c0       	rjmp	.+8      	; 0x57e <KeypadUpdate+0x74>
            return (fila * 4 + 3); // Columna 3
     576:	88 0f       	add	r24, r24
     578:	88 0f       	add	r24, r24
     57a:	8d 5f       	subi	r24, 0xFD	; 253
     57c:	08 95       	ret

        // Vuelvo a poner la fila en alto antes de la siguiente iteracion
        switch (fila)
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	51 f0       	breq	.+20     	; 0x596 <KeypadUpdate+0x8c>
     582:	28 f0       	brcs	.+10     	; 0x58e <KeypadUpdate+0x84>
     584:	82 30       	cpi	r24, 0x02	; 2
     586:	59 f0       	breq	.+22     	; 0x59e <KeypadUpdate+0x94>
     588:	83 30       	cpi	r24, 0x03	; 3
     58a:	69 f0       	breq	.+26     	; 0x5a6 <KeypadUpdate+0x9c>
     58c:	0f c0       	rjmp	.+30     	; 0x5ac <KeypadUpdate+0xa2>
        {
        case 0:
            PORTB |= (1 << PB4);
     58e:	95 b1       	in	r25, 0x05	; 5
     590:	90 61       	ori	r25, 0x10	; 16
     592:	95 b9       	out	0x05, r25	; 5
            break;
     594:	0b c0       	rjmp	.+22     	; 0x5ac <KeypadUpdate+0xa2>
        case 1:
            PORTB |= (1 << PB3);
     596:	95 b1       	in	r25, 0x05	; 5
     598:	98 60       	ori	r25, 0x08	; 8
     59a:	95 b9       	out	0x05, r25	; 5
            break;
     59c:	07 c0       	rjmp	.+14     	; 0x5ac <KeypadUpdate+0xa2>
        case 2:
            PORTB |= (1 << PB0);
     59e:	95 b1       	in	r25, 0x05	; 5
     5a0:	91 60       	ori	r25, 0x01	; 1
     5a2:	95 b9       	out	0x05, r25	; 5
            break;
     5a4:	03 c0       	rjmp	.+6      	; 0x5ac <KeypadUpdate+0xa2>
        case 3:
            PORTD |= (1 << PD7);
     5a6:	9b b1       	in	r25, 0x0b	; 11
     5a8:	90 68       	ori	r25, 0x80	; 128
     5aa:	9b b9       	out	0x0b, r25	; 11

    // Primero, ponemos todas las filas en alto (salida '1')
    PORTB |= (1 << PB0) | (1 << PB3) | (1 << PB4);
    PORTD |= (1 << PD7);

    for (fila = 0; fila < 4; fila++)
     5ac:	8f 5f       	subi	r24, 0xFF	; 255
     5ae:	84 30       	cpi	r24, 0x04	; 4
     5b0:	08 f4       	brcc	.+2      	; 0x5b4 <KeypadUpdate+0xaa>
     5b2:	b3 cf       	rjmp	.-154    	; 0x51a <KeypadUpdate+0x10>
        case 3:
            PORTD |= (1 << PD7);
            break;
        }
    }
    return 0xFF; // No se presiono tecla
     5b4:	8f ef       	ldi	r24, 0xFF	; 255
}
     5b6:	08 95       	ret

000005b8 <KEYPAD_Scan>:

uint8_t KEYPAD_Scan(uint8_t *pkey)
{
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	ec 01       	movw	r28, r24
    static uint8_t Old_key = 0xFF, Last_valid_key = 0xFF;
    uint8_t Key;

    Key = KeyMap[KeypadUpdate()]; // Esta funcion la tenos que implementar o conectar
     5be:	0e 94 85 02 	call	0x50a	; 0x50a <KeypadUpdate>
     5c2:	e8 2f       	mov	r30, r24
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	e7 5c       	subi	r30, 0xC7	; 199
     5c8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ca:	80 81       	ld	r24, Z

    if (Key == 0xFF)
     5cc:	8f 3f       	cpi	r24, 0xFF	; 255
     5ce:	31 f4       	brne	.+12     	; 0x5dc <KEYPAD_Scan+0x24>
    {
        Old_key = 0xFF;
     5d0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Old_key.1756>
        Last_valid_key = 0xFF;
     5d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Last_valid_key.1757>
        return 0;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	10 c0       	rjmp	.+32     	; 0x5fc <KEYPAD_Scan+0x44>
    }

    if (Key == Old_key)
     5dc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Old_key.1756>
     5e0:	89 13       	cpse	r24, r25
     5e2:	09 c0       	rjmp	.+18     	; 0x5f6 <KEYPAD_Scan+0x3e>
    {
        if (Key != Last_valid_key)
     5e4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Last_valid_key.1757>
     5e8:	89 17       	cp	r24, r25
     5ea:	29 f0       	breq	.+10     	; 0x5f6 <KEYPAD_Scan+0x3e>
        {
            *pkey = Key;
     5ec:	88 83       	st	Y, r24
            Last_valid_key = Key;
     5ee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Last_valid_key.1757>
            return 1;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	03 c0       	rjmp	.+6      	; 0x5fc <KEYPAD_Scan+0x44>
        }
    }

    Old_key = Key;
     5f6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Old_key.1756>
    return 0;
     5fa:	80 e0       	ldi	r24, 0x00	; 0
}
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <keypad_init>:

void keypad_init(void)
{
    // Filas como salidas
    DDRB |= (1 << PB0) | (1 << PB3) | (1 << PB4);
     602:	84 b1       	in	r24, 0x04	; 4
     604:	89 61       	ori	r24, 0x19	; 25
     606:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << PD7);
     608:	8a b1       	in	r24, 0x0a	; 10
     60a:	80 68       	ori	r24, 0x80	; 128
     60c:	8a b9       	out	0x0a, r24	; 10

    // Columnas como entradas con pull-up
    DDRD &= ~((1 << PD2) | (1 << PD3) | (1 << PD4) | (1 << PD5));
     60e:	8a b1       	in	r24, 0x0a	; 10
     610:	83 7c       	andi	r24, 0xC3	; 195
     612:	8a b9       	out	0x0a, r24	; 10
    PORTB |= (1 << PB0) | (1 << PB3) | (1 << PB4);
     614:	85 b1       	in	r24, 0x05	; 5
     616:	89 61       	ori	r24, 0x19	; 25
     618:	85 b9       	out	0x05, r24	; 5
    PORTD |= (1 << PD2) | (1 << PD3) | (1 << PD4) | (1 << PD5);
     61a:	8b b1       	in	r24, 0x0b	; 11
     61c:	8c 63       	ori	r24, 0x3C	; 60
     61e:	8b b9       	out	0x0b, r24	; 11
     620:	08 95       	ret

00000622 <get_random_word>:
#define CHAR_INICIO '*'
#define CHAR_CONFIRMAR '#'
#define NUM_WORDS 25

char *get_random_word(const char *dict[], uint8_t size)
{
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	8c 01       	movw	r16, r24
     62a:	c6 2f       	mov	r28, r22
    return (char *)dict[rand() % size];
     62c:	0e 94 a1 05 	call	0xb42	; 0xb42 <rand>
     630:	6c 2f       	mov	r22, r28
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__divmodhi4>
     638:	fc 01       	movw	r30, r24
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	e0 0f       	add	r30, r16
     640:	f1 1f       	adc	r31, r17
}
     642:	80 81       	ld	r24, Z
     644:	91 81       	ldd	r25, Z+1	; 0x01
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	08 95       	ret

0000064e <init_mef>:
char *password, guess[6];
char life[7];

void init_mef()
{
    curr_state = INICIO;
     64e:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <curr_state>
     652:	08 95       	ret

00000654 <update_mef>:
}

void update_mef(volatile uint16_t *seg, uint8_t key)
{
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	64 97       	sbiw	r28, 0x14	; 20
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	cd bf       	out	0x3d, r28	; 61
     670:	8c 01       	movw	r16, r24
    switch (curr_state)
     672:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <curr_state>
     676:	82 30       	cpi	r24, 0x02	; 2
     678:	09 f4       	brne	.+2      	; 0x67c <update_mef+0x28>
     67a:	91 c0       	rjmp	.+290    	; 0x79e <update_mef+0x14a>
     67c:	30 f4       	brcc	.+12     	; 0x68a <update_mef+0x36>
     67e:	88 23       	and	r24, r24
     680:	59 f0       	breq	.+22     	; 0x698 <update_mef+0x44>
     682:	81 30       	cpi	r24, 0x01	; 1
     684:	09 f4       	brne	.+2      	; 0x688 <update_mef+0x34>
     686:	47 c0       	rjmp	.+142    	; 0x716 <update_mef+0xc2>
     688:	75 c1       	rjmp	.+746    	; 0x974 <__stack+0x75>
     68a:	83 30       	cpi	r24, 0x03	; 3
     68c:	09 f4       	brne	.+2      	; 0x690 <update_mef+0x3c>
     68e:	02 c1       	rjmp	.+516    	; 0x894 <__DATA_REGION_LENGTH__+0x94>
     690:	84 30       	cpi	r24, 0x04	; 4
     692:	09 f4       	brne	.+2      	; 0x696 <update_mef+0x42>
     694:	2f c1       	rjmp	.+606    	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
     696:	6e c1       	rjmp	.+732    	; 0x974 <__stack+0x75>
    {
    case INICIO:
        if (Ftime)
     698:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Ftime>
     69c:	88 23       	and	r24, r24
     69e:	c9 f0       	breq	.+50     	; 0x6d2 <update_mef+0x7e>
        {
            LCDclr();
     6a0:	0e 94 ac 01 	call	0x358	; 0x358 <LCDclr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a4:	8f e3       	ldi	r24, 0x3F	; 63
     6a6:	9c e9       	ldi	r25, 0x9C	; 156
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <update_mef+0x54>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <update_mef+0x5a>
     6ae:	00 00       	nop
            _delay_ms(10);
            LCDstring("Bienvenido!!", 12);
     6b0:	6c e0       	ldi	r22, 0x0C	; 12
     6b2:	89 e4       	ldi	r24, 0x49	; 73
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 b4 01 	call	0x368	; 0x368 <LCDstring>
            LCDGotoXY(0, 1);
     6ba:	61 e0       	ldi	r22, 0x01	; 1
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	0e 94 cc 01 	call	0x398	; 0x398 <LCDGotoXY>
            LCDstring("Presione *", 10);
     6c2:	6a e0       	ldi	r22, 0x0A	; 10
     6c4:	86 e5       	ldi	r24, 0x56	; 86
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	0e 94 b4 01 	call	0x368	; 0x368 <LCDstring>
            Ftime = 0;
     6cc:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Ftime>
     6d0:	51 c1       	rjmp	.+674    	; 0x974 <__stack+0x75>
        }
        else
        {
            if (key == '*')
     6d2:	6a 32       	cpi	r22, 0x2A	; 42
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <update_mef+0x84>
     6d6:	4e c1       	rjmp	.+668    	; 0x974 <__stack+0x75>
            {
                strcpy(guess, "*****");
     6d8:	86 e0       	ldi	r24, 0x06	; 6
     6da:	e0 e8       	ldi	r30, 0x80	; 128
     6dc:	f1 e0       	ldi	r31, 0x01	; 1
     6de:	ae e2       	ldi	r26, 0x2E	; 46
     6e0:	b2 e0       	ldi	r27, 0x02	; 2
     6e2:	01 90       	ld	r0, Z+
     6e4:	0d 92       	st	X+, r0
     6e6:	8a 95       	dec	r24
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <update_mef+0x8e>
                first = 1;
     6ea:	11 e0       	ldi	r17, 0x01	; 1
     6ec:	10 93 3c 02 	sts	0x023C, r17	; 0x80023c <first>
                hp = 3;
     6f0:	83 e0       	ldi	r24, 0x03	; 3
     6f2:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <hp>
                pass_index = 0;
     6f6:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <__data_end>
                password = get_random_word(dict, NUM_WORDS);
     6fa:	69 e1       	ldi	r22, 0x19	; 25
     6fc:	87 e0       	ldi	r24, 0x07	; 7
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	0e 94 11 03 	call	0x622	; 0x622 <get_random_word>
     704:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <password+0x1>
     708:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <password>
                curr_state = INICIO_JUEGO;
     70c:	10 93 2d 02 	sts	0x022D, r17	; 0x80022d <curr_state>
                Ftime = 1;
     710:	10 93 06 01 	sts	0x0106, r17	; 0x800106 <Ftime>
     714:	2f c1       	rjmp	.+606    	; 0x974 <__stack+0x75>
        }
        break;

    case INICIO_JUEGO:
        // mostrar password por dos segundos
        if (first)
     716:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <first>
     71a:	88 23       	and	r24, r24
     71c:	d9 f0       	breq	.+54     	; 0x754 <update_mef+0x100>
        {
            LCDclr();
     71e:	0e 94 ac 01 	call	0x358	; 0x358 <LCDclr>
     722:	9f ef       	ldi	r25, 0xFF	; 255
     724:	ef ec       	ldi	r30, 0xCF	; 207
     726:	f7 e0       	ldi	r31, 0x07	; 7
     728:	91 50       	subi	r25, 0x01	; 1
     72a:	e0 40       	sbci	r30, 0x00	; 0
     72c:	f0 40       	sbci	r31, 0x00	; 0
     72e:	e1 f7       	brne	.-8      	; 0x728 <update_mef+0xd4>
     730:	00 c0       	rjmp	.+0      	; 0x732 <update_mef+0xde>
     732:	00 00       	nop
            _delay_ms(160);
            LCDGotoXY(0, 0);
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	0e 94 cc 01 	call	0x398	; 0x398 <LCDGotoXY>
            LCDstring(password, 5);
     73c:	65 e0       	ldi	r22, 0x05	; 5
     73e:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <password>
     742:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <password+0x1>
     746:	0e 94 b4 01 	call	0x368	; 0x368 <LCDstring>
            first = 0;
     74a:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <first>
            *seg = 0;
     74e:	f8 01       	movw	r30, r16
     750:	11 82       	std	Z+1, r1	; 0x01
     752:	10 82       	st	Z, r1
        }
        // comenzar juego
        if (*seg == 2)
     754:	f8 01       	movw	r30, r16
     756:	80 81       	ld	r24, Z
     758:	91 81       	ldd	r25, Z+1	; 0x01
     75a:	02 97       	sbiw	r24, 0x02	; 2
     75c:	09 f0       	breq	.+2      	; 0x760 <update_mef+0x10c>
     75e:	0a c1       	rjmp	.+532    	; 0x974 <__stack+0x75>
        {
            curr_state = JUEGO;
     760:	82 e0       	ldi	r24, 0x02	; 2
     762:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <curr_state>
            LCDclr();
     766:	0e 94 ac 01 	call	0x358	; 0x358 <LCDclr>
            pass_index = 0;
     76a:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <__data_end>
            input_char = 0;
     76e:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <input_char>
            strcpy(life, "<3<3<3");
     772:	87 e0       	ldi	r24, 0x07	; 7
     774:	e6 e8       	ldi	r30, 0x86	; 134
     776:	f1 e0       	ldi	r31, 0x01	; 1
     778:	a4 e3       	ldi	r26, 0x34	; 52
     77a:	b2 e0       	ldi	r27, 0x02	; 2
     77c:	01 90       	ld	r0, Z+
     77e:	0d 92       	st	X+, r0
     780:	8a 95       	dec	r24
     782:	e1 f7       	brne	.-8      	; 0x77c <update_mef+0x128>
            seg = 0;
            LCDGotoXY(0, 0);
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	0e 94 cc 01 	call	0x398	; 0x398 <LCDGotoXY>
            LCDstring((uint8_t *)guess, 5); // Mostrar la palabra oculta
     78c:	65 e0       	ldi	r22, 0x05	; 5
     78e:	8e e2       	ldi	r24, 0x2E	; 46
     790:	92 e0       	ldi	r25, 0x02	; 2
     792:	0e 94 b4 01 	call	0x368	; 0x368 <LCDstring>
            first = 1;
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <first>
     79c:	eb c0       	rjmp	.+470    	; 0x974 <__stack+0x75>
        }
        break;

    case JUEGO:
        if (key != CHAR_CONFIRMAR)
     79e:	63 32       	cpi	r22, 0x23	; 35
     7a0:	89 f0       	breq	.+34     	; 0x7c4 <update_mef+0x170>
        {
            if (key <= '9' && key >= '0')
     7a2:	80 ed       	ldi	r24, 0xD0	; 208
     7a4:	86 0f       	add	r24, r22
     7a6:	8a 30       	cpi	r24, 0x0A	; 10
     7a8:	08 f0       	brcs	.+2      	; 0x7ac <update_mef+0x158>
     7aa:	6a c0       	rjmp	.+212    	; 0x880 <__DATA_REGION_LENGTH__+0x80>
            {
                input_char = input_char * 10 + key - '0';
     7ac:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <input_char>
     7b0:	88 0f       	add	r24, r24
     7b2:	98 2f       	mov	r25, r24
     7b4:	99 0f       	add	r25, r25
     7b6:	99 0f       	add	r25, r25
     7b8:	89 0f       	add	r24, r25
     7ba:	68 0f       	add	r22, r24
     7bc:	60 53       	subi	r22, 0x30	; 48
     7be:	60 93 2b 02 	sts	0x022B, r22	; 0x80022b <input_char>
     7c2:	5e c0       	rjmp	.+188    	; 0x880 <__DATA_REGION_LENGTH__+0x80>
            }
        }
        else
        {
            if (input_char == password[pass_index])
     7c4:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
     7c8:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <password>
     7cc:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <password+0x1>
     7d0:	e8 0f       	add	r30, r24
     7d2:	f1 1d       	adc	r31, r1
     7d4:	90 81       	ld	r25, Z
     7d6:	20 91 2b 02 	lds	r18, 0x022B	; 0x80022b <input_char>
     7da:	92 13       	cpse	r25, r18
     7dc:	1b c0       	rjmp	.+54     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
            {
                guess[pass_index] = password[pass_index];
     7de:	e8 2f       	mov	r30, r24
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	e2 5d       	subi	r30, 0xD2	; 210
     7e4:	fd 4f       	sbci	r31, 0xFD	; 253
     7e6:	90 83       	st	Z, r25
                LCDGotoXY(pass_index, 0);
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	0e 94 cc 01 	call	0x398	; 0x398 <LCDGotoXY>
                LCDsendChar(password[pass_index]);
     7ee:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
     7f2:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <password>
     7f6:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <password+0x1>
     7fa:	e8 0f       	add	r30, r24
     7fc:	f1 1d       	adc	r31, r1
     7fe:	80 81       	ld	r24, Z
     800:	0e 94 80 00 	call	0x100	; 0x100 <LCDsendChar>
                pass_index++;
     804:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
     808:	8f 5f       	subi	r24, 0xFF	; 255
     80a:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__data_end>
                input_char = 0;
     80e:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <input_char>
     812:	28 c0       	rjmp	.+80     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
            }
            else
            {
                hp--;
     814:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <hp>
     818:	81 50       	subi	r24, 0x01	; 1
     81a:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <hp>
                if (hp == 0)
     81e:	81 11       	cpse	r24, r1
     820:	06 c0       	rjmp	.+12     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
                {
                    curr_state = PERDISTE;
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <curr_state>
                    *seg = 0;
     828:	f8 01       	movw	r30, r16
     82a:	11 82       	std	Z+1, r1	; 0x01
     82c:	10 82       	st	Z, r1
                }

                if (hp == 2)
     82e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <hp>
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	31 f4       	brne	.+12     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
                {
                    life[0] = ' ';
     836:	e4 e3       	ldi	r30, 0x34	; 52
     838:	f2 e0       	ldi	r31, 0x02	; 2
     83a:	80 e2       	ldi	r24, 0x20	; 32
     83c:	80 83       	st	Z, r24
                    life[1] = ' ';
     83e:	81 83       	std	Z+1, r24	; 0x01
     840:	0f c0       	rjmp	.+30     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
                }
                else if (hp == 1)
     842:	81 30       	cpi	r24, 0x01	; 1
     844:	31 f4       	brne	.+12     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
                {
                    life[2] = ' ';
     846:	e4 e3       	ldi	r30, 0x34	; 52
     848:	f2 e0       	ldi	r31, 0x02	; 2
     84a:	80 e2       	ldi	r24, 0x20	; 32
     84c:	82 83       	std	Z+2, r24	; 0x02
                    life[3] = ' ';
     84e:	83 83       	std	Z+3, r24	; 0x03
     850:	07 c0       	rjmp	.+14     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
                }
                else if (hp == 0)
     852:	81 11       	cpse	r24, r1
     854:	05 c0       	rjmp	.+10     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
                {
                    life[4] = ' ';
     856:	e4 e3       	ldi	r30, 0x34	; 52
     858:	f2 e0       	ldi	r31, 0x02	; 2
     85a:	80 e2       	ldi	r24, 0x20	; 32
     85c:	84 83       	std	Z+4, r24	; 0x04
                    life[5] = ' ';
     85e:	85 83       	std	Z+5, r24	; 0x05
                }
                input_char = 0;
     860:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <input_char>
            }
            if (pass_index == 5)
     864:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__data_end>
     868:	85 30       	cpi	r24, 0x05	; 5
     86a:	51 f4       	brne	.+20     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
            {
                curr_state = GANASTE;
     86c:	84 e0       	ldi	r24, 0x04	; 4
     86e:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <curr_state>
                sec_to_win = *seg;
     872:	f8 01       	movw	r30, r16
     874:	80 81       	ld	r24, Z
     876:	91 81       	ldd	r25, Z+1	; 0x01
     878:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <sec_to_win>
                *seg = 0;
     87c:	11 82       	std	Z+1, r1	; 0x01
     87e:	10 82       	st	Z, r1
            }
        }
        LCDGotoXY(9, 1);
     880:	61 e0       	ldi	r22, 0x01	; 1
     882:	89 e0       	ldi	r24, 0x09	; 9
     884:	0e 94 cc 01 	call	0x398	; 0x398 <LCDGotoXY>
        LCDstring(life, 6); // Mostrar vidas restantes
     888:	66 e0       	ldi	r22, 0x06	; 6
     88a:	84 e3       	ldi	r24, 0x34	; 52
     88c:	92 e0       	ldi	r25, 0x02	; 2
     88e:	0e 94 b4 01 	call	0x368	; 0x368 <LCDstring>
        break;
     892:	70 c0       	rjmp	.+224    	; 0x974 <__stack+0x75>

    case PERDISTE:
        if (first)
     894:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <first>
     898:	88 23       	and	r24, r24
     89a:	09 f1       	breq	.+66     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
        {
            LCDclr();
     89c:	0e 94 ac 01 	call	0x358	; 0x358 <LCDclr>
     8a0:	ff ef       	ldi	r31, 0xFF	; 255
     8a2:	2f ec       	ldi	r18, 0xCF	; 207
     8a4:	87 e0       	ldi	r24, 0x07	; 7
     8a6:	f1 50       	subi	r31, 0x01	; 1
     8a8:	20 40       	sbci	r18, 0x00	; 0
     8aa:	80 40       	sbci	r24, 0x00	; 0
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
     8b0:	00 00       	nop
            _delay_ms(160);
            LCDstring("Derrota!", 8);
     8b2:	68 e0       	ldi	r22, 0x08	; 8
     8b4:	81 e6       	ldi	r24, 0x61	; 97
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	0e 94 b4 01 	call	0x368	; 0x368 <LCDstring>
            LCDGotoXY(0, 1);
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	0e 94 cc 01 	call	0x398	; 0x398 <LCDGotoXY>
            LCDstring(password, 5);
     8c4:	65 e0       	ldi	r22, 0x05	; 5
     8c6:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <password>
     8ca:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <password+0x1>
     8ce:	0e 94 b4 01 	call	0x368	; 0x368 <LCDstring>
            first = 0;
     8d2:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <first>
            *seg = 0;
     8d6:	f8 01       	movw	r30, r16
     8d8:	11 82       	std	Z+1, r1	; 0x01
     8da:	10 82       	st	Z, r1
     8dc:	4b c0       	rjmp	.+150    	; 0x974 <__stack+0x75>
        }
        else
        {
            if (*seg == 5)
     8de:	f8 01       	movw	r30, r16
     8e0:	80 81       	ld	r24, Z
     8e2:	91 81       	ldd	r25, Z+1	; 0x01
     8e4:	05 97       	sbiw	r24, 0x05	; 5
     8e6:	09 f0       	breq	.+2      	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
     8e8:	45 c0       	rjmp	.+138    	; 0x974 <__stack+0x75>
            {
                curr_state = INICIO;
     8ea:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <curr_state>
                *seg = 0;
     8ee:	11 82       	std	Z+1, r1	; 0x01
     8f0:	10 82       	st	Z, r1
     8f2:	40 c0       	rjmp	.+128    	; 0x974 <__stack+0x75>
            }
        }
        break;

    case GANASTE:
        if (first)
     8f4:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <first>
     8f8:	88 23       	and	r24, r24
     8fa:	99 f1       	breq	.+102    	; 0x962 <__stack+0x63>
        {
            LCDclr();
     8fc:	0e 94 ac 01 	call	0x358	; 0x358 <LCDclr>
     900:	ff ef       	ldi	r31, 0xFF	; 255
     902:	2f ec       	ldi	r18, 0xCF	; 207
     904:	87 e0       	ldi	r24, 0x07	; 7
     906:	f1 50       	subi	r31, 0x01	; 1
     908:	20 40       	sbci	r18, 0x00	; 0
     90a:	80 40       	sbci	r24, 0x00	; 0
     90c:	e1 f7       	brne	.-8      	; 0x906 <__stack+0x7>
     90e:	00 c0       	rjmp	.+0      	; 0x910 <__stack+0x11>
     910:	00 00       	nop
            _delay_ms(160);
            LCDstring("Victoria!", 9);
     912:	69 e0       	ldi	r22, 0x09	; 9
     914:	8a e6       	ldi	r24, 0x6A	; 106
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	0e 94 b4 01 	call	0x368	; 0x368 <LCDstring>
            LCDGotoXY(0, 1);
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	0e 94 cc 01 	call	0x398	; 0x398 <LCDGotoXY>
            char message[20];
            sprintf(message, "Tiempo: %ds", sec_to_win);
     924:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <sec_to_win>
     928:	1f 92       	push	r1
     92a:	8f 93       	push	r24
     92c:	84 e7       	ldi	r24, 0x74	; 116
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	fe 01       	movw	r30, r28
     936:	31 96       	adiw	r30, 0x01	; 1
     938:	7f 01       	movw	r14, r30
     93a:	ff 93       	push	r31
     93c:	ef 93       	push	r30
     93e:	0e 94 b1 05 	call	0xb62	; 0xb62 <sprintf>
            LCDstring(message, 11);
     942:	6b e0       	ldi	r22, 0x0B	; 11
     944:	c7 01       	movw	r24, r14
     946:	0e 94 b4 01 	call	0x368	; 0x368 <LCDstring>
            first = 0;
     94a:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <first>
            *seg = 0;
     94e:	f8 01       	movw	r30, r16
     950:	11 82       	std	Z+1, r1	; 0x01
     952:	10 82       	st	Z, r1
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	09 c0       	rjmp	.+18     	; 0x974 <__stack+0x75>
        }
        else
        {
            if (*seg == 5)
     962:	f8 01       	movw	r30, r16
     964:	80 81       	ld	r24, Z
     966:	91 81       	ldd	r25, Z+1	; 0x01
     968:	05 97       	sbiw	r24, 0x05	; 5
     96a:	21 f4       	brne	.+8      	; 0x974 <__stack+0x75>
            {
                curr_state = INICIO;
     96c:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <curr_state>
                *seg = 0;
     970:	11 82       	std	Z+1, r1	; 0x01
     972:	10 82       	st	Z, r1
            }
        }
        break;
    }
     974:	64 96       	adiw	r28, 0x14	; 20
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	f8 94       	cli
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	cd bf       	out	0x3d, r28	; 61
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	08 95       	ret

0000098e <main>:
#include "mef.h"

volatile uint16_t tick = 0, seg = 0;

int main(void)
{
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	1f 92       	push	r1
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
	init_mef();
     998:	0e 94 27 03 	call	0x64e	; 0x64e <init_mef>
	timer0_init();
     99c:	0e 94 73 00 	call	0xe6	; 0xe6 <timer0_init>
	LCD_Init();
     9a0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCD_Init>
	keypad_init();
     9a4:	0e 94 01 03 	call	0x602	; 0x602 <keypad_init>
     9a8:	2f ef       	ldi	r18, 0xFF	; 255
     9aa:	81 ee       	ldi	r24, 0xE1	; 225
     9ac:	94 e0       	ldi	r25, 0x04	; 4
     9ae:	21 50       	subi	r18, 0x01	; 1
     9b0:	80 40       	sbci	r24, 0x00	; 0
     9b2:	90 40       	sbci	r25, 0x00	; 0
     9b4:	e1 f7       	brne	.-8      	; 0x9ae <main+0x20>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <main+0x2a>
     9b8:	00 00       	nop
	_delay_ms(100);
	uint8_t key;

	while (1)
	{
		if (!KEYPAD_Scan(&key))
     9ba:	ce 01       	movw	r24, r28
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <KEYPAD_Scan>
     9c2:	81 11       	cpse	r24, r1
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <main+0x3c>
		{
			key = 0xFF;
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	89 83       	std	Y+1, r24	; 0x01
     9ca:	8f e3       	ldi	r24, 0x3F	; 63
     9cc:	9c e9       	ldi	r25, 0x9C	; 156
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	f1 f7       	brne	.-4      	; 0x9ce <main+0x40>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <main+0x46>
     9d4:	00 00       	nop
		}
		_delay_ms(10);
		update_mef(&seg, key);
     9d6:	69 81       	ldd	r22, Y+1	; 0x01
     9d8:	85 e2       	ldi	r24, 0x25	; 37
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	0e 94 2a 03 	call	0x654	; 0x654 <update_mef>
	}
     9e0:	ec cf       	rjmp	.-40     	; 0x9ba <main+0x2c>

000009e2 <__vector_14>:

	return 0;
}

ISR(TIMER0_COMPA_vect)
{
     9e2:	1f 92       	push	r1
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	0f 92       	push	r0
     9ea:	11 24       	eor	r1, r1
     9ec:	2f 93       	push	r18
     9ee:	8f 93       	push	r24
     9f0:	9f 93       	push	r25
	tick++;
     9f2:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <tick>
     9f6:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <tick+0x1>
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <tick+0x1>
     a00:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <tick>
	if (tick == 1000)
     a04:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <tick>
     a08:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <tick+0x1>
     a0c:	88 3e       	cpi	r24, 0xE8	; 232
     a0e:	93 40       	sbci	r25, 0x03	; 3
     a10:	69 f4       	brne	.+26     	; 0xa2c <__vector_14+0x4a>
	{
		tick = 0;
     a12:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <tick+0x1>
     a16:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <tick>
		seg++;
     a1a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <seg>
     a1e:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <seg+0x1>
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <seg+0x1>
     a28:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <seg>
	}
     a2c:	9f 91       	pop	r25
     a2e:	8f 91       	pop	r24
     a30:	2f 91       	pop	r18
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti

00000a3c <__divmodhi4>:
     a3c:	97 fb       	bst	r25, 7
     a3e:	07 2e       	mov	r0, r23
     a40:	16 f4       	brtc	.+4      	; 0xa46 <__divmodhi4+0xa>
     a42:	00 94       	com	r0
     a44:	07 d0       	rcall	.+14     	; 0xa54 <__divmodhi4_neg1>
     a46:	77 fd       	sbrc	r23, 7
     a48:	09 d0       	rcall	.+18     	; 0xa5c <__divmodhi4_neg2>
     a4a:	0e 94 41 05 	call	0xa82	; 0xa82 <__udivmodhi4>
     a4e:	07 fc       	sbrc	r0, 7
     a50:	05 d0       	rcall	.+10     	; 0xa5c <__divmodhi4_neg2>
     a52:	3e f4       	brtc	.+14     	; 0xa62 <__divmodhi4_exit>

00000a54 <__divmodhi4_neg1>:
     a54:	90 95       	com	r25
     a56:	81 95       	neg	r24
     a58:	9f 4f       	sbci	r25, 0xFF	; 255
     a5a:	08 95       	ret

00000a5c <__divmodhi4_neg2>:
     a5c:	70 95       	com	r23
     a5e:	61 95       	neg	r22
     a60:	7f 4f       	sbci	r23, 0xFF	; 255

00000a62 <__divmodhi4_exit>:
     a62:	08 95       	ret

00000a64 <__umulhisi3>:
     a64:	a2 9f       	mul	r26, r18
     a66:	b0 01       	movw	r22, r0
     a68:	b3 9f       	mul	r27, r19
     a6a:	c0 01       	movw	r24, r0
     a6c:	a3 9f       	mul	r26, r19
     a6e:	70 0d       	add	r23, r0
     a70:	81 1d       	adc	r24, r1
     a72:	11 24       	eor	r1, r1
     a74:	91 1d       	adc	r25, r1
     a76:	b2 9f       	mul	r27, r18
     a78:	70 0d       	add	r23, r0
     a7a:	81 1d       	adc	r24, r1
     a7c:	11 24       	eor	r1, r1
     a7e:	91 1d       	adc	r25, r1
     a80:	08 95       	ret

00000a82 <__udivmodhi4>:
     a82:	aa 1b       	sub	r26, r26
     a84:	bb 1b       	sub	r27, r27
     a86:	51 e1       	ldi	r21, 0x11	; 17
     a88:	07 c0       	rjmp	.+14     	; 0xa98 <__udivmodhi4_ep>

00000a8a <__udivmodhi4_loop>:
     a8a:	aa 1f       	adc	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	a6 17       	cp	r26, r22
     a90:	b7 07       	cpc	r27, r23
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__udivmodhi4_ep>
     a94:	a6 1b       	sub	r26, r22
     a96:	b7 0b       	sbc	r27, r23

00000a98 <__udivmodhi4_ep>:
     a98:	88 1f       	adc	r24, r24
     a9a:	99 1f       	adc	r25, r25
     a9c:	5a 95       	dec	r21
     a9e:	a9 f7       	brne	.-22     	; 0xa8a <__udivmodhi4_loop>
     aa0:	80 95       	com	r24
     aa2:	90 95       	com	r25
     aa4:	bc 01       	movw	r22, r24
     aa6:	cd 01       	movw	r24, r26
     aa8:	08 95       	ret

00000aaa <do_rand>:
     aaa:	8f 92       	push	r8
     aac:	9f 92       	push	r9
     aae:	af 92       	push	r10
     ab0:	bf 92       	push	r11
     ab2:	cf 92       	push	r12
     ab4:	df 92       	push	r13
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	ec 01       	movw	r28, r24
     ac0:	68 81       	ld	r22, Y
     ac2:	79 81       	ldd	r23, Y+1	; 0x01
     ac4:	8a 81       	ldd	r24, Y+2	; 0x02
     ac6:	9b 81       	ldd	r25, Y+3	; 0x03
     ac8:	61 15       	cp	r22, r1
     aca:	71 05       	cpc	r23, r1
     acc:	81 05       	cpc	r24, r1
     ace:	91 05       	cpc	r25, r1
     ad0:	21 f4       	brne	.+8      	; 0xada <do_rand+0x30>
     ad2:	64 e2       	ldi	r22, 0x24	; 36
     ad4:	79 ed       	ldi	r23, 0xD9	; 217
     ad6:	8b e5       	ldi	r24, 0x5B	; 91
     ad8:	97 e0       	ldi	r25, 0x07	; 7
     ada:	2d e1       	ldi	r18, 0x1D	; 29
     adc:	33 ef       	ldi	r19, 0xF3	; 243
     ade:	41 e0       	ldi	r20, 0x01	; 1
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__divmodsi4>
     ae6:	49 01       	movw	r8, r18
     ae8:	5a 01       	movw	r10, r20
     aea:	9b 01       	movw	r18, r22
     aec:	ac 01       	movw	r20, r24
     aee:	a7 ea       	ldi	r26, 0xA7	; 167
     af0:	b1 e4       	ldi	r27, 0x41	; 65
     af2:	0e 94 83 08 	call	0x1106	; 0x1106 <__muluhisi3>
     af6:	6b 01       	movw	r12, r22
     af8:	7c 01       	movw	r14, r24
     afa:	ac ee       	ldi	r26, 0xEC	; 236
     afc:	b4 ef       	ldi	r27, 0xF4	; 244
     afe:	a5 01       	movw	r20, r10
     b00:	94 01       	movw	r18, r8
     b02:	0e 94 91 08 	call	0x1122	; 0x1122 <__mulohisi3>
     b06:	dc 01       	movw	r26, r24
     b08:	cb 01       	movw	r24, r22
     b0a:	8c 0d       	add	r24, r12
     b0c:	9d 1d       	adc	r25, r13
     b0e:	ae 1d       	adc	r26, r14
     b10:	bf 1d       	adc	r27, r15
     b12:	b7 ff       	sbrs	r27, 7
     b14:	03 c0       	rjmp	.+6      	; 0xb1c <do_rand+0x72>
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	a1 09       	sbc	r26, r1
     b1a:	b0 48       	sbci	r27, 0x80	; 128
     b1c:	88 83       	st	Y, r24
     b1e:	99 83       	std	Y+1, r25	; 0x01
     b20:	aa 83       	std	Y+2, r26	; 0x02
     b22:	bb 83       	std	Y+3, r27	; 0x03
     b24:	9f 77       	andi	r25, 0x7F	; 127
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	df 90       	pop	r13
     b30:	cf 90       	pop	r12
     b32:	bf 90       	pop	r11
     b34:	af 90       	pop	r10
     b36:	9f 90       	pop	r9
     b38:	8f 90       	pop	r8
     b3a:	08 95       	ret

00000b3c <rand_r>:
     b3c:	0e 94 55 05 	call	0xaaa	; 0xaaa <do_rand>
     b40:	08 95       	ret

00000b42 <rand>:
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 55 05 	call	0xaaa	; 0xaaa <do_rand>
     b4a:	08 95       	ret

00000b4c <srand>:
     b4c:	a0 e0       	ldi	r26, 0x00	; 0
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     b54:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b58:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     b5c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     b60:	08 95       	ret

00000b62 <sprintf>:
     b62:	ae e0       	ldi	r26, 0x0E	; 14
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e7 eb       	ldi	r30, 0xB7	; 183
     b68:	f5 e0       	ldi	r31, 0x05	; 5
     b6a:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__prologue_saves__+0x1c>
     b6e:	0d 89       	ldd	r16, Y+21	; 0x15
     b70:	1e 89       	ldd	r17, Y+22	; 0x16
     b72:	86 e0       	ldi	r24, 0x06	; 6
     b74:	8c 83       	std	Y+4, r24	; 0x04
     b76:	1a 83       	std	Y+2, r17	; 0x02
     b78:	09 83       	std	Y+1, r16	; 0x01
     b7a:	8f ef       	ldi	r24, 0xFF	; 255
     b7c:	9f e7       	ldi	r25, 0x7F	; 127
     b7e:	9e 83       	std	Y+6, r25	; 0x06
     b80:	8d 83       	std	Y+5, r24	; 0x05
     b82:	ae 01       	movw	r20, r28
     b84:	47 5e       	subi	r20, 0xE7	; 231
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	6f 89       	ldd	r22, Y+23	; 0x17
     b8a:	78 8d       	ldd	r23, Y+24	; 0x18
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	0e 94 d3 05 	call	0xba6	; 0xba6 <vfprintf>
     b94:	ef 81       	ldd	r30, Y+7	; 0x07
     b96:	f8 85       	ldd	r31, Y+8	; 0x08
     b98:	e0 0f       	add	r30, r16
     b9a:	f1 1f       	adc	r31, r17
     b9c:	10 82       	st	Z, r1
     b9e:	2e 96       	adiw	r28, 0x0e	; 14
     ba0:	e4 e0       	ldi	r30, 0x04	; 4
     ba2:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <__epilogue_restores__+0x1c>

00000ba6 <vfprintf>:
     ba6:	ab e0       	ldi	r26, 0x0B	; 11
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e9 ed       	ldi	r30, 0xD9	; 217
     bac:	f5 e0       	ldi	r31, 0x05	; 5
     bae:	0c 94 96 08 	jmp	0x112c	; 0x112c <__prologue_saves__>
     bb2:	6c 01       	movw	r12, r24
     bb4:	7b 01       	movw	r14, r22
     bb6:	8a 01       	movw	r16, r20
     bb8:	fc 01       	movw	r30, r24
     bba:	17 82       	std	Z+7, r1	; 0x07
     bbc:	16 82       	std	Z+6, r1	; 0x06
     bbe:	83 81       	ldd	r24, Z+3	; 0x03
     bc0:	81 ff       	sbrs	r24, 1
     bc2:	cc c1       	rjmp	.+920    	; 0xf5c <vfprintf+0x3b6>
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	3c 01       	movw	r6, r24
     bca:	f6 01       	movw	r30, r12
     bcc:	93 81       	ldd	r25, Z+3	; 0x03
     bce:	f7 01       	movw	r30, r14
     bd0:	93 fd       	sbrc	r25, 3
     bd2:	85 91       	lpm	r24, Z+
     bd4:	93 ff       	sbrs	r25, 3
     bd6:	81 91       	ld	r24, Z+
     bd8:	7f 01       	movw	r14, r30
     bda:	88 23       	and	r24, r24
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <vfprintf+0x3a>
     bde:	ba c1       	rjmp	.+884    	; 0xf54 <vfprintf+0x3ae>
     be0:	85 32       	cpi	r24, 0x25	; 37
     be2:	39 f4       	brne	.+14     	; 0xbf2 <vfprintf+0x4c>
     be4:	93 fd       	sbrc	r25, 3
     be6:	85 91       	lpm	r24, Z+
     be8:	93 ff       	sbrs	r25, 3
     bea:	81 91       	ld	r24, Z+
     bec:	7f 01       	movw	r14, r30
     bee:	85 32       	cpi	r24, 0x25	; 37
     bf0:	29 f4       	brne	.+10     	; 0xbfc <vfprintf+0x56>
     bf2:	b6 01       	movw	r22, r12
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     bfa:	e7 cf       	rjmp	.-50     	; 0xbca <vfprintf+0x24>
     bfc:	91 2c       	mov	r9, r1
     bfe:	21 2c       	mov	r2, r1
     c00:	31 2c       	mov	r3, r1
     c02:	ff e1       	ldi	r31, 0x1F	; 31
     c04:	f3 15       	cp	r31, r3
     c06:	d8 f0       	brcs	.+54     	; 0xc3e <vfprintf+0x98>
     c08:	8b 32       	cpi	r24, 0x2B	; 43
     c0a:	79 f0       	breq	.+30     	; 0xc2a <vfprintf+0x84>
     c0c:	38 f4       	brcc	.+14     	; 0xc1c <vfprintf+0x76>
     c0e:	80 32       	cpi	r24, 0x20	; 32
     c10:	79 f0       	breq	.+30     	; 0xc30 <vfprintf+0x8a>
     c12:	83 32       	cpi	r24, 0x23	; 35
     c14:	a1 f4       	brne	.+40     	; 0xc3e <vfprintf+0x98>
     c16:	23 2d       	mov	r18, r3
     c18:	20 61       	ori	r18, 0x10	; 16
     c1a:	1d c0       	rjmp	.+58     	; 0xc56 <vfprintf+0xb0>
     c1c:	8d 32       	cpi	r24, 0x2D	; 45
     c1e:	61 f0       	breq	.+24     	; 0xc38 <vfprintf+0x92>
     c20:	80 33       	cpi	r24, 0x30	; 48
     c22:	69 f4       	brne	.+26     	; 0xc3e <vfprintf+0x98>
     c24:	23 2d       	mov	r18, r3
     c26:	21 60       	ori	r18, 0x01	; 1
     c28:	16 c0       	rjmp	.+44     	; 0xc56 <vfprintf+0xb0>
     c2a:	83 2d       	mov	r24, r3
     c2c:	82 60       	ori	r24, 0x02	; 2
     c2e:	38 2e       	mov	r3, r24
     c30:	e3 2d       	mov	r30, r3
     c32:	e4 60       	ori	r30, 0x04	; 4
     c34:	3e 2e       	mov	r3, r30
     c36:	2a c0       	rjmp	.+84     	; 0xc8c <vfprintf+0xe6>
     c38:	f3 2d       	mov	r31, r3
     c3a:	f8 60       	ori	r31, 0x08	; 8
     c3c:	1d c0       	rjmp	.+58     	; 0xc78 <vfprintf+0xd2>
     c3e:	37 fc       	sbrc	r3, 7
     c40:	2d c0       	rjmp	.+90     	; 0xc9c <vfprintf+0xf6>
     c42:	20 ed       	ldi	r18, 0xD0	; 208
     c44:	28 0f       	add	r18, r24
     c46:	2a 30       	cpi	r18, 0x0A	; 10
     c48:	40 f0       	brcs	.+16     	; 0xc5a <vfprintf+0xb4>
     c4a:	8e 32       	cpi	r24, 0x2E	; 46
     c4c:	b9 f4       	brne	.+46     	; 0xc7c <vfprintf+0xd6>
     c4e:	36 fc       	sbrc	r3, 6
     c50:	81 c1       	rjmp	.+770    	; 0xf54 <vfprintf+0x3ae>
     c52:	23 2d       	mov	r18, r3
     c54:	20 64       	ori	r18, 0x40	; 64
     c56:	32 2e       	mov	r3, r18
     c58:	19 c0       	rjmp	.+50     	; 0xc8c <vfprintf+0xe6>
     c5a:	36 fe       	sbrs	r3, 6
     c5c:	06 c0       	rjmp	.+12     	; 0xc6a <vfprintf+0xc4>
     c5e:	8a e0       	ldi	r24, 0x0A	; 10
     c60:	98 9e       	mul	r9, r24
     c62:	20 0d       	add	r18, r0
     c64:	11 24       	eor	r1, r1
     c66:	92 2e       	mov	r9, r18
     c68:	11 c0       	rjmp	.+34     	; 0xc8c <vfprintf+0xe6>
     c6a:	ea e0       	ldi	r30, 0x0A	; 10
     c6c:	2e 9e       	mul	r2, r30
     c6e:	20 0d       	add	r18, r0
     c70:	11 24       	eor	r1, r1
     c72:	22 2e       	mov	r2, r18
     c74:	f3 2d       	mov	r31, r3
     c76:	f0 62       	ori	r31, 0x20	; 32
     c78:	3f 2e       	mov	r3, r31
     c7a:	08 c0       	rjmp	.+16     	; 0xc8c <vfprintf+0xe6>
     c7c:	8c 36       	cpi	r24, 0x6C	; 108
     c7e:	21 f4       	brne	.+8      	; 0xc88 <vfprintf+0xe2>
     c80:	83 2d       	mov	r24, r3
     c82:	80 68       	ori	r24, 0x80	; 128
     c84:	38 2e       	mov	r3, r24
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <vfprintf+0xe6>
     c88:	88 36       	cpi	r24, 0x68	; 104
     c8a:	41 f4       	brne	.+16     	; 0xc9c <vfprintf+0xf6>
     c8c:	f7 01       	movw	r30, r14
     c8e:	93 fd       	sbrc	r25, 3
     c90:	85 91       	lpm	r24, Z+
     c92:	93 ff       	sbrs	r25, 3
     c94:	81 91       	ld	r24, Z+
     c96:	7f 01       	movw	r14, r30
     c98:	81 11       	cpse	r24, r1
     c9a:	b3 cf       	rjmp	.-154    	; 0xc02 <vfprintf+0x5c>
     c9c:	98 2f       	mov	r25, r24
     c9e:	9f 7d       	andi	r25, 0xDF	; 223
     ca0:	95 54       	subi	r25, 0x45	; 69
     ca2:	93 30       	cpi	r25, 0x03	; 3
     ca4:	28 f4       	brcc	.+10     	; 0xcb0 <vfprintf+0x10a>
     ca6:	0c 5f       	subi	r16, 0xFC	; 252
     ca8:	1f 4f       	sbci	r17, 0xFF	; 255
     caa:	9f e3       	ldi	r25, 0x3F	; 63
     cac:	99 83       	std	Y+1, r25	; 0x01
     cae:	0d c0       	rjmp	.+26     	; 0xcca <vfprintf+0x124>
     cb0:	83 36       	cpi	r24, 0x63	; 99
     cb2:	31 f0       	breq	.+12     	; 0xcc0 <vfprintf+0x11a>
     cb4:	83 37       	cpi	r24, 0x73	; 115
     cb6:	71 f0       	breq	.+28     	; 0xcd4 <vfprintf+0x12e>
     cb8:	83 35       	cpi	r24, 0x53	; 83
     cba:	09 f0       	breq	.+2      	; 0xcbe <vfprintf+0x118>
     cbc:	59 c0       	rjmp	.+178    	; 0xd70 <vfprintf+0x1ca>
     cbe:	21 c0       	rjmp	.+66     	; 0xd02 <vfprintf+0x15c>
     cc0:	f8 01       	movw	r30, r16
     cc2:	80 81       	ld	r24, Z
     cc4:	89 83       	std	Y+1, r24	; 0x01
     cc6:	0e 5f       	subi	r16, 0xFE	; 254
     cc8:	1f 4f       	sbci	r17, 0xFF	; 255
     cca:	88 24       	eor	r8, r8
     ccc:	83 94       	inc	r8
     cce:	91 2c       	mov	r9, r1
     cd0:	53 01       	movw	r10, r6
     cd2:	13 c0       	rjmp	.+38     	; 0xcfa <vfprintf+0x154>
     cd4:	28 01       	movw	r4, r16
     cd6:	f2 e0       	ldi	r31, 0x02	; 2
     cd8:	4f 0e       	add	r4, r31
     cda:	51 1c       	adc	r5, r1
     cdc:	f8 01       	movw	r30, r16
     cde:	a0 80       	ld	r10, Z
     ce0:	b1 80       	ldd	r11, Z+1	; 0x01
     ce2:	36 fe       	sbrs	r3, 6
     ce4:	03 c0       	rjmp	.+6      	; 0xcec <vfprintf+0x146>
     ce6:	69 2d       	mov	r22, r9
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <vfprintf+0x14a>
     cec:	6f ef       	ldi	r22, 0xFF	; 255
     cee:	7f ef       	ldi	r23, 0xFF	; 255
     cf0:	c5 01       	movw	r24, r10
     cf2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <strnlen>
     cf6:	4c 01       	movw	r8, r24
     cf8:	82 01       	movw	r16, r4
     cfa:	f3 2d       	mov	r31, r3
     cfc:	ff 77       	andi	r31, 0x7F	; 127
     cfe:	3f 2e       	mov	r3, r31
     d00:	16 c0       	rjmp	.+44     	; 0xd2e <vfprintf+0x188>
     d02:	28 01       	movw	r4, r16
     d04:	22 e0       	ldi	r18, 0x02	; 2
     d06:	42 0e       	add	r4, r18
     d08:	51 1c       	adc	r5, r1
     d0a:	f8 01       	movw	r30, r16
     d0c:	a0 80       	ld	r10, Z
     d0e:	b1 80       	ldd	r11, Z+1	; 0x01
     d10:	36 fe       	sbrs	r3, 6
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <vfprintf+0x174>
     d14:	69 2d       	mov	r22, r9
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <vfprintf+0x178>
     d1a:	6f ef       	ldi	r22, 0xFF	; 255
     d1c:	7f ef       	ldi	r23, 0xFF	; 255
     d1e:	c5 01       	movw	r24, r10
     d20:	0e 94 b4 07 	call	0xf68	; 0xf68 <strnlen_P>
     d24:	4c 01       	movw	r8, r24
     d26:	f3 2d       	mov	r31, r3
     d28:	f0 68       	ori	r31, 0x80	; 128
     d2a:	3f 2e       	mov	r3, r31
     d2c:	82 01       	movw	r16, r4
     d2e:	33 fc       	sbrc	r3, 3
     d30:	1b c0       	rjmp	.+54     	; 0xd68 <vfprintf+0x1c2>
     d32:	82 2d       	mov	r24, r2
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	88 16       	cp	r8, r24
     d38:	99 06       	cpc	r9, r25
     d3a:	b0 f4       	brcc	.+44     	; 0xd68 <vfprintf+0x1c2>
     d3c:	b6 01       	movw	r22, r12
     d3e:	80 e2       	ldi	r24, 0x20	; 32
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     d46:	2a 94       	dec	r2
     d48:	f4 cf       	rjmp	.-24     	; 0xd32 <vfprintf+0x18c>
     d4a:	f5 01       	movw	r30, r10
     d4c:	37 fc       	sbrc	r3, 7
     d4e:	85 91       	lpm	r24, Z+
     d50:	37 fe       	sbrs	r3, 7
     d52:	81 91       	ld	r24, Z+
     d54:	5f 01       	movw	r10, r30
     d56:	b6 01       	movw	r22, r12
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     d5e:	21 10       	cpse	r2, r1
     d60:	2a 94       	dec	r2
     d62:	21 e0       	ldi	r18, 0x01	; 1
     d64:	82 1a       	sub	r8, r18
     d66:	91 08       	sbc	r9, r1
     d68:	81 14       	cp	r8, r1
     d6a:	91 04       	cpc	r9, r1
     d6c:	71 f7       	brne	.-36     	; 0xd4a <vfprintf+0x1a4>
     d6e:	e8 c0       	rjmp	.+464    	; 0xf40 <vfprintf+0x39a>
     d70:	84 36       	cpi	r24, 0x64	; 100
     d72:	11 f0       	breq	.+4      	; 0xd78 <vfprintf+0x1d2>
     d74:	89 36       	cpi	r24, 0x69	; 105
     d76:	41 f5       	brne	.+80     	; 0xdc8 <vfprintf+0x222>
     d78:	f8 01       	movw	r30, r16
     d7a:	37 fe       	sbrs	r3, 7
     d7c:	07 c0       	rjmp	.+14     	; 0xd8c <vfprintf+0x1e6>
     d7e:	60 81       	ld	r22, Z
     d80:	71 81       	ldd	r23, Z+1	; 0x01
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	93 81       	ldd	r25, Z+3	; 0x03
     d86:	0c 5f       	subi	r16, 0xFC	; 252
     d88:	1f 4f       	sbci	r17, 0xFF	; 255
     d8a:	08 c0       	rjmp	.+16     	; 0xd9c <vfprintf+0x1f6>
     d8c:	60 81       	ld	r22, Z
     d8e:	71 81       	ldd	r23, Z+1	; 0x01
     d90:	07 2e       	mov	r0, r23
     d92:	00 0c       	add	r0, r0
     d94:	88 0b       	sbc	r24, r24
     d96:	99 0b       	sbc	r25, r25
     d98:	0e 5f       	subi	r16, 0xFE	; 254
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
     d9c:	f3 2d       	mov	r31, r3
     d9e:	ff 76       	andi	r31, 0x6F	; 111
     da0:	3f 2e       	mov	r3, r31
     da2:	97 ff       	sbrs	r25, 7
     da4:	09 c0       	rjmp	.+18     	; 0xdb8 <vfprintf+0x212>
     da6:	90 95       	com	r25
     da8:	80 95       	com	r24
     daa:	70 95       	com	r23
     dac:	61 95       	neg	r22
     dae:	7f 4f       	sbci	r23, 0xFF	; 255
     db0:	8f 4f       	sbci	r24, 0xFF	; 255
     db2:	9f 4f       	sbci	r25, 0xFF	; 255
     db4:	f0 68       	ori	r31, 0x80	; 128
     db6:	3f 2e       	mov	r3, r31
     db8:	2a e0       	ldi	r18, 0x0A	; 10
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	a3 01       	movw	r20, r6
     dbe:	0e 94 06 08 	call	0x100c	; 0x100c <__ultoa_invert>
     dc2:	88 2e       	mov	r8, r24
     dc4:	86 18       	sub	r8, r6
     dc6:	45 c0       	rjmp	.+138    	; 0xe52 <vfprintf+0x2ac>
     dc8:	85 37       	cpi	r24, 0x75	; 117
     dca:	31 f4       	brne	.+12     	; 0xdd8 <vfprintf+0x232>
     dcc:	23 2d       	mov	r18, r3
     dce:	2f 7e       	andi	r18, 0xEF	; 239
     dd0:	b2 2e       	mov	r11, r18
     dd2:	2a e0       	ldi	r18, 0x0A	; 10
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	25 c0       	rjmp	.+74     	; 0xe22 <vfprintf+0x27c>
     dd8:	93 2d       	mov	r25, r3
     dda:	99 7f       	andi	r25, 0xF9	; 249
     ddc:	b9 2e       	mov	r11, r25
     dde:	8f 36       	cpi	r24, 0x6F	; 111
     de0:	c1 f0       	breq	.+48     	; 0xe12 <vfprintf+0x26c>
     de2:	18 f4       	brcc	.+6      	; 0xdea <vfprintf+0x244>
     de4:	88 35       	cpi	r24, 0x58	; 88
     de6:	79 f0       	breq	.+30     	; 0xe06 <vfprintf+0x260>
     de8:	b5 c0       	rjmp	.+362    	; 0xf54 <vfprintf+0x3ae>
     dea:	80 37       	cpi	r24, 0x70	; 112
     dec:	19 f0       	breq	.+6      	; 0xdf4 <vfprintf+0x24e>
     dee:	88 37       	cpi	r24, 0x78	; 120
     df0:	21 f0       	breq	.+8      	; 0xdfa <vfprintf+0x254>
     df2:	b0 c0       	rjmp	.+352    	; 0xf54 <vfprintf+0x3ae>
     df4:	e9 2f       	mov	r30, r25
     df6:	e0 61       	ori	r30, 0x10	; 16
     df8:	be 2e       	mov	r11, r30
     dfa:	b4 fe       	sbrs	r11, 4
     dfc:	0d c0       	rjmp	.+26     	; 0xe18 <vfprintf+0x272>
     dfe:	fb 2d       	mov	r31, r11
     e00:	f4 60       	ori	r31, 0x04	; 4
     e02:	bf 2e       	mov	r11, r31
     e04:	09 c0       	rjmp	.+18     	; 0xe18 <vfprintf+0x272>
     e06:	34 fe       	sbrs	r3, 4
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <vfprintf+0x278>
     e0a:	29 2f       	mov	r18, r25
     e0c:	26 60       	ori	r18, 0x06	; 6
     e0e:	b2 2e       	mov	r11, r18
     e10:	06 c0       	rjmp	.+12     	; 0xe1e <vfprintf+0x278>
     e12:	28 e0       	ldi	r18, 0x08	; 8
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <vfprintf+0x27c>
     e18:	20 e1       	ldi	r18, 0x10	; 16
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <vfprintf+0x27c>
     e1e:	20 e1       	ldi	r18, 0x10	; 16
     e20:	32 e0       	ldi	r19, 0x02	; 2
     e22:	f8 01       	movw	r30, r16
     e24:	b7 fe       	sbrs	r11, 7
     e26:	07 c0       	rjmp	.+14     	; 0xe36 <vfprintf+0x290>
     e28:	60 81       	ld	r22, Z
     e2a:	71 81       	ldd	r23, Z+1	; 0x01
     e2c:	82 81       	ldd	r24, Z+2	; 0x02
     e2e:	93 81       	ldd	r25, Z+3	; 0x03
     e30:	0c 5f       	subi	r16, 0xFC	; 252
     e32:	1f 4f       	sbci	r17, 0xFF	; 255
     e34:	06 c0       	rjmp	.+12     	; 0xe42 <vfprintf+0x29c>
     e36:	60 81       	ld	r22, Z
     e38:	71 81       	ldd	r23, Z+1	; 0x01
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 5f       	subi	r16, 0xFE	; 254
     e40:	1f 4f       	sbci	r17, 0xFF	; 255
     e42:	a3 01       	movw	r20, r6
     e44:	0e 94 06 08 	call	0x100c	; 0x100c <__ultoa_invert>
     e48:	88 2e       	mov	r8, r24
     e4a:	86 18       	sub	r8, r6
     e4c:	fb 2d       	mov	r31, r11
     e4e:	ff 77       	andi	r31, 0x7F	; 127
     e50:	3f 2e       	mov	r3, r31
     e52:	36 fe       	sbrs	r3, 6
     e54:	0d c0       	rjmp	.+26     	; 0xe70 <vfprintf+0x2ca>
     e56:	23 2d       	mov	r18, r3
     e58:	2e 7f       	andi	r18, 0xFE	; 254
     e5a:	a2 2e       	mov	r10, r18
     e5c:	89 14       	cp	r8, r9
     e5e:	58 f4       	brcc	.+22     	; 0xe76 <vfprintf+0x2d0>
     e60:	34 fe       	sbrs	r3, 4
     e62:	0b c0       	rjmp	.+22     	; 0xe7a <vfprintf+0x2d4>
     e64:	32 fc       	sbrc	r3, 2
     e66:	09 c0       	rjmp	.+18     	; 0xe7a <vfprintf+0x2d4>
     e68:	83 2d       	mov	r24, r3
     e6a:	8e 7e       	andi	r24, 0xEE	; 238
     e6c:	a8 2e       	mov	r10, r24
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <vfprintf+0x2d4>
     e70:	b8 2c       	mov	r11, r8
     e72:	a3 2c       	mov	r10, r3
     e74:	03 c0       	rjmp	.+6      	; 0xe7c <vfprintf+0x2d6>
     e76:	b8 2c       	mov	r11, r8
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <vfprintf+0x2d6>
     e7a:	b9 2c       	mov	r11, r9
     e7c:	a4 fe       	sbrs	r10, 4
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <vfprintf+0x2f8>
     e80:	fe 01       	movw	r30, r28
     e82:	e8 0d       	add	r30, r8
     e84:	f1 1d       	adc	r31, r1
     e86:	80 81       	ld	r24, Z
     e88:	80 33       	cpi	r24, 0x30	; 48
     e8a:	21 f4       	brne	.+8      	; 0xe94 <vfprintf+0x2ee>
     e8c:	9a 2d       	mov	r25, r10
     e8e:	99 7e       	andi	r25, 0xE9	; 233
     e90:	a9 2e       	mov	r10, r25
     e92:	09 c0       	rjmp	.+18     	; 0xea6 <vfprintf+0x300>
     e94:	a2 fe       	sbrs	r10, 2
     e96:	06 c0       	rjmp	.+12     	; 0xea4 <vfprintf+0x2fe>
     e98:	b3 94       	inc	r11
     e9a:	b3 94       	inc	r11
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <vfprintf+0x300>
     e9e:	8a 2d       	mov	r24, r10
     ea0:	86 78       	andi	r24, 0x86	; 134
     ea2:	09 f0       	breq	.+2      	; 0xea6 <vfprintf+0x300>
     ea4:	b3 94       	inc	r11
     ea6:	a3 fc       	sbrc	r10, 3
     ea8:	11 c0       	rjmp	.+34     	; 0xecc <vfprintf+0x326>
     eaa:	a0 fe       	sbrs	r10, 0
     eac:	06 c0       	rjmp	.+12     	; 0xeba <vfprintf+0x314>
     eae:	b2 14       	cp	r11, r2
     eb0:	88 f4       	brcc	.+34     	; 0xed4 <vfprintf+0x32e>
     eb2:	28 0c       	add	r2, r8
     eb4:	92 2c       	mov	r9, r2
     eb6:	9b 18       	sub	r9, r11
     eb8:	0e c0       	rjmp	.+28     	; 0xed6 <vfprintf+0x330>
     eba:	b2 14       	cp	r11, r2
     ebc:	60 f4       	brcc	.+24     	; 0xed6 <vfprintf+0x330>
     ebe:	b6 01       	movw	r22, r12
     ec0:	80 e2       	ldi	r24, 0x20	; 32
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     ec8:	b3 94       	inc	r11
     eca:	f7 cf       	rjmp	.-18     	; 0xeba <vfprintf+0x314>
     ecc:	b2 14       	cp	r11, r2
     ece:	18 f4       	brcc	.+6      	; 0xed6 <vfprintf+0x330>
     ed0:	2b 18       	sub	r2, r11
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <vfprintf+0x332>
     ed4:	98 2c       	mov	r9, r8
     ed6:	21 2c       	mov	r2, r1
     ed8:	a4 fe       	sbrs	r10, 4
     eda:	10 c0       	rjmp	.+32     	; 0xefc <vfprintf+0x356>
     edc:	b6 01       	movw	r22, r12
     ede:	80 e3       	ldi	r24, 0x30	; 48
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     ee6:	a2 fe       	sbrs	r10, 2
     ee8:	17 c0       	rjmp	.+46     	; 0xf18 <vfprintf+0x372>
     eea:	a1 fc       	sbrc	r10, 1
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <vfprintf+0x34e>
     eee:	88 e7       	ldi	r24, 0x78	; 120
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <vfprintf+0x352>
     ef4:	88 e5       	ldi	r24, 0x58	; 88
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	b6 01       	movw	r22, r12
     efa:	0c c0       	rjmp	.+24     	; 0xf14 <vfprintf+0x36e>
     efc:	8a 2d       	mov	r24, r10
     efe:	86 78       	andi	r24, 0x86	; 134
     f00:	59 f0       	breq	.+22     	; 0xf18 <vfprintf+0x372>
     f02:	a1 fe       	sbrs	r10, 1
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <vfprintf+0x364>
     f06:	8b e2       	ldi	r24, 0x2B	; 43
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <vfprintf+0x366>
     f0a:	80 e2       	ldi	r24, 0x20	; 32
     f0c:	a7 fc       	sbrc	r10, 7
     f0e:	8d e2       	ldi	r24, 0x2D	; 45
     f10:	b6 01       	movw	r22, r12
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     f18:	89 14       	cp	r8, r9
     f1a:	38 f4       	brcc	.+14     	; 0xf2a <vfprintf+0x384>
     f1c:	b6 01       	movw	r22, r12
     f1e:	80 e3       	ldi	r24, 0x30	; 48
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     f26:	9a 94       	dec	r9
     f28:	f7 cf       	rjmp	.-18     	; 0xf18 <vfprintf+0x372>
     f2a:	8a 94       	dec	r8
     f2c:	f3 01       	movw	r30, r6
     f2e:	e8 0d       	add	r30, r8
     f30:	f1 1d       	adc	r31, r1
     f32:	80 81       	ld	r24, Z
     f34:	b6 01       	movw	r22, r12
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     f3c:	81 10       	cpse	r8, r1
     f3e:	f5 cf       	rjmp	.-22     	; 0xf2a <vfprintf+0x384>
     f40:	22 20       	and	r2, r2
     f42:	09 f4       	brne	.+2      	; 0xf46 <vfprintf+0x3a0>
     f44:	42 ce       	rjmp	.-892    	; 0xbca <vfprintf+0x24>
     f46:	b6 01       	movw	r22, r12
     f48:	80 e2       	ldi	r24, 0x20	; 32
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 ca 07 	call	0xf94	; 0xf94 <fputc>
     f50:	2a 94       	dec	r2
     f52:	f6 cf       	rjmp	.-20     	; 0xf40 <vfprintf+0x39a>
     f54:	f6 01       	movw	r30, r12
     f56:	86 81       	ldd	r24, Z+6	; 0x06
     f58:	97 81       	ldd	r25, Z+7	; 0x07
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <vfprintf+0x3ba>
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	9f ef       	ldi	r25, 0xFF	; 255
     f60:	2b 96       	adiw	r28, 0x0b	; 11
     f62:	e2 e1       	ldi	r30, 0x12	; 18
     f64:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__epilogue_restores__>

00000f68 <strnlen_P>:
     f68:	fc 01       	movw	r30, r24
     f6a:	05 90       	lpm	r0, Z+
     f6c:	61 50       	subi	r22, 0x01	; 1
     f6e:	70 40       	sbci	r23, 0x00	; 0
     f70:	01 10       	cpse	r0, r1
     f72:	d8 f7       	brcc	.-10     	; 0xf6a <strnlen_P+0x2>
     f74:	80 95       	com	r24
     f76:	90 95       	com	r25
     f78:	8e 0f       	add	r24, r30
     f7a:	9f 1f       	adc	r25, r31
     f7c:	08 95       	ret

00000f7e <strnlen>:
     f7e:	fc 01       	movw	r30, r24
     f80:	61 50       	subi	r22, 0x01	; 1
     f82:	70 40       	sbci	r23, 0x00	; 0
     f84:	01 90       	ld	r0, Z+
     f86:	01 10       	cpse	r0, r1
     f88:	d8 f7       	brcc	.-10     	; 0xf80 <strnlen+0x2>
     f8a:	80 95       	com	r24
     f8c:	90 95       	com	r25
     f8e:	8e 0f       	add	r24, r30
     f90:	9f 1f       	adc	r25, r31
     f92:	08 95       	ret

00000f94 <fputc>:
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	fb 01       	movw	r30, r22
     f9e:	23 81       	ldd	r18, Z+3	; 0x03
     fa0:	21 fd       	sbrc	r18, 1
     fa2:	03 c0       	rjmp	.+6      	; 0xfaa <fputc+0x16>
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	9f ef       	ldi	r25, 0xFF	; 255
     fa8:	2c c0       	rjmp	.+88     	; 0x1002 <fputc+0x6e>
     faa:	22 ff       	sbrs	r18, 2
     fac:	16 c0       	rjmp	.+44     	; 0xfda <fputc+0x46>
     fae:	46 81       	ldd	r20, Z+6	; 0x06
     fb0:	57 81       	ldd	r21, Z+7	; 0x07
     fb2:	24 81       	ldd	r18, Z+4	; 0x04
     fb4:	35 81       	ldd	r19, Z+5	; 0x05
     fb6:	42 17       	cp	r20, r18
     fb8:	53 07       	cpc	r21, r19
     fba:	44 f4       	brge	.+16     	; 0xfcc <fputc+0x38>
     fbc:	a0 81       	ld	r26, Z
     fbe:	b1 81       	ldd	r27, Z+1	; 0x01
     fc0:	9d 01       	movw	r18, r26
     fc2:	2f 5f       	subi	r18, 0xFF	; 255
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	31 83       	std	Z+1, r19	; 0x01
     fc8:	20 83       	st	Z, r18
     fca:	8c 93       	st	X, r24
     fcc:	26 81       	ldd	r18, Z+6	; 0x06
     fce:	37 81       	ldd	r19, Z+7	; 0x07
     fd0:	2f 5f       	subi	r18, 0xFF	; 255
     fd2:	3f 4f       	sbci	r19, 0xFF	; 255
     fd4:	37 83       	std	Z+7, r19	; 0x07
     fd6:	26 83       	std	Z+6, r18	; 0x06
     fd8:	14 c0       	rjmp	.+40     	; 0x1002 <fputc+0x6e>
     fda:	8b 01       	movw	r16, r22
     fdc:	ec 01       	movw	r28, r24
     fde:	fb 01       	movw	r30, r22
     fe0:	00 84       	ldd	r0, Z+8	; 0x08
     fe2:	f1 85       	ldd	r31, Z+9	; 0x09
     fe4:	e0 2d       	mov	r30, r0
     fe6:	09 95       	icall
     fe8:	89 2b       	or	r24, r25
     fea:	e1 f6       	brne	.-72     	; 0xfa4 <fputc+0x10>
     fec:	d8 01       	movw	r26, r16
     fee:	16 96       	adiw	r26, 0x06	; 6
     ff0:	8d 91       	ld	r24, X+
     ff2:	9c 91       	ld	r25, X
     ff4:	17 97       	sbiw	r26, 0x07	; 7
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	17 96       	adiw	r26, 0x07	; 7
     ffa:	9c 93       	st	X, r25
     ffc:	8e 93       	st	-X, r24
     ffe:	16 97       	sbiw	r26, 0x06	; 6
    1000:	ce 01       	movw	r24, r28
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	08 95       	ret

0000100c <__ultoa_invert>:
    100c:	fa 01       	movw	r30, r20
    100e:	aa 27       	eor	r26, r26
    1010:	28 30       	cpi	r18, 0x08	; 8
    1012:	51 f1       	breq	.+84     	; 0x1068 <__ultoa_invert+0x5c>
    1014:	20 31       	cpi	r18, 0x10	; 16
    1016:	81 f1       	breq	.+96     	; 0x1078 <__ultoa_invert+0x6c>
    1018:	e8 94       	clt
    101a:	6f 93       	push	r22
    101c:	6e 7f       	andi	r22, 0xFE	; 254
    101e:	6e 5f       	subi	r22, 0xFE	; 254
    1020:	7f 4f       	sbci	r23, 0xFF	; 255
    1022:	8f 4f       	sbci	r24, 0xFF	; 255
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	af 4f       	sbci	r26, 0xFF	; 255
    1028:	b1 e0       	ldi	r27, 0x01	; 1
    102a:	3e d0       	rcall	.+124    	; 0x10a8 <__ultoa_invert+0x9c>
    102c:	b4 e0       	ldi	r27, 0x04	; 4
    102e:	3c d0       	rcall	.+120    	; 0x10a8 <__ultoa_invert+0x9c>
    1030:	67 0f       	add	r22, r23
    1032:	78 1f       	adc	r23, r24
    1034:	89 1f       	adc	r24, r25
    1036:	9a 1f       	adc	r25, r26
    1038:	a1 1d       	adc	r26, r1
    103a:	68 0f       	add	r22, r24
    103c:	79 1f       	adc	r23, r25
    103e:	8a 1f       	adc	r24, r26
    1040:	91 1d       	adc	r25, r1
    1042:	a1 1d       	adc	r26, r1
    1044:	6a 0f       	add	r22, r26
    1046:	71 1d       	adc	r23, r1
    1048:	81 1d       	adc	r24, r1
    104a:	91 1d       	adc	r25, r1
    104c:	a1 1d       	adc	r26, r1
    104e:	20 d0       	rcall	.+64     	; 0x1090 <__ultoa_invert+0x84>
    1050:	09 f4       	brne	.+2      	; 0x1054 <__ultoa_invert+0x48>
    1052:	68 94       	set
    1054:	3f 91       	pop	r19
    1056:	2a e0       	ldi	r18, 0x0A	; 10
    1058:	26 9f       	mul	r18, r22
    105a:	11 24       	eor	r1, r1
    105c:	30 19       	sub	r19, r0
    105e:	30 5d       	subi	r19, 0xD0	; 208
    1060:	31 93       	st	Z+, r19
    1062:	de f6       	brtc	.-74     	; 0x101a <__ultoa_invert+0xe>
    1064:	cf 01       	movw	r24, r30
    1066:	08 95       	ret
    1068:	46 2f       	mov	r20, r22
    106a:	47 70       	andi	r20, 0x07	; 7
    106c:	40 5d       	subi	r20, 0xD0	; 208
    106e:	41 93       	st	Z+, r20
    1070:	b3 e0       	ldi	r27, 0x03	; 3
    1072:	0f d0       	rcall	.+30     	; 0x1092 <__ultoa_invert+0x86>
    1074:	c9 f7       	brne	.-14     	; 0x1068 <__ultoa_invert+0x5c>
    1076:	f6 cf       	rjmp	.-20     	; 0x1064 <__ultoa_invert+0x58>
    1078:	46 2f       	mov	r20, r22
    107a:	4f 70       	andi	r20, 0x0F	; 15
    107c:	40 5d       	subi	r20, 0xD0	; 208
    107e:	4a 33       	cpi	r20, 0x3A	; 58
    1080:	18 f0       	brcs	.+6      	; 0x1088 <__ultoa_invert+0x7c>
    1082:	49 5d       	subi	r20, 0xD9	; 217
    1084:	31 fd       	sbrc	r19, 1
    1086:	40 52       	subi	r20, 0x20	; 32
    1088:	41 93       	st	Z+, r20
    108a:	02 d0       	rcall	.+4      	; 0x1090 <__ultoa_invert+0x84>
    108c:	a9 f7       	brne	.-22     	; 0x1078 <__ultoa_invert+0x6c>
    108e:	ea cf       	rjmp	.-44     	; 0x1064 <__ultoa_invert+0x58>
    1090:	b4 e0       	ldi	r27, 0x04	; 4
    1092:	a6 95       	lsr	r26
    1094:	97 95       	ror	r25
    1096:	87 95       	ror	r24
    1098:	77 95       	ror	r23
    109a:	67 95       	ror	r22
    109c:	ba 95       	dec	r27
    109e:	c9 f7       	brne	.-14     	; 0x1092 <__ultoa_invert+0x86>
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	61 05       	cpc	r22, r1
    10a4:	71 05       	cpc	r23, r1
    10a6:	08 95       	ret
    10a8:	9b 01       	movw	r18, r22
    10aa:	ac 01       	movw	r20, r24
    10ac:	0a 2e       	mov	r0, r26
    10ae:	06 94       	lsr	r0
    10b0:	57 95       	ror	r21
    10b2:	47 95       	ror	r20
    10b4:	37 95       	ror	r19
    10b6:	27 95       	ror	r18
    10b8:	ba 95       	dec	r27
    10ba:	c9 f7       	brne	.-14     	; 0x10ae <__ultoa_invert+0xa2>
    10bc:	62 0f       	add	r22, r18
    10be:	73 1f       	adc	r23, r19
    10c0:	84 1f       	adc	r24, r20
    10c2:	95 1f       	adc	r25, r21
    10c4:	a0 1d       	adc	r26, r0
    10c6:	08 95       	ret

000010c8 <__divmodsi4>:
    10c8:	05 2e       	mov	r0, r21
    10ca:	97 fb       	bst	r25, 7
    10cc:	1e f4       	brtc	.+6      	; 0x10d4 <__divmodsi4+0xc>
    10ce:	00 94       	com	r0
    10d0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__negsi2>
    10d4:	57 fd       	sbrc	r21, 7
    10d6:	07 d0       	rcall	.+14     	; 0x10e6 <__divmodsi4_neg2>
    10d8:	0e 94 cd 08 	call	0x119a	; 0x119a <__udivmodsi4>
    10dc:	07 fc       	sbrc	r0, 7
    10de:	03 d0       	rcall	.+6      	; 0x10e6 <__divmodsi4_neg2>
    10e0:	4e f4       	brtc	.+18     	; 0x10f4 <__divmodsi4_exit>
    10e2:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__negsi2>

000010e6 <__divmodsi4_neg2>:
    10e6:	50 95       	com	r21
    10e8:	40 95       	com	r20
    10ea:	30 95       	com	r19
    10ec:	21 95       	neg	r18
    10ee:	3f 4f       	sbci	r19, 0xFF	; 255
    10f0:	4f 4f       	sbci	r20, 0xFF	; 255
    10f2:	5f 4f       	sbci	r21, 0xFF	; 255

000010f4 <__divmodsi4_exit>:
    10f4:	08 95       	ret

000010f6 <__negsi2>:
    10f6:	90 95       	com	r25
    10f8:	80 95       	com	r24
    10fa:	70 95       	com	r23
    10fc:	61 95       	neg	r22
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1100:	8f 4f       	sbci	r24, 0xFF	; 255
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	08 95       	ret

00001106 <__muluhisi3>:
    1106:	0e 94 32 05 	call	0xa64	; 0xa64 <__umulhisi3>
    110a:	a5 9f       	mul	r26, r21
    110c:	90 0d       	add	r25, r0
    110e:	b4 9f       	mul	r27, r20
    1110:	90 0d       	add	r25, r0
    1112:	a4 9f       	mul	r26, r20
    1114:	80 0d       	add	r24, r0
    1116:	91 1d       	adc	r25, r1
    1118:	11 24       	eor	r1, r1
    111a:	08 95       	ret

0000111c <__mulshisi3>:
    111c:	b7 ff       	sbrs	r27, 7
    111e:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__muluhisi3>

00001122 <__mulohisi3>:
    1122:	0e 94 83 08 	call	0x1106	; 0x1106 <__muluhisi3>
    1126:	82 1b       	sub	r24, r18
    1128:	93 0b       	sbc	r25, r19
    112a:	08 95       	ret

0000112c <__prologue_saves__>:
    112c:	2f 92       	push	r2
    112e:	3f 92       	push	r3
    1130:	4f 92       	push	r4
    1132:	5f 92       	push	r5
    1134:	6f 92       	push	r6
    1136:	7f 92       	push	r7
    1138:	8f 92       	push	r8
    113a:	9f 92       	push	r9
    113c:	af 92       	push	r10
    113e:	bf 92       	push	r11
    1140:	cf 92       	push	r12
    1142:	df 92       	push	r13
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	ca 1b       	sub	r28, r26
    1156:	db 0b       	sbc	r29, r27
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	09 94       	ijmp

00001164 <__epilogue_restores__>:
    1164:	2a 88       	ldd	r2, Y+18	; 0x12
    1166:	39 88       	ldd	r3, Y+17	; 0x11
    1168:	48 88       	ldd	r4, Y+16	; 0x10
    116a:	5f 84       	ldd	r5, Y+15	; 0x0f
    116c:	6e 84       	ldd	r6, Y+14	; 0x0e
    116e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1170:	8c 84       	ldd	r8, Y+12	; 0x0c
    1172:	9b 84       	ldd	r9, Y+11	; 0x0b
    1174:	aa 84       	ldd	r10, Y+10	; 0x0a
    1176:	b9 84       	ldd	r11, Y+9	; 0x09
    1178:	c8 84       	ldd	r12, Y+8	; 0x08
    117a:	df 80       	ldd	r13, Y+7	; 0x07
    117c:	ee 80       	ldd	r14, Y+6	; 0x06
    117e:	fd 80       	ldd	r15, Y+5	; 0x05
    1180:	0c 81       	ldd	r16, Y+4	; 0x04
    1182:	1b 81       	ldd	r17, Y+3	; 0x03
    1184:	aa 81       	ldd	r26, Y+2	; 0x02
    1186:	b9 81       	ldd	r27, Y+1	; 0x01
    1188:	ce 0f       	add	r28, r30
    118a:	d1 1d       	adc	r29, r1
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	ed 01       	movw	r28, r26
    1198:	08 95       	ret

0000119a <__udivmodsi4>:
    119a:	a1 e2       	ldi	r26, 0x21	; 33
    119c:	1a 2e       	mov	r1, r26
    119e:	aa 1b       	sub	r26, r26
    11a0:	bb 1b       	sub	r27, r27
    11a2:	fd 01       	movw	r30, r26
    11a4:	0d c0       	rjmp	.+26     	; 0x11c0 <__udivmodsi4_ep>

000011a6 <__udivmodsi4_loop>:
    11a6:	aa 1f       	adc	r26, r26
    11a8:	bb 1f       	adc	r27, r27
    11aa:	ee 1f       	adc	r30, r30
    11ac:	ff 1f       	adc	r31, r31
    11ae:	a2 17       	cp	r26, r18
    11b0:	b3 07       	cpc	r27, r19
    11b2:	e4 07       	cpc	r30, r20
    11b4:	f5 07       	cpc	r31, r21
    11b6:	20 f0       	brcs	.+8      	; 0x11c0 <__udivmodsi4_ep>
    11b8:	a2 1b       	sub	r26, r18
    11ba:	b3 0b       	sbc	r27, r19
    11bc:	e4 0b       	sbc	r30, r20
    11be:	f5 0b       	sbc	r31, r21

000011c0 <__udivmodsi4_ep>:
    11c0:	66 1f       	adc	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	88 1f       	adc	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	1a 94       	dec	r1
    11ca:	69 f7       	brne	.-38     	; 0x11a6 <__udivmodsi4_loop>
    11cc:	60 95       	com	r22
    11ce:	70 95       	com	r23
    11d0:	80 95       	com	r24
    11d2:	90 95       	com	r25
    11d4:	9b 01       	movw	r18, r22
    11d6:	ac 01       	movw	r20, r24
    11d8:	bd 01       	movw	r22, r26
    11da:	cf 01       	movw	r24, r30
    11dc:	08 95       	ret

000011de <_exit>:
    11de:	f8 94       	cli

000011e0 <__stop_program>:
    11e0:	ff cf       	rjmp	.-2      	; 0x11e0 <__stop_program>
